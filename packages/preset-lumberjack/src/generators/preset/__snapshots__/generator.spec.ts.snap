// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`preset generator should run successfully 1`] = `
"{
  ".prettierrc": {
    "path": "./.prettierrc",
    "isBinary": false,
    "content": [
      "{ \\"singleQuote\\": true }"
    ]
  },
  "README.md": {
    "path": "./README.md",
    "isBinary": false,
    "content": [
      "# Solana Game Preset",
      "This game is ment as a starter game for on chain games.",
      "There is a js and a unity client for this game and both are talking to a solana anchor program.",
      "This game uses gum session keys for auto approval of transactions.",
      "Note that neither the program nor session keys are audited. Use at your own risk.",
      "# How to run this example",
      "## Quickstart",
      "The unity client and the js client are both connected to the same program and should work out of the box connecting to the already deployed program.",
      "### Unity",
      "Open the Unity project with Unity Version 2021.3.32.f1 (or similar), open the GameScene or LoginScene and hit play.",
      "Use the editor login button in the bottom left. If you cant get devnet sol you can copy your address from the console and use the faucet here: https://faucet.solana.com/ to request some sol.",
      "### Js Client",
      "To start the js client open the project in visual studio code and run:",
      "\`\`\`bash",
      "cd app",
      "yarn install",
      "yarn dev",
      "\`\`\`",
      "To start changing the program and connecting to your own program follow the steps below.",
      "## Installing Solana dependencies",
      "Follow the installation here: https://www.anchor-lang.com/docs/installation",
      "Install the latest 1.16 solana version (1.17 is not supported yet)",
      "sh -c \\"$(curl -sSfL https://release.solana.com/v1.16.18/install)\\"",
      "Anchor program",
      "1. Install the [Anchor CLI](https://project-serum.github.io/anchor/getting-started/installation.html)",
      "2. \`cd program\` to end the program directory",
      "3. Run \`anchor build\` to build the program",
      "4. Run \`anchor deploy\` to deploy the program",
      "5. Copy the program id from the terminal into the lib.rs, anchor.toml and within the unity project in the AnchorService and if you use js in the anchor.ts file",
      "6. Build and deploy again",
      "Next js client",
      "1. Install [Node.js](https://nodejs.org/en/download/)",
      "2. Copy the program id into app/utils/anchor.ts",
      "3. \`cd app\` to end the app directory",
      "4. Run \`yarn install\` to install node modules",
      "5. Run \`yarn dev\` to start the client",
      "6. After doing changes to the anchor program make sure to copy over the types from the program into the client so you can use them. You can find the js types in the target/idl folder.",
      "Unity client",
      "1. Install [Unity](https://unity.com/)",
      "2. Open the MainScene",
      "3. Hit play",
      "4. After doing changes to the anchor program make sure to regenerate the C# client: https://solanacookbook.com/gaming/porting-anchor-to-unity.html#generating-the-client",
      "Its done like this (after you have build the program):",
      "\`\`\`bash",
      "cd program",
      "dotnet tool install Solana.Unity.Anchor.Tool <- run once",
      "dotnet anchorgen -i target/idl/lumberjack.json -o target/idl/Lumberjack.cs",
      "\`\`\`",
      "(Replace lumberjack with the name of your program)",
      "then copy the c# code into the unity project.",
      "## Connect to local host (optional)",
      "To connect to local host from Unity add these links on the wallet holder game object:",
      "http://localhost:8899",
      "ws://localhost:8900",
      "## Video walkthroughs",
      "Here are two videos explaining the energy logic and session keys:",
      "Session keys:",
      "https://www.youtube.com/watch?v=oKvWZoybv7Y&t=17s&ab_channel=Solana",
      "Energy system:",
      "https://www.youtube.com/watch?v=YYQtRCXJBgs&t=4s&ab_channel=Solana",
      "# Project structure",
      "The anchor project is structured like this:",
      "The entry point is in the lib.rs file. Here we define the program id and the instructions.",
      "The instructions are defined in the instructions folder.",
      "The state is defined in the state folder.",
      "So the calls arrive in the lib.rs file and are then forwarded to the instructions.",
      "The instructions then call the state to get the data and update it.",
      "\`\`\`shell",
      "├── src",
      "│   ├── instructions",
      "│   │   ├── chop_tree.rs",
      "│   │   ├── init_player.rs",
      "│   │   └── update_energy.rs",
      "│   ├── state",
      "│   │   ├── game_data.rs",
      "│   │   ├── mod.rs",
      "│   │   └── player_data.rs",
      "│   ├── lib.rs",
      "│   └── constants.rs",
      "│   └── errors.rs",
      "\`\`\`",
      "The project uses session keys (maintained by Magic Block) for auto approving transactions using an expiring token.",
      "# Energy System",
      "Many casual games in traditional gaming use energy systems. This is how you can build it on chain.",
      "If you have no prior knowledge in solan and rust programming it is recommended to start with the Solana cookbook [Hello world example](<[https://unity.com/](https://solanacookbook.com/gaming/hello-world.html#getting-started-with-your-first-solana-game)>).",
      "## Anchor program",
      "Here we will build a program which refills energy over time which the player can then use to perform actions in the game.",
      "In our example it will be a lumber jack which chops trees. Every tree will reward on wood and cost one energy.",
      "### Creating the player account",
      "First the player needs to create an account which saves the state of our player. Notice the last_login time which will save the current unix time stamp of the player he interacts with the program.",
      "Like this we will be able to calculate how much energy the player has at a certain point in time.",
      "We also have a value for wood which will store the wood the lumber jack chucks in the game.",
      "\`\`\`rust",
      "pub fn init_player(ctx: Context<InitPlayer>) -> Result<()> {",
      "ctx.accounts.player.energy = MAX_ENERGY;",
      "ctx.accounts.player.last_login = Clock::get()?.unix_timestamp;",
      "ctx.accounts.player.authority = ctx.accounts.signer.key();",
      "Ok(())",
      "}",
      "#[derive(Accounts)]",
      "pub struct InitPlayer<'info> {",
      "#[account(",
      "init,",
      "payer = signer,",
      "space = 1000, // 8+32+x+1+8+8+8 But taking 1000 to have space to expand easily.",
      "seeds = [b\\"player\\".as_ref(), signer.key().as_ref()],",
      "bump,",
      ")]",
      "pub player: Account<'info, PlayerData>,",
      "#[account(",
      "init_if_needed,",
      "payer = signer,",
      "space = 1000, // 8 + 8 for anchor account discriminator and the u64. Using 1000 to have space to expand easily.",
      "seeds = [b\\"gameData\\".as_ref()],",
      "bump,",
      ")]",
      "pub game_data: Account<'info, GameData>,",
      "#[account(mut)]",
      "pub signer: Signer<'info>,",
      "pub system_program: Program<'info, System>,",
      "}",
      "\`\`\`",
      "### Chopping trees",
      "Then whenever the player calls the chop_tree instruction we will check if the player has enough energy and reward him with one wood.",
      "\`\`\`rust",
      "#[error_code]",
      "pub enum ErrorCode {",
      "#[msg(\\"Not enough energy\\")]",
      "NotEnoughEnergy,",
      "}",
      "pub fn chop_tree(mut ctx: Context<ChopTree>) -> Result<()> {",
      "let account = &mut ctx.accounts;",
      "update_energy(account)?;",
      "if ctx.accounts.player.energy == 0 {",
      "return err!(ErrorCode::NotEnoughEnergy);",
      "}",
      "ctx.accounts.player.wood = ctx.accounts.player.wood + 1;",
      "ctx.accounts.player.energy = ctx.accounts.player.energy - 1;",
      "msg!(\\"You chopped a tree and got 1 log. You have {} wood and {} energy left.\\", ctx.accounts.player.wood, ctx.accounts.player.energy);",
      "Ok(())",
      "}",
      "\`\`\`",
      "### Calculating the energy",
      "The interesting part happens in the update_energy function. We check how much time has passed and calculate the energy that the player will have at the given time.",
      "The same thing we will also do in the client. So we basically lazily update the energy instead of polling it all the time.",
      "The is a common technic in game development.",
      "\`\`\`rust",
      "const TIME_TO_REFILL_ENERGY: i64 = 60;",
      "const MAX_ENERGY: u64 = 10;",
      "pub fn update_energy(&mut self) -> Result<()> {",
      "// Get the current timestamp",
      "let current_timestamp = Clock::get()?.unix_timestamp;",
      "// Calculate the time passed since the last login",
      "let mut time_passed: i64 = current_timestamp - self.last_login;",
      "// Calculate the time spent refilling energy",
      "let mut time_spent = 0;",
      "while time_passed >= TIME_TO_REFILL_ENERGY && self.energy < MAX_ENERGY {",
      "self.energy += 1;",
      "time_passed -= TIME_TO_REFILL_ENERGY;",
      "time_spent += TIME_TO_REFILL_ENERGY;",
      "}",
      "if self.energy >= MAX_ENERGY {",
      "self.last_login = current_timestamp;",
      "} else {",
      "self.last_login += time_spent;",
      "}",
      "Ok(())",
      "}",
      "\`\`\`",
      "## Js client",
      "### Subscribe to account updates",
      "It is possible to subscribe to account updates via a websocket. This get updates to this account pushed directly back to the client without the need to poll this data. This allows fast gameplay because the updates usually arrive after around 500ms.",
      "\`\`\`js",
      "useEffect(() => {",
      "if (!publicKey) {",
      "return;",
      "}",
      "const [pda] = PublicKey.findProgramAddressSync(",
      "[Buffer.from('player', 'utf8'), publicKey.toBuffer()],",
      "new PublicKey(Lumberjack_PROGRAM_ID)",
      ");",
      "try {",
      "program.account.playerData.fetch(pda).then((data) => {",
      "setGameState(data);",
      "});",
      "} catch (e) {",
      "window.alert('No player data found, please init!');",
      "}",
      "connection.onAccountChange(pda, (account) => {",
      "setGameState(program.coder.accounts.decode('playerData', account.data));",
      "});",
      "}, [publicKey]);",
      "\`\`\`",
      "### Calculate energy and show countdown",
      "In the java script client we can then perform the same logic and show a countdown timer for the player so that he knows when the next energy will be available:",
      "\`\`\`js",
      "const interval = setInterval(async () => {",
      "if (gameState == null || gameState.lastLogin == undefined || gameState.energy >= 10) {",
      "return;",
      "}",
      "const lastLoginTime = gameState.lastLogin * 1000;",
      "const currentTime = Date.now();",
      "const timePassed = (currentTime - lastLoginTime) / 1000;",
      "while (timePassed > TIME_TO_REFILL_ENERGY && gameState.energy < MAX_ENERGY) {",
      "gameState.energy++;",
      "gameState.lastLogin += TIME_TO_REFILL_ENERGY;",
      "timePassed -= TIME_TO_REFILL_ENERGY;",
      "}",
      "setTimePassed(timePassed);",
      "const nextEnergyIn = Math.floor(TIME_TO_REFILL_ENERGY - timePassed);",
      "setEnergyNextIn(nextEnergyIn > 0 ? nextEnergyIn : 0);",
      "}, 1000);",
      "return () => clearInterval(interval);",
      "}, [gameState, timePassed]);",
      "...",
      "{(gameState && <div className=\\"flex flex-col items-center\\">",
      "{(\\"Wood: \\" + gameState.wood + \\" Energy: \\" + gameState.energy + \\" Next energy in: \\" + nextEnergyIn )}",
      "</div>)}",
      "\`\`\`",
      "## Unity client",
      "In the Unity client everything interesting happens in the AnchorService.",
      "To generate the client code you can follow the instructions here: https://solanacookbook.com/gaming/porting-anchor-to-unity.html#generating-the-client",
      "\`\`\`bash",
      "cd program",
      "dotnet tool install Solana.Unity.Anchor.Tool <- run once",
      "dotnet anchorgen -i target/idl/lumberjack.json -o target/idl/Lumberjack.cs",
      "\`\`\`",
      "### Session keys",
      "Session keys is an optional component. What it does is creating a local key pair which is toped up with some sol which can be used to autoapprove transactions. The session token is only allowed on certain functions of the program and has an expiry of 23 hours. Then the player will get the sol back and can create a new session.",
      "With this you can now build any energy based game and even if someone builds a bot for the game the most he can do is play optimally, which maybe even easier to achieve when playing normally depending on the logic of your game.",
      "This game becomes even better when combined with the Token example from Solana Cookbook and you actually drop some spl token to the players."
    ]
  },
  "app": {
    "path": "./app",
    "children": {
      ".DS_Store": {
        "path": "./app/.DS_Store",
        "isBinary": true,
        "content": null
      },
      ".eslintrc.json": {
        "path": "./app/.eslintrc.json",
        "isBinary": false,
        "content": [
          "{",
          "\\"extends\\": \\"next/core-web-vitals\\"",
          "}"
        ]
      },
      ".gitignore": {
        "path": "./app/.gitignore",
        "isBinary": false,
        "content": [
          "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.",
          "# dependencies",
          "/node_modules",
          "/.pnp",
          ".pnp.js",
          "# testing",
          "/coverage",
          "# next.js",
          "/.next/",
          "/out/",
          "# production",
          "/build",
          "# misc",
          ".DS_Store",
          "*.pem",
          "# debug",
          "npm-debug.log*",
          "yarn-debug.log*",
          "yarn-error.log*",
          "# local env files",
          ".env*.local",
          "# vercel",
          ".vercel",
          "# typescript",
          "*.tsbuildinfo",
          "next-env.d.ts"
        ]
      },
      "README.md": {
        "path": "./app/README.md",
        "isBinary": false,
        "content": [
          "This is a [Next.js](https://nextjs.org/) project bootstrapped with [\`create-next-app\`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).",
          "## Getting Started",
          "First, run the development server:",
          "\`\`\`bash",
          "npm run dev",
          "# or",
          "yarn dev",
          "# or",
          "pnpm dev",
          "\`\`\`",
          "Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.",
          "You can start editing the page by modifying \`pages/index.tsx\`. The page auto-updates as you edit the file.",
          "[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in \`pages/api/hello.ts\`.",
          "The \`pages/api\` directory is mapped to \`/api/*\`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.",
          "This project uses [\`next/font\`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.",
          "## Learn More",
          "To learn more about Next.js, take a look at the following resources:",
          "- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.",
          "- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.",
          "You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!",
          "## Deploy on Vercel",
          "The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.",
          "Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details."
        ]
      },
      "components": {
        "path": "./app/components",
        "children": {
          "ChopTreeButton.tsx": {
            "path": "./app/components/ChopTreeButton.tsx",
            "isBinary": false,
            "content": [
              "import Image from 'next/image';",
              "import { useCallback, useState } from 'react';",
              "import { Button, HStack, VStack } from '@chakra-ui/react';",
              "import { useConnection, useWallet } from '@solana/wallet-adapter-react';",
              "import { useSessionWallet } from '@magicblock-labs/gum-react-sdk';",
              "import { useGameState } from '@/contexts/GameStateProvider';",
              "import { GAME_DATA_SEED, gameDataPDA, program } from '@/utils/anchor';",
              "const ChopTreeButton = () => {",
              "const { publicKey, sendTransaction } = useWallet();",
              "const { connection } = useConnection();",
              "const sessionWallet = useSessionWallet();",
              "const { gameState, playerDataPDA } = useGameState();",
              "const [isLoadingSession, setIsLoadingSession] = useState(false);",
              "const [isLoadingMainWallet, setIsLoadingMainWallet] = useState(false);",
              "const [transactionCounter, setTransactionCounter] = useState(0);",
              "const onChopClick = useCallback(async () => {",
              "setIsLoadingSession(true);",
              "if (!playerDataPDA || !sessionWallet) return;",
              "setTransactionCounter(transactionCounter + 1);",
              "try {",
              "const transaction = await program.methods",
              ".chopTree(GAME_DATA_SEED, transactionCounter)",
              ".accounts({",
              "player: playerDataPDA,",
              "gameData: gameDataPDA,",
              "signer: sessionWallet.publicKey!,",
              "sessionToken: sessionWallet.sessionToken,",
              "})",
              ".transaction();",
              "const txids = await sessionWallet.signAndSendTransaction!(transaction);",
              "if (txids && txids.length > 0) {",
              "console.log('Transaction sent:', txids);",
              "} else {",
              "console.error('Failed to send transaction');",
              "}",
              "} catch (error: any) {",
              "console.log('error', \`Chopping failed! \${error?.message}\`);",
              "} finally {",
              "setIsLoadingSession(false);",
              "}",
              "}, [sessionWallet]);",
              "const onChopMainWalletClick = useCallback(async () => {",
              "if (!publicKey || !playerDataPDA) return;",
              "setIsLoadingMainWallet(true);",
              "try {",
              "const transaction = await program.methods",
              ".chopTree(GAME_DATA_SEED, transactionCounter)",
              ".accounts({",
              "player: playerDataPDA,",
              "gameData: gameDataPDA,",
              "signer: publicKey,",
              "sessionToken: null,",
              "})",
              ".transaction();",
              "const txSig = await sendTransaction(transaction, connection, {",
              "skipPreflight: true,",
              "});",
              "console.log(\`https://explorer.solana.com/tx/\${txSig}?cluster=devnet\`);",
              "} catch (error: any) {",
              "console.log('error', \`Chopping failed! \${error?.message}\`);",
              "} finally {",
              "setIsLoadingMainWallet(false);",
              "}",
              "}, [publicKey, playerDataPDA, connection]);",
              "return (",
              "<>",
              "{publicKey && gameState && (",
              "<VStack>",
              "<Image src=\\"/Beaver.png\\" alt=\\"Energy Icon\\" width={64} height={64} />",
              "<HStack>",
              "{sessionWallet && sessionWallet.sessionToken != null && (",
              "<Button",
              "isLoading={isLoadingSession}",
              "onClick={onChopClick}",
              "width=\\"175px\\"",
              ">",
              "Chop tree Session",
              "</Button>",
              ")}",
              "<Button",
              "isLoading={isLoadingMainWallet}",
              "onClick={onChopMainWalletClick}",
              "width=\\"175px\\"",
              ">",
              "Chop tree MainWallet",
              "</Button>",
              "</HStack>",
              "</VStack>",
              ")}",
              "</>",
              ");",
              "};",
              "export default ChopTreeButton;"
            ]
          },
          "DisplayGameState.tsx": {
            "path": "./app/components/DisplayGameState.tsx",
            "isBinary": false,
            "content": [
              "import Image from 'next/image';",
              "import { HStack, VStack, Text } from '@chakra-ui/react';",
              "import { useWallet } from '@solana/wallet-adapter-react';",
              "import { useGameState } from '@/contexts/GameStateProvider';",
              "import { TOTAL_WOOD_AVAILABLE } from '@/utils/anchor';",
              "const DisplayPlayerData = () => {",
              "const { publicKey } = useWallet();",
              "const { gameState, nextEnergyIn, totalWoodAvailable } = useGameState();",
              "return (",
              "<>",
              "{gameState && publicKey && (",
              "<HStack justifyContent=\\"center\\" spacing={4}>",
              "<HStack>",
              "<Image src=\\"/Wood.png\\" alt=\\"Wood Icon\\" width={64} height={64} />",
              "<Text>Wood: {Number(gameState.wood)}</Text>",
              "</HStack>",
              "<HStack>",
              "<Image src=\\"/energy.png\\" alt=\\"Energy Icon\\" width={64} height={64} />",
              "<VStack>",
              "<Text>Energy: {Number(gameState.energy)}</Text>",
              "<Text>Next in: {nextEnergyIn}</Text>",
              "</VStack>",
              "</HStack>",
              "<Text>",
              "Total Wood available:{' '}",
              "{Number(TOTAL_WOOD_AVAILABLE) - Number(totalWoodAvailable)}",
              "</Text>",
              "</HStack>",
              ")}",
              "</>",
              ");",
              "};",
              "export default DisplayPlayerData;"
            ]
          },
          "DisplayNfts.tsx": {
            "path": "./app/components/DisplayNfts.tsx",
            "isBinary": false,
            "content": [
              "import Image from 'next/image';",
              "import { useWallet } from '@solana/wallet-adapter-react';",
              "import { useNftState } from '@/contexts/NftProvider';",
              "import { useState } from 'react';",
              "export class Nft {",
              "name: string;",
              "url: string;",
              "constructor() {",
              "this.url = '';",
              "this.name = '';",
              "}",
              "}",
              "const DisplayNfts = () => {",
              "const { publicKey } = useWallet();",
              "const { nftState: nftState } = useNftState();",
              "const [showItems, setShowItems] = useState(false);",
              "const handleButtonClick = () => {",
              "setShowItems(!showItems);",
              "};",
              "var myNfts = new Array<Nft>();",
              "if (nftState != null) {",
              "for (var i = 0; i < nftState.items.length; i++) {",
              "try {",
              "const nftData = nftState.items[i];",
              "let nft = new Nft();",
              "nft.name = nftData.content.metadata.name;",
              "nft.url = nftData.content.links.image;",
              "myNfts.push(nft);",
              "} catch (error) {",
              "console.log(error);",
              "}",
              "}",
              "}",
              "function onNftClickedCallback(nft: Nft): void {",
              "window.alert('Nft clicked: ' + nft.name);",
              "}",
              "return (",
              "<>",
              "{nftState && publicKey && (",
              "<div>",
              "<button onClick={handleButtonClick}>Show NFTs</button>",
              "{showItems && (",
              "<div className=\\"flex flex-row space-x-5 overflow-x-auto self-end place-items-center justify-center ... \\">",
              "{myNfts.map((nft) => (",
              "<div key={nft.name}>",
              "<p className=\\"text-sky-400 truncate ...\\">{nft.name}</p>",
              "<div className=\\"flex flex-row place-items-center ...\\">",
              "{nft.url ? (",
              "<Image",
              "onClick={() => onNftClickedCallback(nft)}",
              "src={nft.url}",
              "alt=\\"NFT Icon\\"",
              "width={64}",
              "height={64}",
              "/>",
              ") : (",
              "<div>Error loading image</div>",
              ")}",
              "</div>",
              "</div>",
              "))}",
              "</div>",
              ")}",
              "</div>",
              ")}",
              "</>",
              ");",
              "};",
              "export default DisplayNfts;"
            ]
          },
          "InitPlayerButton.tsx": {
            "path": "./app/components/InitPlayerButton.tsx",
            "isBinary": false,
            "content": [
              "import { useCallback, useState } from 'react';",
              "import { Button } from '@chakra-ui/react';",
              "import { SystemProgram } from '@solana/web3.js';",
              "import { useConnection, useWallet } from '@solana/wallet-adapter-react';",
              "import { useGameState } from '@/contexts/GameStateProvider';",
              "import { GAME_DATA_SEED, gameDataPDA, program } from '@/utils/anchor';",
              "const InitPlayerButton = () => {",
              "const { publicKey, sendTransaction } = useWallet();",
              "const { connection } = useConnection();",
              "const [isLoading, setIsLoading] = useState(false);",
              "const { gameState, playerDataPDA } = useGameState();",
              "// Init player button click handler",
              "const handleClick = useCallback(async () => {",
              "if (!publicKey || !playerDataPDA) return;",
              "setIsLoading(true);",
              "try {",
              "const transaction = await program.methods",
              ".initPlayer(GAME_DATA_SEED)",
              ".accounts({",
              "player: playerDataPDA,",
              "gameData: gameDataPDA,",
              "signer: publicKey,",
              "systemProgram: SystemProgram.programId,",
              "})",
              ".transaction();",
              "const txSig = await sendTransaction(transaction, connection, {",
              "skipPreflight: true,",
              "});",
              "console.log(\`https://explorer.solana.com/tx/\${txSig}?cluster=devnet\`);",
              "} catch (error) {",
              "console.log(error);",
              "} finally {",
              "setIsLoading(false); // set loading state back to false",
              "}",
              "}, [publicKey, playerDataPDA, connection]);",
              "return (",
              "<>",
              "{!gameState && publicKey && (",
              "<Button onClick={handleClick} isLoading={isLoading}>",
              "Init Player",
              "</Button>",
              ")}",
              "</>",
              ");",
              "};",
              "export default InitPlayerButton;"
            ]
          },
          "RequestAirdrop.tsx": {
            "path": "./app/components/RequestAirdrop.tsx",
            "isBinary": false,
            "content": [
              "import { useCallback, useEffect, useState } from 'react';",
              "import { Button, Text } from '@chakra-ui/react';",
              "import { LAMPORTS_PER_SOL } from '@solana/web3.js';",
              "import { useConnection, useWallet } from '@solana/wallet-adapter-react';",
              "const RequestAirdrop = () => {",
              "const { publicKey } = useWallet();",
              "const { connection } = useConnection();",
              "const [balance, setBalance] = useState<number>(0);",
              "const [isLoading, setIsLoading] = useState(false);",
              "const getBalance = useCallback(async () => {",
              "if (!publicKey) return;",
              "const balance = await connection.getBalance(publicKey, 'confirmed');",
              "setBalance(balance / LAMPORTS_PER_SOL);",
              "}, [publicKey, connection]);",
              "const onClick = useCallback(async () => {",
              "setIsLoading(true);",
              "if (!publicKey) return;",
              "try {",
              "const txSig = await connection.requestAirdrop(",
              "publicKey,",
              "LAMPORTS_PER_SOL",
              ");",
              "await connection.confirmTransaction(txSig);",
              "getBalance();",
              "} catch (error: any) {",
              "alert(error.message);",
              "} finally {",
              "setIsLoading(false);",
              "}",
              "}, [publicKey, connection, getBalance]);",
              "useEffect(() => {",
              "getBalance();",
              "}, [getBalance]);",
              "return (",
              "<>",
              "{publicKey &&",
              "(balance <= 0 ? (",
              "<Button onClick={onClick} isLoading={isLoading}>",
              "Airdrop 1",
              "</Button>",
              ") : (",
              "<Text>Balance: {Number(balance).toFixed(3)}</Text>",
              "))}",
              "</>",
              ");",
              "};",
              "export default RequestAirdrop;"
            ]
          },
          "SessionKeyButton.tsx": {
            "path": "./app/components/SessionKeyButton.tsx",
            "isBinary": false,
            "content": [
              "import { useState } from 'react';",
              "import { Button } from '@chakra-ui/react';",
              "import { useWallet } from '@solana/wallet-adapter-react';",
              "import { useSessionWallet } from '@magicblock-labs/gum-react-sdk';",
              "import { useGameState } from '@/contexts/GameStateProvider';",
              "import { program } from '@/utils/anchor';",
              "const SessionKeyButton = () => {",
              "const { publicKey } = useWallet();",
              "const { gameState } = useGameState();",
              "const sessionWallet = useSessionWallet();",
              "const [isLoading, setIsLoading] = useState(false);",
              "const handleCreateSession = async () => {",
              "setIsLoading(true);",
              "const topUp = true;",
              "const expiryInMinutes = 600;",
              "try {",
              "const session = await sessionWallet.createSession(",
              "program.programId,",
              "topUp,",
              "expiryInMinutes",
              ");",
              "console.log('Session created:', session);",
              "} catch (error) {",
              "console.error('Failed to create session:', error);",
              "} finally {",
              "setIsLoading(false);",
              "}",
              "};",
              "const handleRevokeSession = async () => {",
              "setIsLoading(true);",
              "try {",
              "await sessionWallet.revokeSession();",
              "console.log('Session revoked');",
              "} catch (error) {",
              "console.error('Failed to revoke session:', error);",
              "} finally {",
              "setIsLoading(false);",
              "}",
              "};",
              "return (",
              "<>",
              "{publicKey && gameState && (",
              "<Button",
              "isLoading={isLoading}",
              "onClick={",
              "sessionWallet && sessionWallet.sessionToken == null",
              "? handleCreateSession",
              ": handleRevokeSession",
              "}",
              ">",
              "{sessionWallet && sessionWallet.sessionToken == null",
              "? 'Create session'",
              ": 'Revoke Session'}",
              "</Button>",
              ")}",
              "</>",
              ");",
              "};",
              "export default SessionKeyButton;"
            ]
          },
          "WalletMultiButton.tsx": {
            "path": "./app/components/WalletMultiButton.tsx",
            "isBinary": false,
            "content": [
              "import dynamic from 'next/dynamic';",
              "export const WalletMultiButtonDynamic = dynamic(",
              "async () =>",
              "(await import('@solana/wallet-adapter-react-ui')).WalletMultiButton,",
              "{ ssr: false }",
              ");",
              "const WalletMultiButton = () => {",
              "return <WalletMultiButtonDynamic />;",
              "};",
              "export default WalletMultiButton;"
            ]
          }
        }
      },
      "contexts": {
        "path": "./app/contexts",
        "children": {
          "GameStateProvider.tsx": {
            "path": "./app/contexts/GameStateProvider.tsx",
            "isBinary": false,
            "content": [
              "import { createContext, useContext, useEffect, useState } from 'react';",
              "import { PublicKey } from '@solana/web3.js';",
              "import { useConnection, useWallet } from '@solana/wallet-adapter-react';",
              "import {",
              "program,",
              "PlayerData,",
              "MAX_ENERGY,",
              "TIME_TO_REFILL_ENERGY,",
              "GameData,",
              "GAME_DATA_SEED,",
              "} from '@/utils/anchor';",
              "import { BN } from '@coral-xyz/anchor';",
              "const GameStateContext = createContext<{",
              "playerDataPDA: PublicKey | null;",
              "gameState: PlayerData | null;",
              "nextEnergyIn: number;",
              "totalWoodAvailable: number | null;",
              "}>({",
              "playerDataPDA: null,",
              "gameState: null,",
              "nextEnergyIn: 0,",
              "totalWoodAvailable: 0,",
              "});",
              "export const useGameState = () => useContext(GameStateContext);",
              "export const GameStateProvider = ({",
              "children,",
              "}: {",
              "children: React.ReactNode;",
              "}) => {",
              "const { publicKey } = useWallet();",
              "const { connection } = useConnection();",
              "const [playerDataPDA, setPlayerData] = useState<PublicKey | null>(null);",
              "const [playerState, setPlayerState] = useState<PlayerData | null>(null);",
              "const [timePassed, setTimePassed] = useState<any>([]);",
              "const [nextEnergyIn, setEnergyNextIn] = useState<number>(0);",
              "const [gameDataPDA, setGameDataPDA] = useState<PublicKey | null>(null);",
              "const [gameData, setGameData] = useState<GameData | null>(null);",
              "const [totalWoodAvailable, setTotalWoodAvailable] = useState<number | null>(",
              "0",
              ");",
              "useEffect(() => {",
              "setPlayerState(null);",
              "if (!publicKey) {",
              "return;",
              "}",
              "const [pda] = PublicKey.findProgramAddressSync(",
              "[Buffer.from('player', 'utf8'), publicKey.toBuffer()],",
              "program.programId",
              ");",
              "setPlayerData(pda);",
              "program.account.playerData",
              ".fetch(pda)",
              ".then((data) => {",
              "setPlayerState(data);",
              "})",
              ".catch((error) => {",
              "window.alert('No player data found, please init!');",
              "});",
              "connection.onAccountChange(pda, (account) => {",
              "setPlayerState(program.coder.accounts.decode('playerData', account.data));",
              "});",
              "}, [publicKey]);",
              "useEffect(() => {",
              "setGameData(null);",
              "if (!publicKey) {",
              "return;",
              "}",
              "const [pda] = PublicKey.findProgramAddressSync(",
              "[Buffer.from(GAME_DATA_SEED, 'utf8')],",
              "program.programId",
              ");",
              "setGameDataPDA(gameDataPDA);",
              "program.account.gameData",
              ".fetch(pda)",
              ".then((data) => {",
              "setGameData(data);",
              "setTotalWoodAvailable(data.totalWoodCollected.toNumber());",
              "})",
              ".catch((error) => {",
              "window.alert('No game data found, please init!');",
              "});",
              "connection.onAccountChange(pda, (account) => {",
              "const newGameData = program.coder.accounts.decode(",
              "'gameData',",
              "account.data",
              ");",
              "setGameData(newGameData);",
              "setTotalWoodAvailable(newGameData.totalWoodCollected.toNumber());",
              "});",
              "}, [publicKey]);",
              "useEffect(() => {",
              "const interval = setInterval(async () => {",
              "if (",
              "playerState == null ||",
              "playerState.lastLogin == undefined ||",
              "playerState.energy.toNumber() >= MAX_ENERGY",
              ") {",
              "return;",
              "}",
              "const lastLoginTime = playerState.lastLogin.toNumber() * 1000;",
              "const currentTime = Date.now();",
              "let timePassed = (currentTime - lastLoginTime) / 1000;",
              "while (",
              "timePassed >= TIME_TO_REFILL_ENERGY.toNumber() &&",
              "playerState.energy.toNumber() < MAX_ENERGY",
              ") {",
              "playerState.energy = playerState.energy.add(new BN(1));",
              "playerState.lastLogin = playerState.lastLogin.add(",
              "TIME_TO_REFILL_ENERGY",
              ");",
              "timePassed -= TIME_TO_REFILL_ENERGY.toNumber();",
              "}",
              "setTimePassed(timePassed);",
              "const nextEnergyIn = Math.floor(",
              "TIME_TO_REFILL_ENERGY.toNumber() - timePassed",
              ");",
              "setEnergyNextIn(nextEnergyIn > 0 ? nextEnergyIn : 0);",
              "}, 1000);",
              "return () => clearInterval(interval);",
              "}, [playerState, timePassed, nextEnergyIn]);",
              "return (",
              "<GameStateContext.Provider",
              "value={{",
              "playerDataPDA,",
              "gameState: playerState,",
              "nextEnergyIn,",
              "totalWoodAvailable,",
              "}}",
              ">",
              "{children}",
              "</GameStateContext.Provider>",
              ");",
              "};"
            ]
          },
          "NftProvider.tsx": {
            "path": "./app/contexts/NftProvider.tsx",
            "isBinary": false,
            "content": [
              "import { createContext, useContext, useEffect, useState } from 'react';",
              "import { PublicKey } from '@solana/web3.js';",
              "import { useWallet } from '@solana/wallet-adapter-react';",
              "import { CONNECTION } from '@/utils/anchor';",
              "const NftContext = createContext<{",
              "nftState: any | null;",
              "}>({",
              "nftState: null,",
              "});",
              "export const useNftState = () => useContext(NftContext);",
              "export const NftProvider = ({ children }: { children: React.ReactNode }) => {",
              "const { publicKey } = useWallet();",
              "const [nftState, setNftState] = useState<any | null>(null);",
              "useEffect(() => {",
              "setNftState(null);",
              "if (!publicKey) {",
              "return;",
              "}",
              "getAssetsByOwner(publicKey);",
              "}, [publicKey]);",
              "async function getAssetsByOwner(ownerAddress: PublicKey) {",
              "const sortBy = {",
              "sortBy: 'created',",
              "sortDirection: 'asc',",
              "};",
              "const limit = 1000;",
              "const page = 1;",
              "const before = '';",
              "const after = '';",
              "const allAssetsOwned = await CONNECTION.getAssetsByOwner(",
              "ownerAddress.toBase58(),",
              "sortBy,",
              "limit,",
              "page,",
              "before,",
              "after",
              ");",
              "setNftState(allAssetsOwned);",
              "console.log(allAssetsOwned);",
              "}",
              "return (",
              "<NftContext.Provider",
              "value={{",
              "nftState: nftState,",
              "}}",
              ">",
              "{children}",
              "</NftContext.Provider>",
              ");",
              "};"
            ]
          },
          "SessionProvider.tsx": {
            "path": "./app/contexts/SessionProvider.tsx",
            "isBinary": false,
            "content": [
              "import {",
              "SessionWalletProvider,",
              "useSessionKeyManager,",
              "} from '@magicblock-labs/gum-react-sdk';",
              "import {",
              "AnchorWallet,",
              "useAnchorWallet,",
              "useConnection,",
              "} from '@solana/wallet-adapter-react';",
              "interface SessionProviderProps {",
              "children: React.ReactNode;",
              "}",
              "const SessionProvider: React.FC<SessionProviderProps> = ({ children }) => {",
              "const { connection } = useConnection();",
              "const anchorWallet = useAnchorWallet() as AnchorWallet;",
              "const cluster = 'devnet'; // or \\"mainnet-beta\\", \\"testnet\\", \\"localnet\\"",
              "const sessionWallet = useSessionKeyManager(anchorWallet, connection, cluster);",
              "return (",
              "<SessionWalletProvider sessionWallet={sessionWallet}>",
              "{children}",
              "</SessionWalletProvider>",
              ");",
              "};",
              "export default SessionProvider;"
            ]
          },
          "WalletContextProvider.tsx": {
            "path": "./app/contexts/WalletContextProvider.tsx",
            "isBinary": false,
            "content": [
              "import { FC, ReactNode, useMemo } from 'react';",
              "import { WalletAdapterNetwork } from '@solana/wallet-adapter-base';",
              "import {",
              "ConnectionProvider,",
              "WalletProvider,",
              "} from '@solana/wallet-adapter-react';",
              "import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';",
              "import {",
              "PhantomWalletAdapter,",
              "SolflareWalletAdapter,",
              "} from '@solana/wallet-adapter-wallets';",
              "import { clusterApiUrl } from '@solana/web3.js';",
              "require('@solana/wallet-adapter-react-ui/styles.css');",
              "const WalletContextProvider: FC<{ children: ReactNode }> = ({ children }) => {",
              "const network = WalletAdapterNetwork.Devnet;",
              "const endpoint = useMemo(() => clusterApiUrl(network), [network]);",
              "const wallets = useMemo(",
              "() => [new PhantomWalletAdapter(), new SolflareWalletAdapter()],",
              "[network]",
              ");",
              "return (",
              "<ConnectionProvider endpoint={endpoint}>",
              "<WalletProvider wallets={wallets} autoConnect>",
              "<WalletModalProvider>{children}</WalletModalProvider>",
              "</WalletProvider>",
              "</ConnectionProvider>",
              ");",
              "};",
              "export default WalletContextProvider;"
            ]
          }
        }
      },
      "idl": {
        "path": "./app/idl",
        "children": {
          "lumberjack.ts": {
            "path": "./app/idl/lumberjack.ts",
            "isBinary": false,
            "content": [
              "export type Lumberjack = {",
              "version: '0.1.0';",
              "name: 'lumberjack';",
              "instructions: [",
              "{",
              "name: 'initPlayer';",
              "accounts: [",
              "{",
              "name: 'player';",
              "isMut: true;",
              "isSigner: false;",
              "},",
              "{",
              "name: 'gameData';",
              "isMut: true;",
              "isSigner: false;",
              "},",
              "{",
              "name: 'signer';",
              "isMut: true;",
              "isSigner: true;",
              "},",
              "{",
              "name: 'systemProgram';",
              "isMut: false;",
              "isSigner: false;",
              "}",
              "];",
              "args: [",
              "{",
              "name: 'levelSeed';",
              "type: 'string';",
              "}",
              "];",
              "},",
              "{",
              "name: 'chopTree';",
              "accounts: [",
              "{",
              "name: 'sessionToken';",
              "isMut: false;",
              "isSigner: false;",
              "isOptional: true;",
              "},",
              "{",
              "name: 'player';",
              "isMut: true;",
              "isSigner: false;",
              "},",
              "{",
              "name: 'gameData';",
              "isMut: true;",
              "isSigner: false;",
              "},",
              "{",
              "name: 'signer';",
              "isMut: true;",
              "isSigner: true;",
              "},",
              "{",
              "name: 'systemProgram';",
              "isMut: false;",
              "isSigner: false;",
              "}",
              "];",
              "args: [",
              "{",
              "name: 'levelSeed';",
              "type: 'string';",
              "},",
              "{",
              "name: 'counter';",
              "type: 'u16';",
              "}",
              "];",
              "}",
              "];",
              "accounts: [",
              "{",
              "name: 'gameData';",
              "type: {",
              "kind: 'struct';",
              "fields: [",
              "{",
              "name: 'totalWoodCollected';",
              "type: 'u64';",
              "}",
              "];",
              "};",
              "},",
              "{",
              "name: 'playerData';",
              "type: {",
              "kind: 'struct';",
              "fields: [",
              "{",
              "name: 'authority';",
              "type: 'publicKey';",
              "},",
              "{",
              "name: 'name';",
              "type: 'string';",
              "},",
              "{",
              "name: 'level';",
              "type: 'u8';",
              "},",
              "{",
              "name: 'xp';",
              "type: 'u64';",
              "},",
              "{",
              "name: 'wood';",
              "type: 'u64';",
              "},",
              "{",
              "name: 'energy';",
              "type: 'u64';",
              "},",
              "{",
              "name: 'lastLogin';",
              "type: 'i64';",
              "},",
              "{",
              "name: 'lastId';",
              "type: 'u16';",
              "}",
              "];",
              "};",
              "}",
              "];",
              "errors: [",
              "{",
              "code: 6000;",
              "name: 'NotEnoughEnergy';",
              "msg: 'Not enough energy';",
              "},",
              "{",
              "code: 6001;",
              "name: 'WrongAuthority';",
              "msg: 'Wrong Authority';",
              "}",
              "];",
              "};",
              "export const IDL: Lumberjack = {",
              "version: '0.1.0',",
              "name: 'lumberjack',",
              "instructions: [",
              "{",
              "name: 'initPlayer',",
              "accounts: [",
              "{",
              "name: 'player',",
              "isMut: true,",
              "isSigner: false,",
              "},",
              "{",
              "name: 'gameData',",
              "isMut: true,",
              "isSigner: false,",
              "},",
              "{",
              "name: 'signer',",
              "isMut: true,",
              "isSigner: true,",
              "},",
              "{",
              "name: 'systemProgram',",
              "isMut: false,",
              "isSigner: false,",
              "},",
              "],",
              "args: [",
              "{",
              "name: 'levelSeed',",
              "type: 'string',",
              "},",
              "],",
              "},",
              "{",
              "name: 'chopTree',",
              "accounts: [",
              "{",
              "name: 'sessionToken',",
              "isMut: false,",
              "isSigner: false,",
              "isOptional: true,",
              "},",
              "{",
              "name: 'player',",
              "isMut: true,",
              "isSigner: false,",
              "},",
              "{",
              "name: 'gameData',",
              "isMut: true,",
              "isSigner: false,",
              "},",
              "{",
              "name: 'signer',",
              "isMut: true,",
              "isSigner: true,",
              "},",
              "{",
              "name: 'systemProgram',",
              "isMut: false,",
              "isSigner: false,",
              "},",
              "],",
              "args: [",
              "{",
              "name: 'levelSeed',",
              "type: 'string',",
              "},",
              "{",
              "name: 'counter',",
              "type: 'u16',",
              "},",
              "],",
              "},",
              "],",
              "accounts: [",
              "{",
              "name: 'gameData',",
              "type: {",
              "kind: 'struct',",
              "fields: [",
              "{",
              "name: 'totalWoodCollected',",
              "type: 'u64',",
              "},",
              "],",
              "},",
              "},",
              "{",
              "name: 'playerData',",
              "type: {",
              "kind: 'struct',",
              "fields: [",
              "{",
              "name: 'authority',",
              "type: 'publicKey',",
              "},",
              "{",
              "name: 'name',",
              "type: 'string',",
              "},",
              "{",
              "name: 'level',",
              "type: 'u8',",
              "},",
              "{",
              "name: 'xp',",
              "type: 'u64',",
              "},",
              "{",
              "name: 'wood',",
              "type: 'u64',",
              "},",
              "{",
              "name: 'energy',",
              "type: 'u64',",
              "},",
              "{",
              "name: 'lastLogin',",
              "type: 'i64',",
              "},",
              "{",
              "name: 'lastId',",
              "type: 'u16',",
              "},",
              "],",
              "},",
              "},",
              "],",
              "errors: [",
              "{",
              "code: 6000,",
              "name: 'NotEnoughEnergy',",
              "msg: 'Not enough energy',",
              "},",
              "{",
              "code: 6001,",
              "name: 'WrongAuthority',",
              "msg: 'Wrong Authority',",
              "},",
              "],",
              "};"
            ]
          }
        }
      },
      "next-env.d.ts": {
        "path": "./app/next-env.d.ts",
        "isBinary": false,
        "content": [
          "/// <reference types=\\"next\\" />",
          "/// <reference types=\\"next/image-types/global\\" />",
          "// NOTE: This file should not be edited",
          "// see https://nextjs.org/docs/basic-features/typescript for more information."
        ]
      },
      "next.config.js": {
        "path": "./app/next.config.js",
        "isBinary": false,
        "content": [
          "// Notice that currently nft images from all domains can be fetched.",
          "// This is not recommended for production use since there could be some security issues.",
          "/** @type {import('next').NextConfig} */",
          "const nextConfig = {",
          "images: {",
          "remotePatterns: [",
          "{",
          "protocol: 'https',",
          "hostname: '**',",
          "},",
          "],",
          "},",
          "};",
          "module.exports = nextConfig;"
        ]
      },
      "package.json": {
        "path": "./app/package.json",
        "isBinary": false,
        "content": [
          "{",
          "\\"name\\": \\"wallet-adapter-chakraui-nextjs\\",",
          "\\"version\\": \\"0.1.0\\",",
          "\\"private\\": true,",
          "\\"scripts\\": {",
          "\\"dev\\": \\"next dev\\",",
          "\\"build\\": \\"next build\\",",
          "\\"start\\": \\"next start\\",",
          "\\"lint\\": \\"next lint\\"",
          "},",
          "\\"dependencies\\": {",
          "\\"@chakra-ui/next-js\\": \\"^2.1.3\\",",
          "\\"@chakra-ui/react\\": \\"^2.6.1\\",",
          "\\"@coral-xyz/anchor\\": \\"^0.29.0\\",",
          "\\"@emotion/react\\": \\"^11.11.0\\",",
          "\\"@emotion/styled\\": \\"^11.11.0\\",",
          "\\"@magicblock-labs/gum-react-sdk\\": \\"^3.0.4\\",",
          "\\"@magicblock-labs/gum-sdk\\": \\"^3.0.5\\",",
          "\\"@solana/wallet-adapter-base\\": \\"^0.9.22\\",",
          "\\"@solana/wallet-adapter-react\\": \\"^0.15.32\\",",
          "\\"@solana/wallet-adapter-react-ui\\": \\"^0.9.31\\",",
          "\\"@solana/wallet-adapter-wallets\\": \\"^0.19.16\\",",
          "\\"@solana/web3.js\\": \\"^1.77.1\\",",
          "\\"@types/node\\": \\"20.2.5\\",",
          "\\"@types/react\\": \\"18.2.7\\",",
          "\\"@types/react-dom\\": \\"18.2.4\\",",
          "\\"eslint\\": \\"8.41.0\\",",
          "\\"eslint-config-next\\": \\"13.4.4\\",",
          "\\"framer-motion\\": \\"^10.12.16\\",",
          "\\"next\\": \\"13.4.4\\",",
          "\\"react\\": \\"18.2.0\\",",
          "\\"react-dom\\": \\"18.2.0\\",",
          "\\"typescript\\": \\"5.0.4\\",",
          "\\"browserify-sign\\": \\">=4.2.2\\",",
          "\\"crypto-js\\": \\">=4.2.0\\"",
          "}",
          "}"
        ]
      },
      "pages": {
        "path": "./app/pages",
        "children": {
          "_app.tsx": {
            "path": "./app/pages/_app.tsx",
            "isBinary": false,
            "content": [
              "import { ChakraProvider } from '@chakra-ui/react';",
              "import WalletContextProvider from '../contexts/WalletContextProvider';",
              "import SessionProvider from '@/contexts/SessionProvider';",
              "import { GameStateProvider } from '@/contexts/GameStateProvider';",
              "import type { AppProps } from 'next/app';",
              "import { NftProvider } from '@/contexts/NftProvider';",
              "export default function App({ Component, pageProps }: AppProps) {",
              "return (",
              "<ChakraProvider>",
              "<WalletContextProvider>",
              "<SessionProvider>",
              "<GameStateProvider>",
              "<NftProvider>",
              "<Component {...pageProps} />",
              "</NftProvider>",
              "</GameStateProvider>",
              "</SessionProvider>",
              "</WalletContextProvider>",
              "</ChakraProvider>",
              ");",
              "}"
            ]
          },
          "_document.tsx": {
            "path": "./app/pages/_document.tsx",
            "isBinary": false,
            "content": [
              "import { Html, Head, Main, NextScript } from 'next/document';",
              "export default function Document() {",
              "return (",
              "<Html lang=\\"en\\">",
              "<Head />",
              "<body>",
              "<Main />",
              "<NextScript />",
              "</body>",
              "</Html>",
              ");",
              "}"
            ]
          },
          "api": {
            "path": "./app/pages/api",
            "children": {
              "hello.ts": {
                "path": "./app/pages/api/hello.ts",
                "isBinary": false,
                "content": [
                  "// Next.js API route support: https://nextjs.org/docs/api-routes/introduction",
                  "import type { NextApiRequest, NextApiResponse } from 'next';",
                  "type Data = {",
                  "name: string;",
                  "};",
                  "export default function handler(",
                  "req: NextApiRequest,",
                  "res: NextApiResponse<Data>",
                  ") {",
                  "res.status(200).json({ name: 'John Doe' });",
                  "}"
                ]
              }
            }
          },
          "index.tsx": {
            "path": "./app/pages/index.tsx",
            "isBinary": false,
            "content": [
              "import { Box, Flex, Heading, Spacer, VStack, Text } from '@chakra-ui/react';",
              "import { useWallet } from '@solana/wallet-adapter-react';",
              "import WalletMultiButton from '@/components/WalletMultiButton';",
              "import DisplayGameState from '@/components/DisplayGameState';",
              "import InitPlayerButton from '@/components/InitPlayerButton';",
              "import SessionKeyButton from '@/components/SessionKeyButton';",
              "import ChopTreeButton from '@/components/ChopTreeButton';",
              "import RequestAirdrop from '@/components/RequestAirdrop';",
              "import DisplayNfts from '@/components/DisplayNfts';",
              "export default function Home() {",
              "const { publicKey } = useWallet();",
              "return (",
              "<Box>",
              "<Flex px={4} py={4}>",
              "<Spacer />",
              "<WalletMultiButton />",
              "</Flex>",
              "<VStack>",
              "<Heading>Lumberjack</Heading>",
              "{!publicKey && <Text>Connect to devnet wallet!</Text>}",
              "<DisplayGameState />",
              "<InitPlayerButton />",
              "<SessionKeyButton />",
              "<ChopTreeButton />",
              "<RequestAirdrop />",
              "<DisplayNfts />",
              "</VStack>",
              "</Box>",
              ");",
              "}"
            ]
          }
        }
      },
      "public": {
        "path": "./app/public",
        "children": {
          "Beaver.png": {
            "path": "./app/public/Beaver.png",
            "isBinary": true,
            "content": null
          },
          "Tree.png": {
            "path": "./app/public/Tree.png",
            "isBinary": true,
            "content": null
          },
          "Wood.png": {
            "path": "./app/public/Wood.png",
            "isBinary": true,
            "content": null
          },
          "energy.png": {
            "path": "./app/public/energy.png",
            "isBinary": true,
            "content": null
          },
          "favicon.ico": {
            "path": "./app/public/favicon.ico",
            "isBinary": true,
            "content": null
          },
          "next.svg": {
            "path": "./app/public/next.svg",
            "isBinary": true,
            "content": null
          },
          "vercel.svg": {
            "path": "./app/public/vercel.svg",
            "isBinary": true,
            "content": null
          }
        }
      },
      "styles": {
        "path": "./app/styles",
        "children": {
          "Home.module.css": {
            "path": "./app/styles/Home.module.css",
            "isBinary": false,
            "content": [
              ".main {",
              "display: flex;",
              "flex-direction: column;",
              "justify-content: space-between;",
              "align-items: center;",
              "padding: 6rem;",
              "min-height: 100vh;",
              "}",
              ".description {",
              "display: inherit;",
              "justify-content: inherit;",
              "align-items: inherit;",
              "font-size: 0.85rem;",
              "max-width: var(--max-width);",
              "width: 100%;",
              "z-index: 2;",
              "font-family: var(--font-mono);",
              "}",
              ".description a {",
              "display: flex;",
              "justify-content: center;",
              "align-items: center;",
              "gap: 0.5rem;",
              "}",
              ".description p {",
              "position: relative;",
              "margin: 0;",
              "padding: 1rem;",
              "background-color: rgba(var(--callout-rgb), 0.5);",
              "border: 1px solid rgba(var(--callout-border-rgb), 0.3);",
              "border-radius: var(--border-radius);",
              "}",
              ".code {",
              "font-weight: 700;",
              "font-family: var(--font-mono);",
              "}",
              ".grid {",
              "display: grid;",
              "grid-template-columns: repeat(4, minmax(25%, auto));",
              "width: var(--max-width);",
              "max-width: 100%;",
              "}",
              ".card {",
              "padding: 1rem 1.2rem;",
              "border-radius: var(--border-radius);",
              "background: rgba(var(--card-rgb), 0);",
              "border: 1px solid rgba(var(--card-border-rgb), 0);",
              "transition: background 200ms, border 200ms;",
              "}",
              ".card span {",
              "display: inline-block;",
              "transition: transform 200ms;",
              "}",
              ".card h2 {",
              "font-weight: 600;",
              "margin-bottom: 0.7rem;",
              "}",
              ".card p {",
              "margin: 0;",
              "opacity: 0.6;",
              "font-size: 0.9rem;",
              "line-height: 1.5;",
              "max-width: 30ch;",
              "}",
              ".center {",
              "display: flex;",
              "justify-content: center;",
              "align-items: center;",
              "position: relative;",
              "padding: 4rem 0;",
              "}",
              ".center::before {",
              "background: var(--secondary-glow);",
              "border-radius: 50%;",
              "width: 480px;",
              "height: 360px;",
              "margin-left: -400px;",
              "}",
              ".center::after {",
              "background: var(--primary-glow);",
              "width: 240px;",
              "height: 180px;",
              "z-index: -1;",
              "}",
              ".center::before,",
              ".center::after {",
              "content: '';",
              "left: 50%;",
              "position: absolute;",
              "filter: blur(45px);",
              "transform: translateZ(0);",
              "}",
              ".logo {",
              "position: relative;",
              "}",
              "/* Enable hover only on non-touch devices */",
              "@media (hover: hover) and (pointer: fine) {",
              ".card:hover {",
              "background: rgba(var(--card-rgb), 0.1);",
              "border: 1px solid rgba(var(--card-border-rgb), 0.15);",
              "}",
              ".card:hover span {",
              "transform: translateX(4px);",
              "}",
              "}",
              "@media (prefers-reduced-motion) {",
              ".card:hover span {",
              "transform: none;",
              "}",
              "}",
              "/* Mobile */",
              "@media (max-width: 700px) {",
              ".content {",
              "padding: 4rem;",
              "}",
              ".grid {",
              "grid-template-columns: 1fr;",
              "margin-bottom: 120px;",
              "max-width: 320px;",
              "text-align: center;",
              "}",
              ".card {",
              "padding: 1rem 2.5rem;",
              "}",
              ".card h2 {",
              "margin-bottom: 0.5rem;",
              "}",
              ".center {",
              "padding: 8rem 0 6rem;",
              "}",
              ".center::before {",
              "transform: none;",
              "height: 300px;",
              "}",
              ".description {",
              "font-size: 0.8rem;",
              "}",
              ".description a {",
              "padding: 1rem;",
              "}",
              ".description p,",
              ".description div {",
              "display: flex;",
              "justify-content: center;",
              "position: fixed;",
              "width: 100%;",
              "}",
              ".description p {",
              "align-items: center;",
              "inset: 0 0 auto;",
              "padding: 2rem 1rem 1.4rem;",
              "border-radius: 0;",
              "border: none;",
              "border-bottom: 1px solid rgba(var(--callout-border-rgb), 0.25);",
              "background: linear-gradient(",
              "to bottom,",
              "rgba(var(--background-start-rgb), 1),",
              "rgba(var(--callout-rgb), 0.5)",
              ");",
              "background-clip: padding-box;",
              "backdrop-filter: blur(24px);",
              "}",
              ".description div {",
              "align-items: flex-end;",
              "pointer-events: none;",
              "inset: auto 0 0;",
              "padding: 2rem;",
              "height: 200px;",
              "background: linear-gradient(",
              "to bottom,",
              "transparent 0%,",
              "rgb(var(--background-end-rgb)) 40%",
              ");",
              "z-index: 1;",
              "}",
              "}",
              "/* Tablet and Smaller Desktop */",
              "@media (min-width: 701px) and (max-width: 1120px) {",
              ".grid {",
              "grid-template-columns: repeat(2, 50%);",
              "}",
              "}",
              "@media (prefers-color-scheme: dark) {",
              ".vercelLogo {",
              "filter: invert(1);",
              "}",
              ".logo {",
              "filter: invert(1) drop-shadow(0 0 0.3rem #ffffff70);",
              "}",
              "}",
              "@keyframes rotate {",
              "from {",
              "transform: rotate(360deg);",
              "}",
              "to {",
              "transform: rotate(0deg);",
              "}",
              "}"
            ]
          },
          "globals.css": {
            "path": "./app/styles/globals.css",
            "isBinary": false,
            "content": [
              ":root {",
              "--max-width: 1100px;",
              "--border-radius: 12px;",
              "--font-mono: ui-monospace, Menlo, Monaco, 'Cascadia Mono', 'Segoe UI Mono',",
              "'Roboto Mono', 'Oxygen Mono', 'Ubuntu Monospace', 'Source Code Pro',",
              "'Fira Mono', 'Droid Sans Mono', 'Courier New', monospace;",
              "--foreground-rgb: 0, 0, 0;",
              "--background-start-rgb: 214, 219, 220;",
              "--background-end-rgb: 255, 255, 255;",
              "--primary-glow: conic-gradient(",
              "from 180deg at 50% 50%,",
              "#16abff33 0deg,",
              "#0885ff33 55deg,",
              "#54d6ff33 120deg,",
              "#0071ff33 160deg,",
              "transparent 360deg",
              ");",
              "--secondary-glow: radial-gradient(",
              "rgba(255, 255, 255, 1),",
              "rgba(255, 255, 255, 0)",
              ");",
              "--tile-start-rgb: 239, 245, 249;",
              "--tile-end-rgb: 228, 232, 233;",
              "--tile-border: conic-gradient(",
              "#00000080,",
              "#00000040,",
              "#00000030,",
              "#00000020,",
              "#00000010,",
              "#00000010,",
              "#00000080",
              ");",
              "--callout-rgb: 238, 240, 241;",
              "--callout-border-rgb: 172, 175, 176;",
              "--card-rgb: 180, 185, 188;",
              "--card-border-rgb: 131, 134, 135;",
              "}",
              "@media (prefers-color-scheme: dark) {",
              ":root {",
              "--foreground-rgb: 255, 255, 255;",
              "--background-start-rgb: 0, 0, 0;",
              "--background-end-rgb: 0, 0, 0;",
              "--primary-glow: radial-gradient(rgba(1, 65, 255, 0.4), rgba(1, 65, 255, 0));",
              "--secondary-glow: linear-gradient(",
              "to bottom right,",
              "rgba(1, 65, 255, 0),",
              "rgba(1, 65, 255, 0),",
              "rgba(1, 65, 255, 0.3)",
              ");",
              "--tile-start-rgb: 2, 13, 46;",
              "--tile-end-rgb: 2, 5, 19;",
              "--tile-border: conic-gradient(",
              "#ffffff80,",
              "#ffffff40,",
              "#ffffff30,",
              "#ffffff20,",
              "#ffffff10,",
              "#ffffff10,",
              "#ffffff80",
              ");",
              "--callout-rgb: 20, 20, 20;",
              "--callout-border-rgb: 108, 108, 108;",
              "--card-rgb: 100, 100, 100;",
              "--card-border-rgb: 200, 200, 200;",
              "}",
              "}",
              "* {",
              "box-sizing: border-box;",
              "padding: 0;",
              "margin: 0;",
              "}",
              "html,",
              "body {",
              "max-width: 100vw;",
              "overflow-x: hidden;",
              "}",
              "body {",
              "color: rgb(var(--foreground-rgb));",
              "background: linear-gradient(",
              "to bottom,",
              "transparent,",
              "rgb(var(--background-end-rgb))",
              ")",
              "rgb(var(--background-start-rgb));",
              "}",
              "a {",
              "color: inherit;",
              "text-decoration: none;",
              "}",
              "@media (prefers-color-scheme: dark) {",
              "html {",
              "color-scheme: dark;",
              "}",
              "}"
            ]
          }
        }
      },
      "tsconfig.json": {
        "path": "./app/tsconfig.json",
        "isBinary": false,
        "content": [
          "{",
          "\\"compilerOptions\\": {",
          "\\"target\\": \\"es5\\",",
          "\\"lib\\": [\\"dom\\", \\"dom.iterable\\", \\"esnext\\"],",
          "\\"allowJs\\": true,",
          "\\"skipLibCheck\\": true,",
          "\\"strict\\": true,",
          "\\"forceConsistentCasingInFileNames\\": true,",
          "\\"noEmit\\": true,",
          "\\"esModuleInterop\\": true,",
          "\\"module\\": \\"esnext\\",",
          "\\"moduleResolution\\": \\"node\\",",
          "\\"resolveJsonModule\\": true,",
          "\\"isolatedModules\\": true,",
          "\\"jsx\\": \\"preserve\\",",
          "\\"incremental\\": true,",
          "\\"paths\\": {",
          "\\"@/*\\": [\\"./*\\"]",
          "}",
          "},",
          "\\"include\\": [\\"next-env.d.ts\\", \\"**/*.ts\\", \\"**/*.tsx\\"],",
          "\\"exclude\\": [\\"node_modules\\"]",
          "}"
        ]
      },
      "utils": {
        "path": "./app/utils",
        "children": {
          "anchor.ts": {
            "path": "./app/utils/anchor.ts",
            "isBinary": false,
            "content": [
              "import { Program, IdlAccounts, BN } from '@coral-xyz/anchor';",
              "import { Lumberjack, IDL } from '../idl/lumberjack';",
              "import { clusterApiUrl, Connection, PublicKey } from '@solana/web3.js';",
              "import { WrappedConnection } from './wrappedConnection';",
              "export const CONNECTION = new WrappedConnection(",
              "process.env.NEXT_PUBLIC_RPC",
              "? process.env.NEXT_PUBLIC_RPC",
              ": 'https://rpc.magicblock.app/devnet',",
              "{",
              "wsEndpoint: process.env.NEXT_PUBLIC_WSS_RPC",
              "? process.env.NEXT_PUBLIC_WSS_RPC",
              ": 'wss://rpc.magicblock.app/devnet',",
              "commitment: 'confirmed',",
              "}",
              ");",
              "export const METAPLEX_READAPI =",
              "'https://devnet.helius-rpc.com/?api-key=78065db3-87fb-431c-8d43-fcd190212125';",
              "// Here you can basically use what ever seed you want. For example one per level or city or whatever.",
              "export const GAME_DATA_SEED = 'level_2';",
              "// Lumberjack game program ID",
              "const programId = new PublicKey('MkabCfyUD6rBTaYHpgKBBpBo5qzWA2pK2hrGGKMurJt');",
              "// Create the program interface using the idl, program ID, and provider",
              "export const program = new Program<Lumberjack>(IDL, programId, {",
              "connection: CONNECTION,",
              "});",
              "export const [gameDataPDA] = PublicKey.findProgramAddressSync(",
              "[Buffer.from(GAME_DATA_SEED, 'utf8')],",
              "program.programId",
              ");",
              "// Player Data Account Type from Idl",
              "export type PlayerData = IdlAccounts<Lumberjack>['playerData'];",
              "export type GameData = IdlAccounts<Lumberjack>['gameData'];",
              "// Constants for the game",
              "export const TIME_TO_REFILL_ENERGY: BN = new BN(60);",
              "export const MAX_ENERGY = 100;",
              "export const ENERGY_PER_TICK: BN = new BN(1);",
              "export const TOTAL_WOOD_AVAILABLE: BN = new BN(100000);"
            ]
          },
          "wrappedConnection.ts": {
            "path": "./app/utils/wrappedConnection.ts",
            "isBinary": false,
            "content": [
              "import { Connection } from '@solana/web3.js';",
              "import axios from 'axios';",
              "import { METAPLEX_READAPI } from './anchor';",
              "export class WrappedConnection extends Connection {",
              "async getAsset(assetId: any): Promise<any> {",
              "try {",
              "const response = await axios.post(",
              "process.env.NEXT_PUBLIC_RPC",
              "? process.env.NEXT_PUBLIC_RPC",
              ": METAPLEX_READAPI,",
              "{",
              "jsonrpc: '2.0',",
              "method: 'getAsset',",
              "id: 'compression-example',",
              "params: [assetId],",
              "}",
              ");",
              "return response.data.result;",
              "} catch (error) {",
              "console.error(error);",
              "}",
              "}",
              "async getAssetProof(assetId: any): Promise<any> {",
              "try {",
              "const response = await axios.post(",
              "process.env.NEXT_PUBLIC_RPC",
              "? process.env.NEXT_PUBLIC_RPC",
              ": METAPLEX_READAPI,",
              "{",
              "jsonrpc: '2.0',",
              "method: 'getAssetProof',",
              "id: 'compression-example',",
              "params: [assetId],",
              "}",
              ");",
              "return response.data.result;",
              "} catch (error) {",
              "console.error(error);",
              "}",
              "}",
              "async getAssetsByOwner(",
              "assetId: string,",
              "sortBy: any,",
              "limit: number,",
              "page: number,",
              "before: string,",
              "after: string",
              "): Promise<any> {",
              "try {",
              "const response = await axios.post(",
              "process.env.NEXT_PUBLIC_RPC",
              "? process.env.NEXT_PUBLIC_RPC",
              ": METAPLEX_READAPI,",
              "{",
              "jsonrpc: '2.0',",
              "method: 'getAssetsByOwner',",
              "id: 'rpd-op-123',",
              "params: [assetId, sortBy, limit, page, before, after],",
              "}",
              ");",
              "//console.log(\\"getAssetsByOwner: \\" + JSON.stringify(response.data));",
              "return response.data.result;",
              "} catch (error) {",
              "console.error(error);",
              "}",
              "}",
              "async getAssetsByCreator(",
              "assetId: string,",
              "sortBy: any,",
              "limit: number,",
              "page: number,",
              "before: string,",
              "after: string",
              "): Promise<any> {",
              "try {",
              "const response = await axios.post(",
              "process.env.NEXT_PUBLIC_RPC",
              "? process.env.NEXT_PUBLIC_RPC",
              ": METAPLEX_READAPI,",
              "{",
              "jsonrpc: '2.0',",
              "method: 'getAssetsByCreator',",
              "id: 'compression-example',",
              "params: [assetId, true, sortBy, limit, page, null, null],",
              "}",
              ");",
              "return response.data.result;",
              "} catch (error) {",
              "console.error(error);",
              "}",
              "}",
              "async getAssetsByAuthority(",
              "assetId: string,",
              "sortBy: any,",
              "limit: number,",
              "page: number,",
              "before: string,",
              "after: string",
              "): Promise<any> {",
              "try {",
              "const response = await axios.post(",
              "process.env.NEXT_PUBLIC_RPC",
              "? process.env.NEXT_PUBLIC_RPC",
              ": METAPLEX_READAPI,",
              "{",
              "jsonrpc: '2.0',",
              "method: 'getAssetsByAuthority',",
              "id: 'compression-example',",
              "params: [assetId, sortBy, limit, page, before, after],",
              "}",
              ");",
              "return response.data.result;",
              "} catch (error) {",
              "console.error(error);",
              "}",
              "}",
              "async getAssetsByGroup(",
              "groupKey: string,",
              "groupValue: string,",
              "sortBy: any,",
              "limit: number,",
              "page: number,",
              "before: string,",
              "after: string",
              "): Promise<any> {",
              "try {",
              "let events = [];",
              "const response = await axios.post(",
              "process.env.NEXT_PUBLIC_RPC",
              "? process.env.NEXT_PUBLIC_RPC",
              ": METAPLEX_READAPI,",
              "{",
              "jsonrpc: '2.0',",
              "method: 'getAssetsByGroup',",
              "id: 'rpd-op-123',",
              "params: [groupKey, groupValue, sortBy, limit, page, before, after],",
              "}",
              ");",
              "events.push(...response.data.result.items);",
              "return events;",
              "} catch (error) {",
              "console.error(error);",
              "}",
              "}",
              "// This will loop through all pages and return all assets",
              "async getAllAssetsByGroup(",
              "groupKey: string,",
              "groupValue: string,",
              "sortBy: any,",
              "limit: number,",
              "page: number,",
              "before: string,",
              "after: string",
              "): Promise<any> {",
              "try {",
              "let events = [];",
              "let response = await axios.post(",
              "process.env.NEXT_PUBLIC_RPC",
              "? process.env.NEXT_PUBLIC_RPC",
              ": METAPLEX_READAPI,",
              "{",
              "jsonrpc: '2.0',",
              "method: 'getAssetsByGroup',",
              "id: 'rpd-op-123',",
              "params: [groupKey, groupValue, sortBy, limit, page, before, after],",
              "}",
              ");",
              "events.push(...response.data.result.items);",
              "while (true) {",
              "console.log('Requested page' + page);",
              "page += 1;",
              "response = await axios.post(",
              "process.env.NEXT_PUBLIC_RPC",
              "? process.env.NEXT_PUBLIC_RPC",
              ": METAPLEX_READAPI,",
              "{",
              "jsonrpc: '2.0',",
              "method: 'getAssetsByGroup',",
              "id: 'rpd-op-123',",
              "params: [groupKey, groupValue, sortBy, limit, page, before, after],",
              "}",
              ");",
              "events.push(...response.data.result.items);",
              "if (",
              "events.length % 1000 != 0 ||",
              "response.data.result.items.length == 0",
              ") {",
              "break;",
              "}",
              "}",
              "return events;",
              "} catch (error) {",
              "console.error(error);",
              "}",
              "}",
              "}"
            ]
          }
        }
      },
      "yarn.lock": {
        "path": "./app/yarn.lock",
        "isBinary": true,
        "content": null
      }
    }
  },
  "nx.json": {
    "path": "./nx.json",
    "isBinary": false,
    "content": [
      "{",
      "\\"affected\\": { \\"defaultBase\\": \\"main\\" },",
      "\\"targetDefaults\\": {",
      "\\"build\\": { \\"cache\\": true },",
      "\\"lint\\": { \\"cache\\": true },",
      "\\"test\\": { \\"cache\\": true },",
      "\\"e2e\\": { \\"cache\\": true }",
      "}",
      "}"
    ]
  },
  "package.json": {
    "path": "./package.json",
    "isBinary": false,
    "content": [
      "{",
      "\\"name\\": \\"@proj/source\\",",
      "\\"dependencies\\": {},",
      "\\"devDependencies\\": {}",
      "}"
    ]
  },
  "program": {
    "path": "./program",
    "children": {
      ".DS_Store": {
        "path": "./program/.DS_Store",
        "isBinary": true,
        "content": null
      },
      ".gitignore": {
        "path": "./program/.gitignore",
        "isBinary": false,
        "content": [
          ".anchor",
          ".DS_Store",
          "target",
          "**/*.rs.bk",
          "node_modules",
          "test-ledger"
        ]
      },
      ".prettierignore": {
        "path": "./program/.prettierignore",
        "isBinary": false,
        "content": [
          ".anchor",
          ".DS_Store",
          "target",
          "node_modules",
          "dist",
          "build",
          "test-ledger"
        ]
      },
      "Anchor.toml": {
        "path": "./program/Anchor.toml",
        "isBinary": false,
        "content": [
          "[features]",
          "seeds = false",
          "[programs.localnet]",
          "lumberjack = \\"MkabCfyUD6rBTaYHpgKBBpBo5qzWA2pK2hrGGKMurJt\\"",
          "[registry]",
          "url = \\"https://anchor.projectserum.com\\"",
          "[provider]",
          "cluster = \\"devnet\\"",
          "wallet = \\"~/.config/solana/id.json\\"",
          "[scripts]",
          "test = \\"yarn run ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts\\""
        ]
      },
      "Cargo.lock": {
        "path": "./program/Cargo.lock",
        "isBinary": true,
        "content": null
      },
      "Cargo.toml": {
        "path": "./program/Cargo.toml",
        "isBinary": false,
        "content": [
          "[workspace]",
          "members = [",
          "\\"programs/*\\"",
          "]",
          "[profile.release]",
          "overflow-checks = true",
          "lto = \\"fat\\"",
          "codegen-units = 1",
          "[profile.release.build-override]",
          "opt-level = 3",
          "incremental = false",
          "codegen-units = 1"
        ]
      },
      "README.md": {
        "path": "./program/README.md",
        "isBinary": false,
        "content": [
          "# Anchor Solana Program",
          "\`\`\`shell",
          "anchor build",
          "anchor deploy",
          "\`\`\`",
          "Copy the **program ID** from the output logs; paste it in \`Anchor.toml\` & \`lib.rs\`.",
          "\`\`\`shell",
          "anchor build",
          "anchor deploy",
          "yarn install",
          "yarn add ts-mocha",
          "anchor run test",
          "\`\`\`"
        ]
      },
      "migrations": {
        "path": "./program/migrations",
        "children": {
          "deploy.ts": {
            "path": "./program/migrations/deploy.ts",
            "isBinary": false,
            "content": [
              "// Migrations are an early feature. Currently, they're nothing more than this",
              "// single deploy script that's invoked from the CLI, injecting a provider",
              "// configured from the workspace's Anchor.toml.",
              "const anchor = require('@project-serum/anchor');",
              "module.exports = async function (provider) {",
              "// Configure client to use the provider.",
              "anchor.setProvider(provider);",
              "// Add your deploy script here.",
              "};"
            ]
          }
        }
      },
      "package.json": {
        "path": "./program/package.json",
        "isBinary": false,
        "content": [
          "{",
          "\\"scripts\\": {",
          "\\"lint:fix\\": \\"prettier */*.js \\\\\\"*/**/*{.js,.ts}\\\\\\" -w\\",",
          "\\"lint\\": \\"prettier */*.js \\\\\\"*/**/*{.js,.ts}\\\\\\" --check\\"",
          "},",
          "\\"dependencies\\": {",
          "\\"@coral-xyz/anchor\\": \\"0.29.0\\"",
          "},",
          "\\"devDependencies\\": {",
          "\\"@types/bn.js\\": \\"^5.1.0\\",",
          "\\"@types/chai\\": \\"^4.3.0\\",",
          "\\"@types/mocha\\": \\"^9.0.0\\",",
          "\\"chai\\": \\"^4.3.4\\",",
          "\\"mocha\\": \\"^9.0.3\\",",
          "\\"prettier\\": \\"^2.6.2\\",",
          "\\"ts-mocha\\": \\"^10.0.0\\",",
          "\\"typescript\\": \\"^4.3.5\\",",
          "\\"browserify-sign\\": \\">=4.2.2\\",",
          "\\"crypto-js\\": \\">=4.2.0\\"",
          "}",
          "}"
        ]
      },
      "programs": {
        "path": "./program/programs",
        "children": {
          ".DS_Store": {
            "path": "./program/programs/.DS_Store",
            "isBinary": true,
            "content": null
          },
          "lumberjack": {
            "path": "./program/programs/lumberjack",
            "children": {
              ".DS_Store": {
                "path": "./program/programs/lumberjack/.DS_Store",
                "isBinary": true,
                "content": null
              },
              "Cargo.toml": {
                "path": "./program/programs/lumberjack/Cargo.toml",
                "isBinary": false,
                "content": [
                  "[package]",
                  "name = \\"lumberjack\\"",
                  "version = \\"0.1.0\\"",
                  "description = \\"Created with Anchor\\"",
                  "edition = \\"2021\\"",
                  "[lib]",
                  "crate-type = [\\"cdylib\\", \\"lib\\"]",
                  "name = \\"lumberjack\\"",
                  "[features]",
                  "no-entrypoint = []",
                  "no-idl = []",
                  "no-log-ix-name = []",
                  "cpi = [\\"no-entrypoint\\"]",
                  "default = []",
                  "[dependencies]",
                  "anchor-lang = { version = \\"0.29.0\\", features = [\\"init-if-needed\\"] }",
                  "anchor-spl = { version = \\"0.29.0\\" }",
                  "session-keys = { version = \\"2.0.3\\", features = [\\"no-entrypoint\\"] }",
                  "solana-program = \\"1.17.3\\""
                ]
              },
              "Xargo.toml": {
                "path": "./program/programs/lumberjack/Xargo.toml",
                "isBinary": false,
                "content": [
                  "[target.bpfel-unknown-unknown.dependencies.std]",
                  "features = []"
                ]
              },
              "src": {
                "path": "./program/programs/lumberjack/src",
                "children": {
                  ".DS_Store": {
                    "path": "./program/programs/lumberjack/src/.DS_Store",
                    "isBinary": true,
                    "content": null
                  },
                  "constants.rs": {
                    "path": "./program/programs/lumberjack/src/constants.rs",
                    "isBinary": false,
                    "content": [
                      "pub const TIME_TO_REFILL_ENERGY: i64 = 60;",
                      "pub const MAX_ENERGY: u64 = 100;",
                      "pub const MAX_WOOD_PER_TREE: u64 = 100000;"
                    ]
                  },
                  "errors.rs": {
                    "path": "./program/programs/lumberjack/src/errors.rs",
                    "isBinary": false,
                    "content": [
                      "use anchor_lang::error_code;",
                      "#[error_code]",
                      "pub enum GameErrorCode {",
                      "#[msg(\\"Not enough energy\\")]",
                      "NotEnoughEnergy,",
                      "#[msg(\\"Wrong Authority\\")]",
                      "WrongAuthority,",
                      "}"
                    ]
                  },
                  "instructions": {
                    "path": "./program/programs/lumberjack/src/instructions",
                    "children": {
                      "chop_tree.rs": {
                        "path": "./program/programs/lumberjack/src/instructions/chop_tree.rs",
                        "isBinary": false,
                        "content": [
                          "pub use crate::errors::GameErrorCode;",
                          "pub use crate::state::game_data::GameData;",
                          "use crate::state::player_data::PlayerData;",
                          "use anchor_lang::prelude::*;",
                          "use session_keys::{Session, SessionToken};",
                          "pub fn chop_tree(mut ctx: Context<ChopTree>, counter: u16, amount: u64) -> Result<()> {",
                          "let account: &mut &mut ChopTree<'_> = &mut ctx.accounts;",
                          "account.player.update_energy()?;",
                          "account.player.print()?;",
                          "if account.player.energy < amount {",
                          "return err!(GameErrorCode::NotEnoughEnergy);",
                          "}",
                          "account.player.last_id = counter;",
                          "account.player.chop_tree(amount)?;",
                          "account.game_data.on_tree_chopped(amount)?;",
                          "msg!(",
                          "\\"You chopped a tree and got 1 wood. You have {} wood and {} energy left.\\",",
                          "ctx.accounts.player.wood,",
                          "ctx.accounts.player.energy",
                          ");",
                          "Ok(())",
                          "}",
                          "#[derive(Accounts, Session)]",
                          "#[instruction(level_seed: String)]",
                          "pub struct ChopTree<'info> {",
                          "#[session(",
                          "// The ephemeral key pair signing the transaction",
                          "signer = signer,",
                          "// The authority of the user account which must have created the session",
                          "authority = player.authority.key()",
                          ")]",
                          "// Session Tokens are passed as optional accounts",
                          "pub session_token: Option<Account<'info, SessionToken>>,",
                          "// There is one PlayerData account",
                          "#[account(",
                          "mut,",
                          "seeds = [b\\"player\\".as_ref(), player.authority.key().as_ref()],",
                          "bump,",
                          ")]",
                          "pub player: Account<'info, PlayerData>,",
                          "// There can be multiple levels the seed for the level is passed in the instruction",
                          "// First player starting a new level will pay for the account in the current setup",
                          "#[account(",
                          "init_if_needed,",
                          "payer = signer,",
                          "space = 1000,",
                          "seeds = [level_seed.as_ref()],",
                          "bump,",
                          ")]",
                          "pub game_data: Account<'info, GameData>,",
                          "#[account(mut)]",
                          "pub signer: Signer<'info>,",
                          "pub system_program: Program<'info, System>,",
                          "}"
                        ]
                      },
                      "init_player.rs": {
                        "path": "./program/programs/lumberjack/src/instructions/init_player.rs",
                        "isBinary": false,
                        "content": [
                          "pub use crate::errors::GameErrorCode;",
                          "use crate::state::player_data::PlayerData;",
                          "use crate::{constants::MAX_ENERGY, GameData};",
                          "use anchor_lang::prelude::*;",
                          "pub fn init_player(ctx: Context<InitPlayer>) -> Result<()> {",
                          "ctx.accounts.player.energy = MAX_ENERGY;",
                          "ctx.accounts.player.last_login = Clock::get()?.unix_timestamp;",
                          "ctx.accounts.player.authority = ctx.accounts.signer.key();",
                          "Ok(())",
                          "}",
                          "#[derive(Accounts)]",
                          "#[instruction(level_seed: String)]",
                          "pub struct InitPlayer<'info> {",
                          "#[account(",
                          "init,",
                          "payer = signer,",
                          "space = 1000, // 8+32+x+1+8+8+8 But taking 1000 to have space to expand easily.",
                          "seeds = [b\\"player\\".as_ref(), signer.key().as_ref()],",
                          "bump,",
                          ")]",
                          "pub player: Account<'info, PlayerData>,",
                          "#[account(",
                          "init_if_needed,",
                          "payer = signer,",
                          "space = 1000, // 8 + 8 for anchor account discriminator and the u64. Using 1000 to have space to expand easily.",
                          "seeds = [level_seed.as_ref()],",
                          "bump,",
                          ")]",
                          "pub game_data: Account<'info, GameData>,",
                          "#[account(mut)]",
                          "pub signer: Signer<'info>,",
                          "pub system_program: Program<'info, System>,",
                          "}"
                        ]
                      },
                      "mod.rs": {
                        "path": "./program/programs/lumberjack/src/instructions/mod.rs",
                        "isBinary": false,
                        "content": [
                          "//! All instructions",
                          "pub mod chop_tree;",
                          "pub mod init_player;",
                          "pub use chop_tree::*;",
                          "pub use init_player::*;"
                        ]
                      }
                    }
                  },
                  "lib.rs": {
                    "path": "./program/programs/lumberjack/src/lib.rs",
                    "isBinary": false,
                    "content": [
                      "pub use crate::errors::GameErrorCode;",
                      "pub use anchor_lang::prelude::*;",
                      "pub use session_keys::{session_auth_or, Session, SessionError};",
                      "pub mod constants;",
                      "pub mod errors;",
                      "pub mod instructions;",
                      "pub mod state;",
                      "use instructions::*;",
                      "declare_id!(\\"MkabCfyUD6rBTaYHpgKBBpBo5qzWA2pK2hrGGKMurJt\\");",
                      "#[program]",
                      "pub mod lumberjack {",
                      "use super::*;",
                      "pub fn init_player(ctx: Context<InitPlayer>, _level_seed: String) -> Result<()> {",
                      "init_player::init_player(ctx)",
                      "}",
                      "// This function lets the player chop a tree and get 1 wood. The session_auth_or macro",
                      "// lets the player either use their session token or their main wallet. (The counter is only",
                      "// there so that the player can do multiple transactions in the same block. Without it multiple transactions",
                      "// in the same block would result in the same signature and therefore fail.)",
                      "#[session_auth_or(",
                      "ctx.accounts.player.authority.key() == ctx.accounts.signer.key(),",
                      "GameErrorCode::WrongAuthority",
                      ")]",
                      "pub fn chop_tree(ctx: Context<ChopTree>, _level_seed: String, counter: u16) -> Result<()> {",
                      "chop_tree::chop_tree(ctx, counter, 1)",
                      "}",
                      "}"
                    ]
                  },
                  "state": {
                    "path": "./program/programs/lumberjack/src/state",
                    "children": {
                      "game_data.rs": {
                        "path": "./program/programs/lumberjack/src/state/game_data.rs",
                        "isBinary": false,
                        "content": [
                          "use anchor_lang::prelude::*;",
                          "use crate::constants::MAX_WOOD_PER_TREE;",
                          "#[account]",
                          "pub struct GameData {",
                          "pub total_wood_collected: u64,",
                          "}",
                          "impl GameData {",
                          "pub fn on_tree_chopped(&mut self, amount_chopped: u64) -> Result<()> {",
                          "match self.total_wood_collected.checked_add(amount_chopped) {",
                          "Some(v) => {",
                          "if self.total_wood_collected >= MAX_WOOD_PER_TREE {",
                          "self.total_wood_collected = 0;",
                          "msg!(\\"Tree successfully chopped. New Tree coming up.\\");",
                          "} else {",
                          "self.total_wood_collected = v;",
                          "msg!(\\"Total wood chopped: {}\\", v);",
                          "}",
                          "}",
                          "None => {",
                          "msg!(\\"The ever tree is completly chopped!\\");",
                          "}",
                          "};",
                          "Ok(())",
                          "}",
                          "}"
                        ]
                      },
                      "mod.rs": {
                        "path": "./program/programs/lumberjack/src/state/mod.rs",
                        "isBinary": false,
                        "content": [
                          "pub mod game_data;",
                          "pub mod player_data;"
                        ]
                      },
                      "player_data.rs": {
                        "path": "./program/programs/lumberjack/src/state/player_data.rs",
                        "isBinary": false,
                        "content": [
                          "use crate::constants::*;",
                          "use anchor_lang::prelude::*;",
                          "#[account]",
                          "pub struct PlayerData {",
                          "pub authority: Pubkey,",
                          "pub name: String,",
                          "pub level: u8,",
                          "pub xp: u64,",
                          "pub wood: u64,",
                          "pub energy: u64,",
                          "pub last_login: i64,",
                          "pub last_id: u16,",
                          "}",
                          "impl PlayerData {",
                          "pub fn print(&mut self) -> Result<()> {",
                          "// Note that logging costs a lot of compute. So don't use it too much.",
                          "msg!(",
                          "\\"Authority: {} Wood: {} Energy: {}\\",",
                          "self.authority,",
                          "self.wood,",
                          "self.energy",
                          ");",
                          "Ok(())",
                          "}",
                          "pub fn update_energy(&mut self) -> Result<()> {",
                          "// Get the current timestamp",
                          "let current_timestamp = Clock::get()?.unix_timestamp;",
                          "// Calculate the time passed since the last login",
                          "let mut time_passed: i64 = current_timestamp - self.last_login;",
                          "// Calculate the time spent refilling energy",
                          "let mut time_spent = 0;",
                          "while time_passed >= TIME_TO_REFILL_ENERGY && self.energy < MAX_ENERGY {",
                          "self.energy += 1;",
                          "time_passed -= TIME_TO_REFILL_ENERGY;",
                          "time_spent += TIME_TO_REFILL_ENERGY;",
                          "}",
                          "if self.energy >= MAX_ENERGY {",
                          "self.last_login = current_timestamp;",
                          "} else {",
                          "self.last_login += time_spent;",
                          "}",
                          "Ok(())",
                          "}",
                          "pub fn chop_tree(&mut self, amount: u64) -> Result<()> {",
                          "match self.wood.checked_add(amount) {",
                          "Some(v) => {",
                          "self.wood = v;",
                          "}",
                          "None => {",
                          "msg!(\\"Total wood reached!\\");",
                          "}",
                          "};",
                          "match self.energy.checked_sub(amount) {",
                          "Some(v) => {",
                          "self.energy = v;",
                          "}",
                          "None => {",
                          "self.energy = 0;",
                          "}",
                          "};",
                          "Ok(())",
                          "}",
                          "}"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "rustfmt.toml": {
        "path": "./program/rustfmt.toml",
        "isBinary": false,
        "content": [
          "comment_width = 80",
          "edition = \\"2021\\"",
          "format_code_in_doc_comments = true",
          "format_strings = true",
          "group_imports = \\"One\\"",
          "ignore = [",
          "\\"**/*/entrypoint.rs\\"",
          "]",
          "imports_granularity = \\"One\\"",
          "use_field_init_shorthand = true",
          "wrap_comments = true"
        ]
      },
      "tests": {
        "path": "./program/tests",
        "children": {
          "lumberjack.ts": {
            "path": "./program/tests/lumberjack.ts",
            "isBinary": false,
            "content": [
              "import * as anchor from '@coral-xyz/anchor';",
              "import { Program } from '@coral-xyz/anchor';",
              "import { Lumberjack } from '../target/types/lumberjack';",
              "describe('lumberjack', () => {",
              "// Configure the client to use the local cluster.",
              "anchor.setProvider(anchor.AnchorProvider.env());",
              "const program = anchor.workspace.Lumberjack as Program<Lumberjack>;",
              "it('Init player and chop tree!', async () => {",
              "const localKeypair = anchor.web3.Keypair.generate();",
              "const res = await anchor",
              ".getProvider()",
              ".connection.requestAirdrop(localKeypair.publicKey, 1e9);",
              "await anchor.getProvider().connection.confirmTransaction(res, 'confirmed');",
              "const [playerPDA] = anchor.web3.PublicKey.findProgramAddressSync(",
              "[Buffer.from('player'), localKeypair.publicKey.toBuffer()],",
              "program.programId",
              ");",
              "const [gameDataPDA] = anchor.web3.PublicKey.findProgramAddressSync(",
              "[Buffer.from('gameData')],",
              "program.programId",
              ");",
              "let tx = await program.methods",
              ".initPlayer()",
              ".accounts({",
              "player: playerPDA,",
              "gameData: gameDataPDA,",
              "signer: localKeypair.publicKey,",
              "systemProgram: anchor.web3.SystemProgram.programId,",
              "})",
              ".signers([localKeypair])",
              ".rpc({ skipPreflight: true });",
              "console.log('Init transaction', tx);",
              "await anchor.getProvider().connection.confirmTransaction(tx, 'confirmed');",
              "console.log('Confirmed', tx);",
              "for (let i = 0; i < 11; i++) {",
              "console.log(\`Chop instruction \${i}\`);",
              "tx = await program.methods",
              ".chopTree('gameData', 0)",
              ".accounts({",
              "sessionToken: null,",
              "player: playerPDA,",
              "gameData: gameDataPDA,",
              "systemProgram: anchor.web3.SystemProgram.programId,",
              "signer: localKeypair.publicKey,",
              "})",
              ".signers([localKeypair])",
              ".rpc({ skipPreflight: true });",
              "console.log('Chop instruction', tx);",
              "await anchor.getProvider().connection.confirmTransaction(tx, 'confirmed');",
              "}",
              "const accountInfo = await anchor",
              ".getProvider()",
              ".connection.getAccountInfo(playerPDA, 'confirmed');",
              "const decoded = program.coder.accounts.decode(",
              "'PlayerData',",
              "accountInfo.data",
              ");",
              "console.log('Player account info', JSON.stringify(decoded));",
              "});",
              "});"
            ]
          }
        }
      },
      "tsconfig.json": {
        "path": "./program/tsconfig.json",
        "isBinary": false,
        "content": [
          "{",
          "\\"compilerOptions\\": {",
          "\\"types\\": [\\"mocha\\", \\"chai\\"],",
          "\\"typeRoots\\": [\\"./node_modules/@types\\"],",
          "\\"lib\\": [\\"es2015\\"],",
          "\\"module\\": \\"commonjs\\",",
          "\\"target\\": \\"es6\\",",
          "\\"esModuleInterop\\": true",
          "}",
          "}"
        ]
      },
      "yarn.lock": {
        "path": "./program/yarn.lock",
        "isBinary": true,
        "content": null
      }
    }
  },
  "tsconfig.base.json": {
    "path": "./tsconfig.base.json",
    "isBinary": false,
    "content": [
      "{",
      "\\"compilerOptions\\": {",
      "\\"paths\\": {}",
      "}",
      "}"
    ]
  },
  "unity": {
    "path": "./unity",
    "children": {
      "Lumberjack": {
        "path": "./unity/Lumberjack",
        "children": {
          ".gitattributes": {
            "path": "./unity/Lumberjack/.gitattributes",
            "isBinary": false,
            "content": [
              "# Auto detect text files and perform LF normalization",
              "* text=auto",
              "# Custom for Visual Studio",
              "*.cs     diff=csharp",
              "# Standard to msysgit",
              "*.doc\\t diff=astextplain",
              "*.DOC\\t diff=astextplain",
              "*.docx diff=astextplain",
              "*.DOCX diff=astextplain",
              "*.dot  diff=astextplain",
              "*.DOT  diff=astextplain",
              "*.pdf  diff=astextplain",
              "*.PDF\\t diff=astextplain",
              "*.rtf\\t diff=astextplain",
              "*.RTF\\t diff=astextplain"
            ]
          },
          ".gitignore": {
            "path": "./unity/Lumberjack/.gitignore",
            "isBinary": false,
            "content": [
              "# =============== #",
              "# Unity generated #",
              "# =============== #",
              "Temp/",
              "Library/",
              "Build/",
              "Recordings/",
              "Logs/",
              "MemoryCaptures/",
              "# ===================================== #",
              "# Visual Studio / MonoDevelop generated #",
              "# ===================================== #",
              "ExportedObj/",
              "obj/",
              "*.svd",
              "*.userprefs",
              "/*.csproj",
              "*.pidb",
              "*.suo",
              "/*.sln",
              "*.user",
              "*.unityproj",
              "*.booproj",
              "*.pidb",
              "# ===================================== #",
              "# Rider\\t\\t\\t\\t\\t\\t\\t\\t    #",
              "# ===================================== #",
              ".idea",
              ".idea/*",
              "*/.idea/workspace.xml",
              "*/.idea/tasks.xml",
              "# ============ #",
              "# OS generated #",
              "# ============ #",
              ".DS_Store",
              ".DS_Store?",
              "._*",
              ".Spotlight-V100",
              ".Trashes",
              "ehthumbs.db",
              "Thumbs.db"
            ]
          },
          ".idea": {
            "path": "./unity/Lumberjack/.idea",
            "children": {
              ".idea.Lumberjack": {
                "path": "./unity/Lumberjack/.idea/.idea.Lumberjack",
                "children": {
                  ".idea": {
                    "path": "./unity/Lumberjack/.idea/.idea.Lumberjack/.idea",
                    "children": {
                      ".gitignore": {
                        "path": "./unity/Lumberjack/.idea/.idea.Lumberjack/.idea/.gitignore",
                        "isBinary": false,
                        "content": [
                          "# Default ignored files",
                          "/shelf/",
                          "/workspace.xml",
                          "# Rider ignored files",
                          "/modules.xml",
                          "/contentModel.xml",
                          "/.idea.Lumberjack.iml",
                          "/projectSettingsUpdater.xml",
                          "# Editor-based HTTP Client requests",
                          "/httpRequests/",
                          "# Datasource local storage ignored files",
                          "/dataSources/",
                          "/dataSources.local.xml"
                        ]
                      },
                      "encodings.xml": {
                        "path": "./unity/Lumberjack/.idea/.idea.Lumberjack/.idea/encodings.xml",
                        "isBinary": false,
                        "content": [
                          "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>",
                          "<project version=\\"4\\">",
                          "<component name=\\"Encoding\\" addBOMForNewFiles=\\"with BOM under Windows, with no BOM otherwise\\" />",
                          "</project>"
                        ]
                      },
                      "indexLayout.xml": {
                        "path": "./unity/Lumberjack/.idea/.idea.Lumberjack/.idea/indexLayout.xml",
                        "isBinary": false,
                        "content": [
                          "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>",
                          "<project version=\\"4\\">",
                          "<component name=\\"UserContentModel\\">",
                          "<attachedFolders />",
                          "<explicitIncludes />",
                          "<explicitExcludes />",
                          "</component>",
                          "</project>"
                        ]
                      },
                      "projectSettingsUpdater.xml": {
                        "path": "./unity/Lumberjack/.idea/.idea.Lumberjack/.idea/projectSettingsUpdater.xml",
                        "isBinary": false,
                        "content": [
                          "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>",
                          "<project version=\\"4\\">",
                          "<component name=\\"RiderProjectSettingsUpdater\\">",
                          "<option name=\\"vcsConfiguration\\" value=\\"2\\" />",
                          "</component>",
                          "</project>"
                        ]
                      },
                      "vcs.xml": {
                        "path": "./unity/Lumberjack/.idea/.idea.Lumberjack/.idea/vcs.xml",
                        "isBinary": false,
                        "content": [
                          "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>",
                          "<project version=\\"4\\">",
                          "<component name=\\"VcsDirectoryMappings\\">",
                          "<mapping directory=\\"$PROJECT_DIR$/../../..\\" vcs=\\"Git\\" />",
                          "<mapping directory=\\"$PROJECT_DIR$/../..\\" vcs=\\"Git\\" />",
                          "</component>",
                          "</project>"
                        ]
                      },
                      "workspace.xml": {
                        "path": "./unity/Lumberjack/.idea/.idea.Lumberjack/.idea/workspace.xml",
                        "isBinary": false,
                        "content": [
                          "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>",
                          "<project version=\\"4\\">",
                          "<component name=\\"ChangeListManager\\">",
                          "<list default=\\"true\\" id=\\"c6c658a8-63a4-457c-9473-30a40ac41a25\\" name=\\"Changes\\" comment=\\"\\" />",
                          "<option name=\\"SHOW_DIALOG\\" value=\\"false\\" />",
                          "<option name=\\"HIGHLIGHT_CONFLICTS\\" value=\\"true\\" />",
                          "<option name=\\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\\" value=\\"false\\" />",
                          "<option name=\\"LAST_RESOLUTION\\" value=\\"IGNORE\\" />",
                          "</component>",
                          "<component name=\\"GitSEFilterConfiguration\\">",
                          "<file-type-list>",
                          "<filtered-out-file-type name=\\"LOCAL_BRANCH\\" />",
                          "<filtered-out-file-type name=\\"REMOTE_BRANCH\\" />",
                          "<filtered-out-file-type name=\\"TAG\\" />",
                          "<filtered-out-file-type name=\\"COMMIT_BY_MESSAGE\\" />",
                          "</file-type-list>",
                          "</component>",
                          "<component name=\\"HighlightingSettingsPerFile\\">",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.unity.textmeshpro@3.0.6/Scripts/Runtime/TMP_SubMesh.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/5a41d6b7189842eca409fd0b1c3e3dcf17bf78/12/3aea1baf/Void.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/1a53354e199e4b8b9abea9879c91298530800/85/b0272ce4/IStreamingRpcClient.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/5b93611b6ff043439d403fbb0837bc10469200/d8/668500cf/Tuple\`2.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.solana.unity_sdk@9ce399fbc9/Runtime/codebase/SessionWallet.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/1a53354e199e4b8b9abea9879c91298530800/d7/bbee15a5/IRpcClient.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/1a53354e199e4b8b9abea9879c91298530800/af/dc9e3e3d/KeyValue.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.unity.ugui@1.0.0/Runtime/EventSystem/ExecuteEvents.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/IL/e0b0a267fd0447a8887992a4c7d305ad39400/52/5d4455af/02000010pdb.il\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/1a53354e199e4b8b9abea9879c91298530800/a9/598d6323/ParsedTokenAccountData.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.unity.textmeshpro@3.0.6/Scripts/Runtime/TMP_FontAsset.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/1a53354e199e4b8b9abea9879c91298530800/95/15bb4798/JsonRpcClient.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/2272f61be1464142baaf7b7177a8cd432f000/c1/90102e96/IRpcClient.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/3fe4143b1e564a7685ae2e3c399738411a400/e4/bdaf2da7/BaseClient.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.unity.visualscripting@1.9.1/Runtime/VisualScripting.Core/Unity/Singleton.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/d5ed476487f143bd945b3b0b1df1e725159a00/c2/d9c414c1/UnitySynchronizationContext.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/2272f61be1464142baaf7b7177a8cd432f000/da/caf10bfd/Commitment.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/2272f61be1464142baaf7b7177a8cd432f000/02/6295715a/StreamingRpcClient.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.unity.ugui@1.0.0/Runtime/UI/Core/Selectable.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/1a53354e199e4b8b9abea9879c91298530800/d4/a64bfd99/TokenAccountInfo.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.unity.ugui@1.0.0/Tests/Runtime/EventSystem/InputModuleTests/DragCallbackCheck.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/6ecec222e87b4e91b148a03375e764771a400/e9/e7016171/BaseClient.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/1a53354e199e4b8b9abea9879c91298530800/6b/b15753fc/ResponseValue\`1.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/5e32aa7dc73345099f7e01b6150103873bc00/e2/79a83230/WebSocket.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/d5ed476487f143bd945b3b0b1df1e725159a00/13/2262e589/UnityEvent.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/6ecec222e87b4e91b148a03375e764771a400/2e/e4eaa359/TransactionalBaseClient\`1.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/5e2d116f98d140d0a76ec8a673a2a4ac469000/20/76f8cd9c/Task.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/2272f61be1464142baaf7b7177a8cd432f000/ea/d1c645d6/SolanaStreamingRpcClient.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/2272f61be1464142baaf7b7177a8cd432f000/9c/0a325fce/SignatureStatusInfo.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.unity.ugui@1.0.0/Runtime/UI/Core/Button.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/5e2d116f98d140d0a76ec8a673a2a4ac469000/fc/f3c1111c/Task\`1.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.unity.textmeshpro@3.0.6/Scripts/Runtime/TMPro_UGUI_Private.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/1a53354e199e4b8b9abea9879c91298530800/b5/57ce81ca/IdGenerator.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/48db10911f44470f94feddd9454b9f9c469200/77/f035b04c/Action\`1.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/5b93611b6ff043439d403fbb0837bc10469200/97/166bc570/Task.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/d5ed476487f143bd945b3b0b1df1e725159a00/b4/067199e8/InvokableCall.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/46b90a44b80545818c9894072cd973622e800/8f/0577adda/SubscriptionState.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/5a41d6b7189842eca409fd0b1c3e3dcf17bf78/5f/80179db7/Action\`1.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/5b93611b6ff043439d403fbb0837bc10469200/f1/7bb8dbc7/AsyncTaskMethodBuilder\`1.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/5b93611b6ff043439d403fbb0837bc10469200/44/b097f0b1/TaskCompletionSource\`1.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/2272f61be1464142baaf7b7177a8cd432f000/c0/30486079/TransactionConfirmationUtils.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/1a53354e199e4b8b9abea9879c91298530800/ba/c057e915/SubscriptionChannel.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/5b93611b6ff043439d403fbb0837bc10469200/5f/b9fc2610/Task\`1.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Editor/Draw2D.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/ccd7fefef1bbb346439107063c9cbf614fb9a8429bb5bdd8509aceb3c0db96/System.Net.WebSockets.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/1a53354e199e4b8b9abea9879c91298530800/68/ad6bb31b/IWebSocket.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/1a53354e199e4b8b9abea9879c91298530800/59/c4f70d38/TokenAccountData.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/1a53354e199e4b8b9abea9879c91298530800/23/eaa256eb/TokenBalance.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/48db10911f44470f94feddd9454b9f9c469200/d7/d1ecfaeb/String.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.unity.collab-proxy@2.2.0/Editor/PlasticSCM/Views/Changesets/ChangesetsTab.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/46b90a44b80545818c9894072cd973622e800/f9/3e8be8ca/IStreamingRpcClient.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/11a7ac3c905b442eaf1dbb6eb4717e00b7a00/ac/dc82a2ea/Dictionary\`2.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/1a53354e199e4b8b9abea9879c91298530800/5b/d6fc9f56/SolanaRpcClient.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/2272f61be1464142baaf7b7177a8cd432f000/35/4093e232/SolanaRpcClient.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/46b90a44b80545818c9894072cd973622e800/5f/8221bff4/TransactionConfirmationUtils.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.unity.testtools.codecoverage@1.2.4/Editor/CoveragePreferences.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/6ecec222e87b4e91b148a03375e764771a400/a3/0027eb04/TokenProgram.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.unity.ugui@1.0.0/Runtime/UI/Core/Layout/LayoutRebuilder.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/1a53354e199e4b8b9abea9879c91298530800/74/d3336422/TokenAccountInfoDetails.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/46b90a44b80545818c9894072cd973622e800/6d/3740bf3e/IRpcClient.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/1a53354e199e4b8b9abea9879c91298530800/7a/4a1f2bc6/SolanaStreamingRpcClient.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/5b93611b6ff043439d403fbb0837bc10469200/97/9ed24483/AsyncMethodBuilderCore.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/5b93611b6ff043439d403fbb0837bc10469200/83/d61ad871/AwaitTaskContinuation.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.unity.testtools.codecoverage@1.2.4/Editor/CommandLineManager.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/46b90a44b80545818c9894072cd973622e800/bd/c89d75f7/SolanaRpcClient.cs\\" root0=\\"FORCE_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.unity.2d.sprite@1.0.0/Editor/SpriteEditor/SpriteEditorWindow.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/880832f2c4e2458090401bbb74a86b24a8a00/d5/b8886258/JsonConvert.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/1a53354e199e4b8b9abea9879c91298530800/55/b5a6ff19/StreamingRpcClient.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/3ea01e77be99618395f448b16bd7cc2bd4248bd9e5d8474964b2d97f39c5d74/System.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/d5ed476487f143bd945b3b0b1df1e725159a00/30/ff03d46a/MonoBehaviour.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/fcc0bbf6bf4e430c91d4aa05736fc5c62ac00/4a/6e6344b7/ShortcutExtensions.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "</component>",
                          "<component name=\\"MacroExpansionManager\\">",
                          "<option name=\\"directoryName\\" value=\\"omf6n6sj\\" />",
                          "</component>",
                          "<component name=\\"MarkdownSettingsMigration\\">",
                          "<option name=\\"stateVersion\\" value=\\"1\\" />",
                          "</component>",
                          "<component name=\\"ProjectId\\" id=\\"2SHnHF2jD85af8IJSarKV8FYpjE\\" />",
                          "<component name=\\"ProjectLevelVcsManager\\" settingsEditedManually=\\"true\\" />",
                          "<component name=\\"ProjectViewState\\">",
                          "<option name=\\"hideEmptyMiddlePackages\\" value=\\"true\\" />",
                          "<option name=\\"showLibraryContents\\" value=\\"true\\" />",
                          "</component>",
                          "<component name=\\"PropertiesComponent\\">",
                          "<property name=\\"Discover.Launch.Via.Unity\\" value=\\"true\\" />",
                          "<property name=\\"RunOnceActivity.OpenProjectViewOnStart\\" value=\\"true\\" />",
                          "<property name=\\"RunOnceActivity.ShowReadmeOnStart\\" value=\\"true\\" />",
                          "<property name=\\"WebServerToolWindowFactoryState\\" value=\\"false\\" />",
                          "<property name=\\"XThreadsFramesViewSplitterKey\\" value=\\"0.36661074\\" />",
                          "<property name=\\"rider.run.widget.enabled.cache\\" value=\\"false\\" />",
                          "<property name=\\"settings.editor.selected.configurable\\" value=\\"preferences.pluginManager\\" />",
                          "<property name=\\"vue.rearranger.settings.migration\\" value=\\"true\\" />",
                          "</component>",
                          "<component name=\\"RunManager\\" selected=\\"Attach to Unity Editor.Attach to Unity Editor\\">",
                          "<configuration name=\\"Attach to Unity Editor &amp; Play\\" type=\\"UNITY_DEBUG_RUN_CONFIGURATION\\" factoryName=\\"UNITY_ATTACH_AND_PLAY\\" show_console_on_std_err=\\"false\\" show_console_on_std_out=\\"false\\" port=\\"50000\\" address=\\"localhost\\">",
                          "<option name=\\"allowRunningInParallel\\" value=\\"false\\" />",
                          "<option name=\\"listenPortForConnections\\" value=\\"false\\" />",
                          "<option name=\\"pid\\" />",
                          "<option name=\\"projectPathOnTarget\\" />",
                          "<option name=\\"selectedOptions\\">",
                          "<list />",
                          "</option>",
                          "<method v=\\"2\\" />",
                          "</configuration>",
                          "<configuration name=\\"Attach to Unity Editor\\" type=\\"UNITY_DEBUG_RUN_CONFIGURATION\\" factoryName=\\"Unity Debug\\" show_console_on_std_err=\\"false\\" show_console_on_std_out=\\"false\\" port=\\"50000\\" address=\\"localhost\\" ignored-value-for-modified-check=\\"81854\\">",
                          "<option name=\\"allowRunningInParallel\\" value=\\"false\\" />",
                          "<option name=\\"listenPortForConnections\\" value=\\"false\\" />",
                          "<option name=\\"pid\\" value=\\"81854\\" />",
                          "<option name=\\"projectPathOnTarget\\" />",
                          "<option name=\\"selectedOptions\\">",
                          "<list />",
                          "</option>",
                          "<method v=\\"2\\" />",
                          "</configuration>",
                          "</component>",
                          "<component name=\\"SpellCheckerSettings\\" RuntimeDictionaries=\\"0\\" Folders=\\"0\\" CustomDictionaries=\\"0\\" DefaultDictionary=\\"application-level\\" UseSingleDictionary=\\"true\\" transferred=\\"true\\" />",
                          "<component name=\\"TaskManager\\">",
                          "<task active=\\"true\\" id=\\"Default\\" summary=\\"Default task\\">",
                          "<changelist id=\\"c6c658a8-63a4-457c-9473-30a40ac41a25\\" name=\\"Changes\\" comment=\\"\\" />",
                          "<created>1688812286615</created>",
                          "<option name=\\"number\\" value=\\"Default\\" />",
                          "<option name=\\"presentableId\\" value=\\"Default\\" />",
                          "<updated>1688812286615</updated>",
                          "<workItem from=\\"1688812296304\\" duration=\\"873000\\" />",
                          "<workItem from=\\"1688992023808\\" duration=\\"3532000\\" />",
                          "<workItem from=\\"1689015965898\\" duration=\\"5248000\\" />",
                          "<workItem from=\\"1689947092679\\" duration=\\"4913000\\" />",
                          "<workItem from=\\"1690279782390\\" duration=\\"609000\\" />",
                          "<workItem from=\\"1690281589716\\" duration=\\"8125000\\" />",
                          "<workItem from=\\"1691583418683\\" duration=\\"2684000\\" />",
                          "<workItem from=\\"1691771344868\\" duration=\\"6063000\\" />",
                          "<workItem from=\\"1697114493835\\" duration=\\"1327000\\" />",
                          "<workItem from=\\"1697119085881\\" duration=\\"8903000\\" />",
                          "<workItem from=\\"1697139220894\\" duration=\\"7519000\\" />",
                          "<workItem from=\\"1697456134108\\" duration=\\"19483000\\" />",
                          "<workItem from=\\"1697791532900\\" duration=\\"21000\\" />",
                          "<workItem from=\\"1697791667145\\" duration=\\"4520000\\" />",
                          "<workItem from=\\"1698004572164\\" duration=\\"3473000\\" />",
                          "<workItem from=\\"1698053087113\\" duration=\\"4705000\\" />",
                          "<workItem from=\\"1698079795994\\" duration=\\"3250000\\" />",
                          "<workItem from=\\"1698143047437\\" duration=\\"15700000\\" />",
                          "<workItem from=\\"1698313781601\\" duration=\\"5476000\\" />",
                          "<workItem from=\\"1698345163549\\" duration=\\"1916000\\" />",
                          "<workItem from=\\"1698405230839\\" duration=\\"16944000\\" />",
                          "<workItem from=\\"1699397364577\\" duration=\\"265000\\" />",
                          "<workItem from=\\"1699397639393\\" duration=\\"722000\\" />",
                          "<workItem from=\\"1699399028439\\" duration=\\"2214000\\" />",
                          "<workItem from=\\"1699477147514\\" duration=\\"1766000\\" />",
                          "<workItem from=\\"1699611591720\\" duration=\\"421000\\" />",
                          "<workItem from=\\"1699612344520\\" duration=\\"2151000\\" />",
                          "<workItem from=\\"1699618443982\\" duration=\\"4586000\\" />",
                          "<workItem from=\\"1699706459340\\" duration=\\"867000\\" />",
                          "<workItem from=\\"1699864755153\\" duration=\\"325000\\" />",
                          "<workItem from=\\"1699865135604\\" duration=\\"3156000\\" />",
                          "<workItem from=\\"1699869000993\\" duration=\\"1023000\\" />",
                          "<workItem from=\\"1699870962166\\" duration=\\"2286000\\" />",
                          "</task>",
                          "<servers />",
                          "</component>",
                          "<component name=\\"TypeScriptGeneratedFilesManager\\">",
                          "<option name=\\"version\\" value=\\"3\\" />",
                          "</component>",
                          "<component name=\\"UnityCheckinConfiguration\\" checkUnsavedScenes=\\"true\\" />",
                          "<component name=\\"UnityProjectConfiguration\\" hasMinimizedUI=\\"true\\" />",
                          "<component name=\\"UnityUnitTestConfiguration\\" currentTestLauncher=\\"EditMode\\" />",
                          "<component name=\\"Vcs.Log.Tabs.Properties\\">",
                          "<option name=\\"TAB_STATES\\">",
                          "<map>",
                          "<entry key=\\"MAIN\\">",
                          "<value>",
                          "<State />",
                          "</value>",
                          "</entry>",
                          "</map>",
                          "</option>",
                          "</component>",
                          "<component name=\\"VcsManagerConfiguration\\">",
                          "<option name=\\"CLEAR_INITIAL_COMMIT_MESSAGE\\" value=\\"true\\" />",
                          "</component>",
                          "<component name=\\"XDebuggerManager\\">",
                          "<breakpoint-manager>",
                          "<breakpoints>",
                          "<line-breakpoint enabled=\\"true\\" type=\\"DotNet Breakpoints\\">",
                          "<url>file://$PROJECT_DIR$/Assets/Scripts/AnchorService.cs</url>",
                          "<line>146</line>",
                          "<properties documentPath=\\"$PROJECT_DIR$/Assets/Scripts/LumberjackService.cs\\" initialLine=\\"146\\" containingFunctionPresentation=\\"method 'InitGameDataAccount'\\" />",
                          "<option name=\\"timeStamp\\" value=\\"21\\" />",
                          "</line-breakpoint>",
                          "<line-breakpoint enabled=\\"true\\" type=\\"DotNet Breakpoints\\">",
                          "<url>file://$PROJECT_DIR$/Assets/Scripts/AnchorService.cs</url>",
                          "<line>158</line>",
                          "<properties documentPath=\\"$PROJECT_DIR$/Assets/Scripts/LumberjackService.cs\\" initialLine=\\"158\\" containingFunctionPresentation=\\"method 'InitGameDataAccount'\\" />",
                          "<option name=\\"timeStamp\\" value=\\"22\\" />",
                          "</line-breakpoint>",
                          "<line-breakpoint enabled=\\"true\\" type=\\"DotNet Breakpoints\\">",
                          "<url>file://$PROJECT_DIR$/Assets/Scripts/AnchorService.cs</url>",
                          "<line>169</line>",
                          "<properties documentPath=\\"$PROJECT_DIR$/Assets/Scripts/LumberjackService.cs\\" initialLine=\\"169\\" containingFunctionPresentation=\\"method 'InitGameDataAccount'\\" />",
                          "<option name=\\"timeStamp\\" value=\\"23\\" />",
                          "</line-breakpoint>",
                          "<line-breakpoint enabled=\\"true\\" type=\\"DotNet Breakpoints\\">",
                          "<url>file://$PROJECT_DIR$/Assets/Scripts/AnchorService.cs</url>",
                          "<line>175</line>",
                          "<properties documentPath=\\"$PROJECT_DIR$/Assets/Scripts/LumberjackService.cs\\" initialLine=\\"175\\" containingFunctionPresentation=\\"method 'InitGameDataAccount'\\" />",
                          "<option name=\\"timeStamp\\" value=\\"24\\" />",
                          "</line-breakpoint>",
                          "<line-breakpoint enabled=\\"true\\" type=\\"DotNet Breakpoints\\">",
                          "<url>file://$PROJECT_DIR$/Library/PackageCache/com.solana.unity_sdk@06c8bcd64a/Runtime/codebase/Web3.cs</url>",
                          "<line>440</line>",
                          "<properties documentPath=\\"$PROJECT_DIR$/Library/PackageCache/com.solana.unity_sdk@06c8bcd64a/Runtime/codebase/Web3.cs\\" initialLine=\\"440\\" containingFunctionPresentation=\\"lambda expression inside method 'SubscribeToWalletEvents'\\" />",
                          "<option name=\\"timeStamp\\" value=\\"35\\" />",
                          "</line-breakpoint>",
                          "<line-breakpoint enabled=\\"true\\" type=\\"DotNet Breakpoints\\">",
                          "<url>file://$PROJECT_DIR$/Library/PackageCache/com.solana.unity_sdk@06c8bcd64a/Runtime/codebase/SessionWallet.cs</url>",
                          "<line>91</line>",
                          "<properties documentPath=\\"$PROJECT_DIR$/Library/PackageCache/com.solana.unity_sdk@06c8bcd64a/Runtime/codebase/SessionWallet.cs\\" initialLine=\\"91\\" containingFunctionPresentation=\\"method 'GetSessionWallet'\\" />",
                          "<option name=\\"timeStamp\\" value=\\"44\\" />",
                          "</line-breakpoint>",
                          "<line-breakpoint enabled=\\"true\\" type=\\"DotNet Breakpoints\\">",
                          "<url>file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/880832f2c4e2458090401bbb74a86b24a8a00/d5/b8886258/JsonConvert.cs</url>",
                          "<line>338</line>",
                          "<properties documentPath=\\"$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/880832f2c4e2458090401bbb74a86b24a8a00/d5/b8886258/JsonConvert.cs\\" initialLine=\\"338\\" containingFunctionPresentation=\\"method 'DeserializeObject'\\">",
                          "<startOffsets>",
                          "<option value=\\"14789\\" />",
                          "</startOffsets>",
                          "<endOffsets>",
                          "<option value=\\"14831\\" />",
                          "</endOffsets>",
                          "</properties>",
                          "<option name=\\"timeStamp\\" value=\\"81\\" />",
                          "</line-breakpoint>",
                          "<line-breakpoint enabled=\\"true\\" type=\\"DotNet Breakpoints\\">",
                          "<url>file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/1a53354e199e4b8b9abea9879c91298530800/95/15bb4798/JsonRpcClient.cs</url>",
                          "<line>109</line>",
                          "<properties documentPath=\\"$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/1a53354e199e4b8b9abea9879c91298530800/95/15bb4798/JsonRpcClient.cs\\" initialLine=\\"109\\" containingFunctionPresentation=\\"method 'HandleResult'\\">",
                          "<startOffsets>",
                          "<option value=\\"4647\\" />",
                          "</startOffsets>",
                          "<endOffsets>",
                          "<option value=\\"4782\\" />",
                          "</endOffsets>",
                          "</properties>",
                          "<option name=\\"timeStamp\\" value=\\"88\\" />",
                          "</line-breakpoint>",
                          "<line-breakpoint enabled=\\"true\\" type=\\"DotNet Breakpoints\\">",
                          "<url>file://$PROJECT_DIR$/Library/PackageCache/com.solana.unity_sdk@360077338a/Runtime/codebase/utility/MainThreadDispatcher.cs</url>",
                          "<line>108</line>",
                          "<properties documentPath=\\"$PROJECT_DIR$/Library/PackageCache/com.solana.unity_sdk@360077338a/Runtime/codebase/utility/MainThreadDispatcher.cs\\" initialLine=\\"108\\" containingFunctionPresentation=\\"method 'Instance'\\" />",
                          "<option name=\\"timeStamp\\" value=\\"94\\" />",
                          "</line-breakpoint>",
                          "<line-breakpoint enabled=\\"true\\" type=\\"DotNet Breakpoints\\">",
                          "<condition expression=\\"_commitmentCache.ContainsKey(&quot;Confirmed&quot;)\\" language=\\"C#\\" />",
                          "<url>file://$PROJECT_DIR$/Library/PackageCache/com.solana.unity_sdk@360077338a/Runtime/codebase/WalletBase.cs</url>",
                          "<line>307</line>",
                          "<properties documentPath=\\"$PROJECT_DIR$/Library/PackageCache/com.solana.unity_sdk@360077338a/Runtime/codebase/WalletBase.cs\\" initialLine=\\"307\\" containingFunctionPresentation=\\"method 'GetBlockHash'\\" />",
                          "<option name=\\"timeStamp\\" value=\\"101\\" />",
                          "</line-breakpoint>",
                          "<line-breakpoint enabled=\\"true\\" type=\\"DotNet Breakpoints\\">",
                          "<url>file://$PROJECT_DIR$/Assets/Game/Scripts/Ui/TokenPanel.cs</url>",
                          "<line>60</line>",
                          "<properties documentPath=\\"$PROJECT_DIR$/Assets/Game/Scripts/Ui/TokenPanel.cs\\" initialLine=\\"67\\" containingFunctionPresentation=\\"lambda expression inside method 'UpdateAndSubscribeToTokenAccount'\\">",
                          "<startOffsets>",
                          "<option value=\\"1775\\" />",
                          "</startOffsets>",
                          "<endOffsets>",
                          "<option value=\\"1877\\" />",
                          "</endOffsets>",
                          "</properties>",
                          "<option name=\\"timeStamp\\" value=\\"113\\" />",
                          "</line-breakpoint>",
                          "<line-breakpoint enabled=\\"true\\" type=\\"DotNet Breakpoints\\">",
                          "<url>file://$PROJECT_DIR$/Assets/Game/Scripts/Ui/TokenPanel.cs</url>",
                          "<line>69</line>",
                          "<properties documentPath=\\"$PROJECT_DIR$/Assets/Game/Scripts/Ui/TokenPanel.cs\\" initialLine=\\"69\\" containingFunctionPresentation=\\"method 'UpdateAndSubscribeToTokenAccount'\\">",
                          "<startOffsets>",
                          "<option value=\\"2251\\" />",
                          "</startOffsets>",
                          "<endOffsets>",
                          "<option value=\\"2311\\" />",
                          "</endOffsets>",
                          "</properties>",
                          "<option name=\\"timeStamp\\" value=\\"114\\" />",
                          "</line-breakpoint>",
                          "<line-breakpoint enabled=\\"true\\" type=\\"DotNet Breakpoints\\">",
                          "<url>file://$PROJECT_DIR$/Assets/Frictionless/MessageRouter.cs</url>",
                          "<line>75</line>",
                          "<properties documentPath=\\"$PROJECT_DIR$/Assets/Frictionless/MessageRouter.cs\\" initialLine=\\"75\\" containingFunctionPresentation=\\"method 'RaiseMessage'\\">",
                          "<startOffsets>",
                          "<option value=\\"1903\\" />",
                          "</startOffsets>",
                          "<endOffsets>",
                          "<option value=\\"1984\\" />",
                          "</endOffsets>",
                          "</properties>",
                          "<option name=\\"timeStamp\\" value=\\"115\\" />",
                          "</line-breakpoint>",
                          "<line-breakpoint enabled=\\"true\\" type=\\"DotNet Breakpoints\\">",
                          "<url>file://$PROJECT_DIR$/Assets/Game/Scripts/Ui/NftListPopup.cs</url>",
                          "<line>90</line>",
                          "<properties documentPath=\\"$PROJECT_DIR$/Assets/Game/Scripts/Ui/NftListPopup.cs\\" initialLine=\\"88\\" containingFunctionPresentation=\\"method 'OnNftLoadedMessage'\\">",
                          "<startOffsets>",
                          "<option value=\\"2771\\" />",
                          "</startOffsets>",
                          "<endOffsets>",
                          "<option value=\\"2807\\" />",
                          "</endOffsets>",
                          "</properties>",
                          "<option name=\\"timeStamp\\" value=\\"116\\" />",
                          "</line-breakpoint>",
                          "<line-breakpoint enabled=\\"true\\" type=\\"DotNet Breakpoints\\">",
                          "<url>file://$PROJECT_DIR$/Assets/Game/Scripts/Ui/TokenPanel.cs</url>",
                          "<line>63</line>",
                          "<properties documentPath=\\"$PROJECT_DIR$/Assets/Game/Scripts/Ui/TokenPanel.cs\\" initialLine=\\"63\\" containingFunctionPresentation=\\"method 'UpdateAndSubscribeToTokenAccount'\\">",
                          "<startOffsets>",
                          "<option value=\\"1941\\" />",
                          "</startOffsets>",
                          "<endOffsets>",
                          "<option value=\\"2064\\" />",
                          "</endOffsets>",
                          "</properties>",
                          "<option name=\\"timeStamp\\" value=\\"121\\" />",
                          "</line-breakpoint>",
                          "</breakpoints>",
                          "</breakpoint-manager>",
                          "<pin-to-top-manager>",
                          "<pinned-members>",
                          "<PinnedItemInfo parentTag=\\"Type#Solana.Unity.Metaplex.NFT.Library.MetadataAccount\\" memberName=\\"offchainData\\" />",
                          "</pinned-members>",
                          "</pin-to-top-manager>",
                          "</component>",
                          "</project>"
                        ]
                      }
                    }
                  }
                }
              },
              ".idea.TinyAdventure": {
                "path": "./unity/Lumberjack/.idea/.idea.TinyAdventure",
                "children": {
                  ".idea": {
                    "path": "./unity/Lumberjack/.idea/.idea.TinyAdventure/.idea",
                    "children": {
                      ".gitignore": {
                        "path": "./unity/Lumberjack/.idea/.idea.TinyAdventure/.idea/.gitignore",
                        "isBinary": false,
                        "content": [
                          "# Default ignored files",
                          "/shelf/",
                          "/workspace.xml",
                          "# Rider ignored files",
                          "/contentModel.xml",
                          "/modules.xml",
                          "/.idea.TinyAdventure.iml",
                          "/projectSettingsUpdater.xml",
                          "# Editor-based HTTP Client requests",
                          "/httpRequests/",
                          "# Datasource local storage ignored files",
                          "/dataSources/",
                          "/dataSources.local.xml"
                        ]
                      },
                      "encodings.xml": {
                        "path": "./unity/Lumberjack/.idea/.idea.TinyAdventure/.idea/encodings.xml",
                        "isBinary": false,
                        "content": [
                          "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>",
                          "<project version=\\"4\\">",
                          "<component name=\\"Encoding\\" addBOMForNewFiles=\\"with BOM under Windows, with no BOM otherwise\\" />",
                          "</project>"
                        ]
                      },
                      "indexLayout.xml": {
                        "path": "./unity/Lumberjack/.idea/.idea.TinyAdventure/.idea/indexLayout.xml",
                        "isBinary": false,
                        "content": [
                          "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>",
                          "<project version=\\"4\\">",
                          "<component name=\\"UserContentModel\\">",
                          "<attachedFolders />",
                          "<explicitIncludes />",
                          "<explicitExcludes />",
                          "</component>",
                          "</project>"
                        ]
                      },
                      "projectSettingsUpdater.xml": {
                        "path": "./unity/Lumberjack/.idea/.idea.TinyAdventure/.idea/projectSettingsUpdater.xml",
                        "isBinary": false,
                        "content": [
                          "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>",
                          "<project version=\\"4\\">",
                          "<component name=\\"RiderProjectSettingsUpdater\\">",
                          "<option name=\\"vcsConfiguration\\" value=\\"2\\" />",
                          "</component>",
                          "</project>"
                        ]
                      },
                      "vcs.xml": {
                        "path": "./unity/Lumberjack/.idea/.idea.TinyAdventure/.idea/vcs.xml",
                        "isBinary": false,
                        "content": [
                          "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>",
                          "<project version=\\"4\\">",
                          "<component name=\\"VcsDirectoryMappings\\">",
                          "<mapping directory=\\"$PROJECT_DIR$/../../..\\" vcs=\\"Git\\" />",
                          "</component>",
                          "</project>"
                        ]
                      },
                      "workspace.xml": {
                        "path": "./unity/Lumberjack/.idea/.idea.TinyAdventure/.idea/workspace.xml",
                        "isBinary": false,
                        "content": [
                          "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>",
                          "<project version=\\"4\\">",
                          "<component name=\\"ChangeListManager\\">",
                          "<list default=\\"true\\" id=\\"4faabe1f-624b-4170-b7ba-41bdca9b88e8\\" name=\\"Changes\\" comment=\\"\\">",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/Examples/TinyAdventure/TinyAdventure.unity\\" beforeDir=\\"false\\" afterPath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/Examples/TinyAdventure/TinyAdventure.unity\\" afterDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Decode.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Decode/GifBitBlockReader.cs\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Decode/GifBitBlockReader.cs.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Decode/GifCanvas.cs\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Decode/GifCanvas.cs.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Decode/GifLzwDictionary.cs\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Decode/GifLzwDictionary.cs.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/GifStream.cs\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/GifStream.cs.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model/GifApplicationExtension.cs\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model/GifApplicationExtension.cs.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model/GifDisposalMethod.cs\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model/GifDisposalMethod.cs.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model/GifGraphicControl.cs\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model/GifGraphicControl.cs.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model/GifHeader.cs\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model/GifHeader.cs.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model/GifImage.cs\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model/GifImage.cs.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model/GifImageDescriptor.cs\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model/GifImageDescriptor.cs.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model/GifNetscapeExtension.cs\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model/GifNetscapeExtension.cs.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model/GifPalette.cs\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model/GifPalette.cs.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model/GifPlainText.cs\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model/GifPlainText.cs.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model/GifVersion.cs\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Model/GifVersion.cs.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/UnityGifDecoder.asmdef\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/UnityGifDecoder.asmdef.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Utils.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Utils/BitUtils.cs\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/GifDecoderFast/Runtime/Utils/BitUtils.cs.meta\\" beforeDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/Scripts/Services/NftService.cs\\" beforeDir=\\"false\\" afterPath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/Scripts/Services/NftService.cs\\" afterDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/Scripts/Services/SolPlayWebSocketService.cs\\" beforeDir=\\"false\\" afterPath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/Scripts/Services/SolPlayWebSocketService.cs\\" afterDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/WebSockets/WebSocket.cs\\" beforeDir=\\"false\\" afterPath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Assets/SolPlay/WebSockets/WebSocket.cs\\" afterDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Packages/packages-lock.json\\" beforeDir=\\"false\\" afterPath=\\"$PROJECT_DIR$/../../../seven-seas/unity/Packages/packages-lock.json\\" afterDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/ProjectSettings/EditorBuildSettings.asset\\" beforeDir=\\"false\\" afterPath=\\"$PROJECT_DIR$/../../../seven-seas/unity/ProjectSettings/EditorBuildSettings.asset\\" afterDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/UserSettings/EditorUserSettings.asset\\" beforeDir=\\"false\\" afterPath=\\"$PROJECT_DIR$/../../../seven-seas/unity/UserSettings/EditorUserSettings.asset\\" afterDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../../seven-seas/unity/UserSettings/Layouts/default-2021.dwlt\\" beforeDir=\\"false\\" afterPath=\\"$PROJECT_DIR$/../../../seven-seas/unity/UserSettings/Layouts/default-2021.dwlt\\" afterDir=\\"false\\" />",
                          "<change beforePath=\\"$PROJECT_DIR$/../../app/utils/anchor.ts\\" beforeDir=\\"false\\" afterPath=\\"$PROJECT_DIR$/../../app/utils/anchor.ts\\" afterDir=\\"false\\" />",
                          "</list>",
                          "<option name=\\"SHOW_DIALOG\\" value=\\"false\\" />",
                          "<option name=\\"HIGHLIGHT_CONFLICTS\\" value=\\"true\\" />",
                          "<option name=\\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\\" value=\\"false\\" />",
                          "<option name=\\"LAST_RESOLUTION\\" value=\\"IGNORE\\" />",
                          "</component>",
                          "<component name=\\"GitSEFilterConfiguration\\">",
                          "<file-type-list>",
                          "<filtered-out-file-type name=\\"LOCAL_BRANCH\\" />",
                          "<filtered-out-file-type name=\\"REMOTE_BRANCH\\" />",
                          "<filtered-out-file-type name=\\"TAG\\" />",
                          "<filtered-out-file-type name=\\"COMMIT_BY_MESSAGE\\" />",
                          "</file-type-list>",
                          "</component>",
                          "<component name=\\"HighlightingSettingsPerFile\\">",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/46b90a44b80545818c9894072cd973622e800/b9/80a7deca/ClientFactory.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.solana.unity_sdk@4f10615ecf/Runtime/codebase/WalletBase.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.unity.performance.profile-analyzer@1.1.1/Editor/TopMarkers.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/46b90a44b80545818c9894072cd973622e800/ea/db2d982d/Transaction.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/46b90a44b80545818c9894072cd973622e800/6d/2a6788f3/SolanaStreamingRpcClient.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/../../../../Solana.Unity-SDK/Runtime/codebase/Web3.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/SourcesCache/9384495d2a482ac7341d67ca84e16d267d16c62458a9d67a92b119199a9/System.Threading.Tasks.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/../../../../Solana.Unity-SDK/Runtime/codebase/nft/nft_interfaces/iNftFile.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/46b90a44b80545818c9894072cd973622e800/f9/3e8be8ca/IStreamingRpcClient.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.unity.visualscripting@1.7.8/Editor/VisualScripting.Core/Utilities/Clipboard.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.unity.performance.profile-analyzer@1.1.1/Editor/Columns.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.unity.visualscripting@1.7.8/Editor/VisualScripting.Core/Interface/LudiqGUIUtility.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/Library/PackageCache/com.unity.ide.visualstudio@2.0.16/Editor/ProjectGeneration/FileIOProvider.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/../../../../Solana.Unity-SDK/Runtime/codebase/utility/FileDownloader.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/../../../../Solana.Unity-SDK/Runtime/codebase/nft/Nft.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$PROJECT_DIR$/../../../../Solana.Unity-SDK/Runtime/codebase/data/MetaplexData.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/1f31cb8b27da478388ea44e658f52bb94400/79/a9f98b69/GplSessionProgram.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/5e2d116f98d140d0a76ec8a673a2a4ac469000/aa/e13370f4/TaskAwaiter\`1.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/46b90a44b80545818c9894072cd973622e800/3a/5ef844a1/Cluster.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/5e2d116f98d140d0a76ec8a673a2a4ac469000/20/76f8cd9c/Task.cs\\" root0=\\"FORCE_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/5e2d116f98d140d0a76ec8a673a2a4ac469000/fc/f3c1111c/Task\`1.cs\\" root0=\\"FORCE_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/5e5d3c5645854f6095878615ec04f33141600/8a/385bcccf/PublicKey.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "<setting file=\\"file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/46b90a44b80545818c9894072cd973622e800/9c/0fad5690/AccountMeta.cs\\" root0=\\"SKIP_HIGHLIGHTING\\" />",
                          "</component>",
                          "<component name=\\"MacroExpansionManager\\">",
                          "<option name=\\"directoryName\\" value=\\"j5o4tjnn\\" />",
                          "</component>",
                          "<component name=\\"MarkdownSettingsMigration\\">",
                          "<option name=\\"stateVersion\\" value=\\"1\\" />",
                          "</component>",
                          "<component name=\\"ProjectId\\" id=\\"2RvTQRSX91fphLIEnmbqPORFEJf\\" />",
                          "<component name=\\"ProjectLevelVcsManager\\" settingsEditedManually=\\"true\\" />",
                          "<component name=\\"ProjectViewState\\">",
                          "<option name=\\"hideEmptyMiddlePackages\\" value=\\"true\\" />",
                          "<option name=\\"showLibraryContents\\" value=\\"true\\" />",
                          "</component>",
                          "<component name=\\"PropertiesComponent\\">",
                          "<property name=\\"Discover.Launch.Via.Unity\\" value=\\"true\\" />",
                          "<property name=\\"RunOnceActivity.OpenProjectViewOnStart\\" value=\\"true\\" />",
                          "<property name=\\"RunOnceActivity.ShowReadmeOnStart\\" value=\\"true\\" />",
                          "<property name=\\"WebServerToolWindowFactoryState\\" value=\\"false\\" />",
                          "<property name=\\"rider.run.widget.enabled.cache\\" value=\\"false\\" />",
                          "<property name=\\"settings.editor.selected.configurable\\" value=\\"preferences.pluginManager\\" />",
                          "<property name=\\"vue.rearranger.settings.migration\\" value=\\"true\\" />",
                          "</component>",
                          "<component name=\\"RunManager\\" selected=\\"Attach to Unity Editor.Attach to Unity Editor\\">",
                          "<configuration name=\\"Attach to Unity Editor &amp; Play\\" type=\\"UNITY_DEBUG_RUN_CONFIGURATION\\" factoryName=\\"UNITY_ATTACH_AND_PLAY\\" show_console_on_std_err=\\"false\\" show_console_on_std_out=\\"false\\" port=\\"50000\\" address=\\"localhost\\">",
                          "<option name=\\"allowRunningInParallel\\" value=\\"false\\" />",
                          "<option name=\\"listenPortForConnections\\" value=\\"false\\" />",
                          "<option name=\\"pid\\" />",
                          "<option name=\\"projectPathOnTarget\\" />",
                          "<option name=\\"selectedOptions\\">",
                          "<list />",
                          "</option>",
                          "<method v=\\"2\\" />",
                          "</configuration>",
                          "<configuration name=\\"Attach to Unity Editor\\" type=\\"UNITY_DEBUG_RUN_CONFIGURATION\\" factoryName=\\"Unity Debug\\" show_console_on_std_err=\\"false\\" show_console_on_std_out=\\"false\\" port=\\"50000\\" address=\\"localhost\\" ignored-value-for-modified-check=\\"7588\\">",
                          "<option name=\\"allowRunningInParallel\\" value=\\"false\\" />",
                          "<option name=\\"listenPortForConnections\\" value=\\"false\\" />",
                          "<option name=\\"pid\\" value=\\"7588\\" />",
                          "<option name=\\"projectPathOnTarget\\" />",
                          "<option name=\\"selectedOptions\\">",
                          "<list />",
                          "</option>",
                          "<method v=\\"2\\" />",
                          "</configuration>",
                          "</component>",
                          "<component name=\\"SpellCheckerSettings\\" RuntimeDictionaries=\\"0\\" Folders=\\"0\\" CustomDictionaries=\\"0\\" DefaultDictionary=\\"application-level\\" UseSingleDictionary=\\"true\\" transferred=\\"true\\" />",
                          "<component name=\\"TaskManager\\">",
                          "<task active=\\"true\\" id=\\"Default\\" summary=\\"Default task\\">",
                          "<changelist id=\\"4faabe1f-624b-4170-b7ba-41bdca9b88e8\\" name=\\"Changes\\" comment=\\"\\" />",
                          "<created>1688129539547</created>",
                          "<option name=\\"number\\" value=\\"Default\\" />",
                          "<option name=\\"presentableId\\" value=\\"Default\\" />",
                          "<updated>1688129539547</updated>",
                          "<workItem from=\\"1688129539651\\" duration=\\"180000\\" />",
                          "<workItem from=\\"1688129755128\\" duration=\\"7414000\\" />",
                          "<workItem from=\\"1688369767033\\" duration=\\"20931000\\" />",
                          "<workItem from=\\"1688565713158\\" duration=\\"3871000\\" />",
                          "<workItem from=\\"1688598628203\\" duration=\\"1829000\\" />",
                          "<workItem from=\\"1688683463367\\" duration=\\"12348000\\" />",
                          "</task>",
                          "<servers />",
                          "</component>",
                          "<component name=\\"TypeScriptGeneratedFilesManager\\">",
                          "<option name=\\"version\\" value=\\"3\\" />",
                          "</component>",
                          "<component name=\\"UnityCheckinConfiguration\\" checkUnsavedScenes=\\"true\\" />",
                          "<component name=\\"UnityProjectConfiguration\\" hasMinimizedUI=\\"true\\" />",
                          "<component name=\\"UnityUnitTestConfiguration\\" currentTestLauncher=\\"EditMode\\" />",
                          "<component name=\\"Vcs.Log.Tabs.Properties\\">",
                          "<option name=\\"TAB_STATES\\">",
                          "<map>",
                          "<entry key=\\"MAIN\\">",
                          "<value>",
                          "<State />",
                          "</value>",
                          "</entry>",
                          "</map>",
                          "</option>",
                          "</component>",
                          "<component name=\\"VcsManagerConfiguration\\">",
                          "<option name=\\"CLEAR_INITIAL_COMMIT_MESSAGE\\" value=\\"true\\" />",
                          "</component>",
                          "<component name=\\"XDebuggerManager\\">",
                          "<breakpoint-manager>",
                          "<breakpoints>",
                          "<line-breakpoint enabled=\\"true\\" type=\\"DotNet Breakpoints\\">",
                          "<url>file://$PROJECT_DIR$/Assets/SolPlayLight/NftListPopup.cs</url>",
                          "<line>72</line>",
                          "<properties documentPath=\\"$PROJECT_DIR$/Assets/SolPlayLight/NftListPopup.cs\\" initialLine=\\"64\\" containingFunctionPresentation=\\"lambda expression inside method 'Open'\\">",
                          "<startOffsets>",
                          "<option value=\\"2380\\" />",
                          "</startOffsets>",
                          "<endOffsets>",
                          "<option value=\\"2388\\" />",
                          "</endOffsets>",
                          "</properties>",
                          "<option name=\\"timeStamp\\" value=\\"5\\" />",
                          "</line-breakpoint>",
                          "</breakpoints>",
                          "</breakpoint-manager>",
                          "<pin-to-top-manager>",
                          "<pinned-members>",
                          "<PinnedItemInfo parentTag=\\"Type#Solana.Unity.SDK.Nft.NftImage\\" memberName=\\"file\\" />",
                          "</pinned-members>",
                          "</pin-to-top-manager>",
                          "</component>",
                          "</project>"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "Assets": {
            "path": "./unity/Lumberjack/Assets",
            "children": {
              "DOTween 4": {
                "path": "./unity/Lumberjack/Assets/DOTween 4",
                "children": {
                  "DOTween.XML": {
                    "path": "./unity/Lumberjack/Assets/DOTween 4/DOTween.XML",
                    "isBinary": false,
                    "content": [
                      "<?xml version=\\"1.0\\"?>",
                      "<doc>",
                      "<assembly>",
                      "<name>DOTween</name>",
                      "</assembly>",
                      "<members>",
                      "<member name=\\"T:DG.Tweening.AutoPlay\\">",
                      "<summary>",
                      "Types of autoPlay behaviours",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.AutoPlay.None\\">",
                      "<summary>No tween is automatically played</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.AutoPlay.AutoPlaySequences\\">",
                      "<summary>Only Sequences are automatically played</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.AutoPlay.AutoPlayTweeners\\">",
                      "<summary>Only Tweeners are automatically played</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.AutoPlay.All\\">",
                      "<summary>All tweens are automatically played</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.AxisConstraint\\">",
                      "<summary>",
                      "What axis to constrain in case of Vector tweens",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Core.ABSSequentiable.onStart\\">",
                      "<summary>Called the first time the tween is set in a playing state, after any eventual delay</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Core.DOGetter\`1\\">",
                      "<summary>",
                      "Used in place of <c>System.Func</c>, which is not available in mscorlib.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Core.DOSetter\`1\\">",
                      "<summary>",
                      "Used in place of <c>System.Action</c>.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Core.Debugger\\">",
                      "<summary>",
                      "Public so it can be used by lose scripts related to DOTween (like DOTweenAnimation)",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Core.DOTweenComponent\\">",
                      "<summary>",
                      "Used to separate DOTween class from the MonoBehaviour instance (in order to use static constructors on DOTween).",
                      "Contains all instance-based methods",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Core.DOTweenComponent.inspectorUpdater\\">",
                      "<summary>Used internally inside Unity Editor, as a trick to update DOTween's inspector at every frame</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Core.DOTweenComponent.SetCapacity(System.Int32,System.Int32)\\">",
                      "<summary>",
                      "Directly sets the current max capacity of Tweeners and Sequences",
                      "(meaning how many Tweeners and Sequences can be running at the same time),",
                      "so that DOTween doesn't need to automatically increase them in case the max is reached",
                      "(which might lead to hiccups when that happens).",
                      "Sequences capacity must be less or equal to Tweeners capacity",
                      "(if you pass a low Tweener capacity it will be automatically increased to match the Sequence's).",
                      "Beware: use this method only when there are no tweens running.",
                      "</summary>",
                      "<param name=\\"tweenersCapacity\\">Max Tweeners capacity.",
                      "Default: 200</param>",
                      "<param name=\\"sequencesCapacity\\">Max Sequences capacity.",
                      "Default: 50</param>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Core.Easing.Bounce\\">",
                      "<summary>",
                      "This class contains a C# port of the easing equations created by Robert Penner (http://robertpenner.com/easing).",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Core.Easing.Bounce.EaseIn(System.Single,System.Single,System.Single,System.Single)\\">",
                      "<summary>",
                      "Easing equation function for a bounce (exponentially decaying parabolic bounce) easing in: accelerating from zero velocity.",
                      "</summary>",
                      "<param name=\\"time\\">",
                      "Current time (in frames or seconds).",
                      "</param>",
                      "<param name=\\"duration\\">",
                      "Expected easing duration (in frames or seconds).",
                      "</param>",
                      "<param name=\\"unusedOvershootOrAmplitude\\">Unused: here to keep same delegate for all ease types.</param>",
                      "<param name=\\"unusedPeriod\\">Unused: here to keep same delegate for all ease types.</param>",
                      "<returns>",
                      "The eased value.",
                      "</returns>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Core.Easing.Bounce.EaseOut(System.Single,System.Single,System.Single,System.Single)\\">",
                      "<summary>",
                      "Easing equation function for a bounce (exponentially decaying parabolic bounce) easing out: decelerating from zero velocity.",
                      "</summary>",
                      "<param name=\\"time\\">",
                      "Current time (in frames or seconds).",
                      "</param>",
                      "<param name=\\"duration\\">",
                      "Expected easing duration (in frames or seconds).",
                      "</param>",
                      "<param name=\\"unusedOvershootOrAmplitude\\">Unused: here to keep same delegate for all ease types.</param>",
                      "<param name=\\"unusedPeriod\\">Unused: here to keep same delegate for all ease types.</param>",
                      "<returns>",
                      "The eased value.",
                      "</returns>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Core.Easing.Bounce.EaseInOut(System.Single,System.Single,System.Single,System.Single)\\">",
                      "<summary>",
                      "Easing equation function for a bounce (exponentially decaying parabolic bounce) easing in/out: acceleration until halfway, then deceleration.",
                      "</summary>",
                      "<param name=\\"time\\">",
                      "Current time (in frames or seconds).",
                      "</param>",
                      "<param name=\\"duration\\">",
                      "Expected easing duration (in frames or seconds).",
                      "</param>",
                      "<param name=\\"unusedOvershootOrAmplitude\\">Unused: here to keep same delegate for all ease types.</param>",
                      "<param name=\\"unusedPeriod\\">Unused: here to keep same delegate for all ease types.</param>",
                      "<returns>",
                      "The eased value.",
                      "</returns>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Core.Easing.EaseManager.Evaluate(DG.Tweening.Tween,System.Single,System.Single,System.Single,System.Single)\\">",
                      "<summary>",
                      "Returns a value between 0 and 1 (inclusive) based on the elapsed time and ease selected",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Core.Easing.EaseManager.Evaluate(DG.Tweening.Ease,DG.Tweening.EaseFunction,System.Single,System.Single,System.Single,System.Single)\\">",
                      "<summary>",
                      "Returns a value between 0 and 1 (inclusive) based on the elapsed time and ease selected",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Core.Easing.EaseCurve\\">",
                      "<summary>",
                      "Used to interpret AnimationCurves as eases.",
                      "Public so it can be used by external ease factories",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Core.Enums.NestedTweenFailureBehaviour\\">",
                      "<summary>",
                      "Behaviour in case a tween nested inside a Sequence fails and is captured by safe mode",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Core.Enums.NestedTweenFailureBehaviour.TryToPreserveSequence\\">",
                      "<summary>If the Sequence contains other elements, kill the failed tween but preserve the rest</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Core.Enums.NestedTweenFailureBehaviour.KillWholeSequence\\">",
                      "<summary>Kill the whole Sequence</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Core.Enums.SafeModeLogBehaviour\\">",
                      "<summary>",
                      "Log types thrown by errors captured and prevented by safe mode",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Core.Enums.SafeModeLogBehaviour.None\\">",
                      "<summary>No logs. NOT RECOMMENDED</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Core.Enums.SafeModeLogBehaviour.Normal\\">",
                      "<summary>Throw a normal log</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Core.Enums.SafeModeLogBehaviour.Warning\\">",
                      "<summary>Throw a warning log (default)</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Core.Enums.SafeModeLogBehaviour.Error\\">",
                      "<summary>Throw an error log</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Core.Enums.UpdateNotice\\">",
                      "<summary>",
                      "Additional notices passed to plugins when updating.",
                      "Public so it can be used by custom plugins. Internally, only PathPlugin uses it",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Core.Enums.UpdateNotice.None\\">",
                      "<summary>",
                      "None",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Core.Enums.UpdateNotice.RewindStep\\">",
                      "<summary>",
                      "Lets the plugin know that we restarted or rewinded",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Core.Enums.RewindCallbackMode\\">",
                      "<summary>",
                      "OnRewind callback behaviour (can only be set via DOTween's Utility Panel)",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Core.Enums.RewindCallbackMode.FireIfPositionChanged\\">",
                      "<summary>",
                      "When calling Rewind or PlayBackwards/SmoothRewind, OnRewind callbacks will be fired only if the tween isn't already rewinded",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Core.Enums.RewindCallbackMode.FireAlwaysWithRewind\\">",
                      "<summary>",
                      "When calling Rewind, OnRewind callbacks will always be fired, even if the tween is already rewinded.",
                      "When calling PlayBackwards/SmoothRewind instead, OnRewind callbacks will be fired only if the tween isn't already rewinded",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Core.Enums.RewindCallbackMode.FireAlways\\">",
                      "<summary>",
                      "When calling Rewind or PlayBackwards/SmoothRewind, OnRewind callbacks will always be fired, even if the tween is already rewinded",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Core.Extensions\\">",
                      "<summary>",
                      "Public only so custom shortcuts can access some of these methods",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Core.Extensions.SetSpecialStartupMode\`\`1(\`\`0,DG.Tweening.Core.Enums.SpecialStartupMode)\\">",
                      "<summary>",
                      "INTERNAL: used by DO shortcuts and Modules to set special startup mode",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Core.Extensions.Blendable\`\`3(DG.Tweening.Core.TweenerCore{\`\`0,\`\`1,\`\`2})\\">",
                      "<summary>",
                      "INTERNAL: used by DO shortcuts and Modules to set the tween as blendable",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Core.Extensions.NoFrom\`\`3(DG.Tweening.Core.TweenerCore{\`\`0,\`\`1,\`\`2})\\">",
                      "<summary>",
                      "INTERNAL: used by DO shortcuts and Modules to prevent a tween from using a From setup even if passed",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Core.DOTweenExternalCommand\\">",
                      "<summary>",
                      "Used to dispatch commands that need to be captured externally, usually by Modules",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Core.DOTweenUtils\\">",
                      "<summary>",
                      "Various utils",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Core.DOTweenUtils.Vector3FromAngle(System.Single,System.Single)\\">",
                      "<summary>",
                      "Returns a Vector3 with z = 0",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Core.DOTweenUtils.Angle2D(UnityEngine.Vector3,UnityEngine.Vector3)\\">",
                      "<summary>",
                      "Returns the 2D angle between two vectors",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Core.DOTweenUtils.GetPointOnCircle(UnityEngine.Vector2,System.Single,System.Single)\\">",
                      "<summary>",
                      "Returns a point on a circle with the given center and radius,",
                      "using Unity's circle coordinates (0° points up and increases clockwise)",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Core.DOTweenUtils.Vector3AreApproximatelyEqual(UnityEngine.Vector3,UnityEngine.Vector3)\\">",
                      "<summary>",
                      "Uses approximate equality on each axis instead of Unity's Vector3 equality,",
                      "because the latter fails (in some cases) when assigning a Vector3 to a transform.position and then checking it.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Core.DOTweenUtils.GetLooseScriptType(System.String)\\">",
                      "<summary>",
                      "Looks for the type within all possible project assembly names",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Core.TweenerCore\`3.ChangeStartValue(\`1,System.Single)\\">",
                      "<summary>NO-GC METHOD: changes the start value of a tween and rewinds it (without pausing it).",
                      "Has no effect with tweens that are inside Sequences</summary>",
                      "<param name=\\"newStartValue\\">The new start value</param>",
                      "<param name=\\"newDuration\\">If bigger than 0 applies it as the new tween duration</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Core.TweenerCore\`3.ChangeEndValue(\`1,System.Boolean)\\">",
                      "<summary>NO-GC METHOD: changes the end value of a tween and rewinds it (without pausing it).",
                      "Has no effect with tweens that are inside Sequences</summary>",
                      "<param name=\\"newEndValue\\">The new end value</param>",
                      "<param name=\\"snapStartValue\\">If TRUE the start value will become the current target's value, otherwise it will stay the same</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Core.TweenerCore\`3.ChangeEndValue(\`1,System.Single,System.Boolean)\\">",
                      "<summary>NO-GC METHOD: changes the end value of a tween and rewinds it (without pausing it).",
                      "Has no effect with tweens that are inside Sequences</summary>",
                      "<param name=\\"newEndValue\\">The new end value</param>",
                      "<param name=\\"newDuration\\">If bigger than 0 applies it as the new tween duration</param>",
                      "<param name=\\"snapStartValue\\">If TRUE the start value will become the current target's value, otherwise it will stay the same</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Core.TweenerCore\`3.ChangeValues(\`1,\`1,System.Single)\\">",
                      "<summary>NO-GC METHOD: changes the start and end value of a tween and rewinds it (without pausing it).",
                      "Has no effect with tweens that are inside Sequences</summary>",
                      "<param name=\\"newStartValue\\">The new start value</param>",
                      "<param name=\\"newEndValue\\">The new end value</param>",
                      "<param name=\\"newDuration\\">If bigger than 0 applies it as the new tween duration</param>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Color2\\">",
                      "<summary>",
                      "Struct that stores two colors (used for LineRenderer tweens)",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.TweenCallback\\">",
                      "<summary>",
                      "Used for tween callbacks",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.TweenCallback\`1\\">",
                      "<summary>",
                      "Used for tween callbacks",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.EaseFunction\\">",
                      "<summary>",
                      "Used for custom and animationCurve-based ease functions. Must return a value between 0 and 1.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.CustomPlugins.PureQuaternionPlugin\\">",
                      "<summary>",
                      "Straight Quaternion plugin. Instead of using Vector3 values accepts Quaternion values directly.",
                      "<para>Beware: doesn't work with LoopType.Incremental (neither directly nor if inside a LoopType.Incremental Sequence).</para>",
                      "<para>To use it, call DOTween.To with the plugin parameter overload, passing it <c>PureQuaternionPlugin.Plug()</c> as first parameter",
                      "(do not use any of the other public PureQuaternionPlugin methods):</para>",
                      "<code>DOTween.To(PureQuaternionPlugin.Plug(), ()=> myQuaternionProperty, x=> myQuaternionProperty = x, myQuaternionEndValue, duration);</code>",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.CustomPlugins.PureQuaternionPlugin.Plug\\">",
                      "<summary>",
                      "Plug this plugin inside a DOTween.To call.",
                      "<para>Example:</para>",
                      "<code>DOTween.To(PureQuaternionPlugin.Plug(), ()=> myQuaternionProperty, x=> myQuaternionProperty = x, myQuaternionEndValue, duration);</code>",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.CustomPlugins.PureQuaternionPlugin.Reset(DG.Tweening.Core.TweenerCore{UnityEngine.Quaternion,UnityEngine.Quaternion,DG.Tweening.Plugins.Options.NoOptions})\\">",
                      "<summary>INTERNAL: do not use</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.CustomPlugins.PureQuaternionPlugin.SetFrom(DG.Tweening.Core.TweenerCore{UnityEngine.Quaternion,UnityEngine.Quaternion,DG.Tweening.Plugins.Options.NoOptions},System.Boolean)\\">",
                      "<summary>INTERNAL: do not use</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.CustomPlugins.PureQuaternionPlugin.SetFrom(DG.Tweening.Core.TweenerCore{UnityEngine.Quaternion,UnityEngine.Quaternion,DG.Tweening.Plugins.Options.NoOptions},UnityEngine.Quaternion,System.Boolean,System.Boolean)\\">",
                      "<summary>INTERNAL: do not use</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.CustomPlugins.PureQuaternionPlugin.ConvertToStartValue(DG.Tweening.Core.TweenerCore{UnityEngine.Quaternion,UnityEngine.Quaternion,DG.Tweening.Plugins.Options.NoOptions},UnityEngine.Quaternion)\\">",
                      "<summary>INTERNAL: do not use</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.CustomPlugins.PureQuaternionPlugin.SetRelativeEndValue(DG.Tweening.Core.TweenerCore{UnityEngine.Quaternion,UnityEngine.Quaternion,DG.Tweening.Plugins.Options.NoOptions})\\">",
                      "<summary>INTERNAL: do not use</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.CustomPlugins.PureQuaternionPlugin.SetChangeValue(DG.Tweening.Core.TweenerCore{UnityEngine.Quaternion,UnityEngine.Quaternion,DG.Tweening.Plugins.Options.NoOptions})\\">",
                      "<summary>INTERNAL: do not use</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.CustomPlugins.PureQuaternionPlugin.GetSpeedBasedDuration(DG.Tweening.Plugins.Options.NoOptions,System.Single,UnityEngine.Quaternion)\\">",
                      "<summary>INTERNAL: do not use</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.CustomPlugins.PureQuaternionPlugin.EvaluateAndApply(DG.Tweening.Plugins.Options.NoOptions,DG.Tweening.Tween,System.Boolean,DG.Tweening.Core.DOGetter{UnityEngine.Quaternion},DG.Tweening.Core.DOSetter{UnityEngine.Quaternion},System.Single,UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single,System.Boolean,System.Int32,DG.Tweening.Core.Enums.UpdateNotice)\\">",
                      "<summary>INTERNAL: do not use</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.DOCurve\\">",
                      "<summary>",
                      "Extra non-tweening-related curve methods",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.DOCurve.CubicBezier\\">",
                      "<summary>",
                      "Cubic bezier curve methods",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOCurve.CubicBezier.GetPointOnSegment(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)\\">",
                      "<summary>",
                      "Calculates a point along the given Cubic Bezier segment-curve.<para/>",
                      "</summary>",
                      "<param name=\\"startPoint\\">Segment start point</param>",
                      "<param name=\\"startControlPoint\\">Start point's control point/handle</param>",
                      "<param name=\\"endPoint\\">Segment end point</param>",
                      "<param name=\\"endControlPoint\\">End point's control point/handle</param>",
                      "<param name=\\"factor\\">0-1 percentage along which to retrieve point</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOCurve.CubicBezier.GetSegmentPointCloud(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Int32)\\">",
                      "<summary>",
                      "Returns an array containing a series of points along the given Cubic Bezier segment-curve.<para/>",
                      "</summary>",
                      "<param name=\\"startPoint\\">Start point</param>",
                      "<param name=\\"startControlPoint\\">Start point's control point/handle</param>",
                      "<param name=\\"endPoint\\">End point</param>",
                      "<param name=\\"endControlPoint\\">End point's control point/handle</param>",
                      "<param name=\\"resolution\\">Cloud resolution (min: 2)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOCurve.CubicBezier.GetSegmentPointCloud(System.Collections.Generic.List{UnityEngine.Vector3},UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Int32)\\">",
                      "<summary>",
                      "Calculates a series of points along the given Cubic Bezier segment-curve and adds them to the given list.<para/>",
                      "</summary>",
                      "<param name=\\"startPoint\\">Start point</param>",
                      "<param name=\\"startControlPoint\\">Start point's control point/handle</param>",
                      "<param name=\\"endPoint\\">End point</param>",
                      "<param name=\\"endControlPoint\\">End point's control point/handle</param>",
                      "<param name=\\"resolution\\">Cloud resolution (min: 2)</param>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.DOTween\\">",
                      "<summary>",
                      "Main DOTween class. Contains static methods to create and control tweens in a generic way",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.Version\\">",
                      "<summary>DOTween's version</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.useSafeMode\\">",
                      "<summary>If TRUE (default) makes tweens slightly slower but safer, automatically taking care of a series of things",
                      "(like targets becoming null while a tween is playing).",
                      "<para>Default: TRUE</para></summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.safeModeLogBehaviour\\">",
                      "<summary>Log type when safe mode reports capturing an error and preventing it</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.nestedTweenFailureBehaviour\\">",
                      "<summary>Behaviour in case a tween nested inside a Sequence fails (and is caught by safe mode).",
                      "<para>Default: NestedTweenFailureBehaviour.TryToPreserveSequence</para></summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.showUnityEditorReport\\">",
                      "<summary>If TRUE you will get a DOTween report when exiting play mode (only in the Editor).",
                      "Useful to know how many max Tweeners and Sequences you reached and optimize your final project accordingly.",
                      "Beware, this will slightly slow down your tweens while inside Unity Editor.",
                      "<para>Default: FALSE</para></summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.timeScale\\">",
                      "<summary>Global DOTween global timeScale (default: 1).<para/>",
                      "The final timeScale of a non-timeScaleIndependent tween is:<para/>",
                      "<code>Unity's Time.timeScale * DOTween.timeScale * tween.timeScale</code><para/>",
                      "while the final timeScale of a timeScaleIndependent tween is:<para/>",
                      "<code>DOTween.unscaledTimeScale * DOTween.timeScale * tween.timeScale</code></summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.unscaledTimeScale\\">",
                      "<summary>DOTween timeScale applied only to timeScaleIndependent tweens (default: 1).<para/>",
                      "The final timeScale of a timeScaleIndependent tween is:<para/>",
                      "<code>DOTween.unscaledTimeScale * DOTween.timeScale * tween.timeScale</code></summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.useSmoothDeltaTime\\">",
                      "<summary>If TRUE, DOTween will use Time.smoothDeltaTime instead of Time.deltaTime for UpdateType.Normal and UpdateType.Late tweens",
                      "(unless they're set as timeScaleIndependent, in which case a value between the last timestep",
                      "and <see cref=\\"F:DG.Tweening.DOTween.maxSmoothUnscaledTime\\"/> will be used instead).",
                      "Setting this to TRUE will lead to smoother animations.",
                      "<para>Default: FALSE</para></summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.maxSmoothUnscaledTime\\">",
                      "<summary>If <see cref=\\"F:DG.Tweening.DOTween.useSmoothDeltaTime\\"/> is TRUE, this indicates the max timeStep that an independent update call can last.",
                      "Setting this to TRUE will lead to smoother animations.",
                      "<para>Default: FALSE</para></summary>",
                      "</member>",
                      "<member name=\\"P:DG.Tweening.DOTween.logBehaviour\\">",
                      "<summary>DOTween's log behaviour.",
                      "<para>Default: LogBehaviour.ErrorsOnly</para></summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.onWillLog\\">",
                      "<summary>Used to intercept DOTween's logs. If this method isn't NULL, DOTween will call it before writing a log via Unity's own Debug log methods.<para/>",
                      "Return TRUE if you want DOTween to proceed with the log, FALSE otherwise.<para/>",
                      "This method must return a <code>bool</code> and accept two parameters:<para/>",
                      "- <code>LogType</code>: the type of Unity log that DOTween is trying to log<para/>",
                      "- <code>object</code>: the log message that DOTween wants to log</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.drawGizmos\\">",
                      "<summary>If TRUE draws path gizmos in Unity Editor (if the gizmos button is active).",
                      "Deactivate this if you want to avoid gizmos overhead while in Unity Editor</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.debugMode\\">",
                      "<summary>If TRUE activates various debug options</summary>",
                      "</member>",
                      "<member name=\\"P:DG.Tweening.DOTween.debugStoreTargetId\\">",
                      "<summary>Stores the target id so it can be used to give more info in case of safeMode error capturing.",
                      "Only active if both <code>debugMode</code> and <code>useSafeMode</code> are TRUE</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.defaultUpdateType\\">",
                      "<summary>Default updateType for new tweens.",
                      "<para>Default: UpdateType.Normal</para></summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.defaultTimeScaleIndependent\\">",
                      "<summary>Sets whether Unity's timeScale should be taken into account by default or not.",
                      "<para>Default: false</para></summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.defaultAutoPlay\\">",
                      "<summary>Default autoPlay behaviour for new tweens.",
                      "<para>Default: AutoPlay.All</para></summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.defaultAutoKill\\">",
                      "<summary>Default autoKillOnComplete behaviour for new tweens.",
                      "<para>Default: TRUE</para></summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.defaultLoopType\\">",
                      "<summary>Default loopType applied to all new tweens.",
                      "<para>Default: LoopType.Restart</para></summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.defaultRecyclable\\">",
                      "<summary>If TRUE all newly created tweens are set as recyclable, otherwise not.",
                      "<para>Default: FALSE</para></summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.defaultEaseType\\">",
                      "<summary>Default ease applied to all new Tweeners (not to Sequences which always have Ease.Linear as default).",
                      "<para>Default: Ease.InOutQuad</para></summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.defaultEaseOvershootOrAmplitude\\">",
                      "<summary>Default overshoot/amplitude used for eases",
                      "<para>Default: 1.70158f</para></summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.defaultEasePeriod\\">",
                      "<summary>Default period used for eases",
                      "<para>Default: 0</para></summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.DOTween.instance\\">",
                      "<summary>Used internally. Assigned/removed by DOTweenComponent.Create/DestroyInstance</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.Init(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{DG.Tweening.LogBehaviour})\\">",
                      "<summary>",
                      "Must be called once, before the first ever DOTween call/reference,",
                      "otherwise it will be called automatically and will use default options.",
                      "Calling it a second time won't have any effect.",
                      "<para>You can chain <code>SetCapacity</code> to this method, to directly set the max starting size of Tweeners and Sequences:</para>",
                      "<code>DOTween.Init(false, false, LogBehaviour.Default).SetCapacity(100, 20);</code>",
                      "</summary>",
                      "<param name=\\"recycleAllByDefault\\">If TRUE all new tweens will be set for recycling, meaning that when killed,",
                      "instead of being destroyed, they will be put in a pool and reused instead of creating new tweens. This option allows you to avoid",
                      "GC allocations by reusing tweens, but you will have to take care of tween references, since they might result active",
                      "even if they were killed (since they might have been respawned and are now being used for other tweens).",
                      "<para>If you want to automatically set your tween references to NULL when a tween is killed",
                      "you can use the OnKill callback like this:</para>",
                      "<code>.OnKill(()=> myTweenReference = null)</code>",
                      "<para>You can change this setting at any time by changing the static <see cref=\\"F:DG.Tweening.DOTween.defaultRecyclable\\"/> property,",
                      "or you can set the recycling behaviour for each tween separately, using:</para>",
                      "<para><code>SetRecyclable(bool recyclable)</code></para>",
                      "<para>Default: FALSE</para></param>",
                      "<param name=\\"useSafeMode\\">If TRUE makes tweens slightly slower but safer, automatically taking care of a series of things",
                      "(like targets becoming null while a tween is playing).",
                      "You can change this setting at any time by changing the static <see cref=\\"F:DG.Tweening.DOTween.useSafeMode\\"/> property.",
                      "<para>Default: FALSE</para></param>",
                      "<param name=\\"logBehaviour\\">Type of logging to use.",
                      "You can change this setting at any time by changing the static <see cref=\\"P:DG.Tweening.DOTween.logBehaviour\\"/> property.",
                      "<para>Default: ErrorsOnly</para></param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.SetTweensCapacity(System.Int32,System.Int32)\\">",
                      "<summary>",
                      "Directly sets the current max capacity of Tweeners and Sequences",
                      "(meaning how many Tweeners and Sequences can be running at the same time),",
                      "so that DOTween doesn't need to automatically increase them in case the max is reached",
                      "(which might lead to hiccups when that happens).",
                      "Sequences capacity must be less or equal to Tweeners capacity",
                      "(if you pass a low Tweener capacity it will be automatically increased to match the Sequence's).",
                      "Beware: use this method only when there are no tweens running.",
                      "</summary>",
                      "<param name=\\"tweenersCapacity\\">Max Tweeners capacity.",
                      "Default: 200</param>",
                      "<param name=\\"sequencesCapacity\\">Max Sequences capacity.",
                      "Default: 50</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.Clear(System.Boolean)\\">",
                      "<summary>",
                      "Kills all tweens, clears all cached tween pools and plugins and resets the max Tweeners/Sequences capacities to the default values.",
                      "</summary>",
                      "<param name=\\"destroy\\">If TRUE also destroys DOTween's gameObject and resets its initializiation, default settings and everything else",
                      "(so that next time you use it it will need to be re-initialized)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.ClearCachedTweens\\">",
                      "<summary>",
                      "Clears all cached tween pools.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.Validate\\">",
                      "<summary>",
                      "Checks all active tweens to find and remove eventually invalid ones (usually because their targets became NULL)",
                      "and returns the total number of invalid tweens found and removed.",
                      "IMPORTANT: this will cause an error on UWP platform, so don't use it there",
                      "BEWARE: this is a slightly expensive operation so use it with care",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.ManualUpdate(System.Single,System.Single)\\">",
                      "<summary>",
                      "Updates all tweens that are set to <see cref=\\"F:DG.Tweening.UpdateType.Manual\\"/>.",
                      "</summary>",
                      "<param name=\\"deltaTime\\">Manual deltaTime</param>",
                      "<param name=\\"unscaledDeltaTime\\">Unscaled delta time (used with tweens set as timeScaleIndependent)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{System.Single},DG.Tweening.Core.DOSetter{System.Single},System.Single,System.Single)\\">",
                      "<summary>Tweens a property or field to the given value using default plugins</summary>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The tween's duration</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{System.Double},DG.Tweening.Core.DOSetter{System.Double},System.Double,System.Single)\\">",
                      "<summary>Tweens a property or field to the given value using default plugins</summary>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The tween's duration</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{System.Int32},DG.Tweening.Core.DOSetter{System.Int32},System.Int32,System.Single)\\">",
                      "<summary>Tweens a property or field to the given value using default plugins</summary>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The tween's duration</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{System.UInt32},DG.Tweening.Core.DOSetter{System.UInt32},System.UInt32,System.Single)\\">",
                      "<summary>Tweens a property or field to the given value using default plugins</summary>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The tween's duration</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{System.Int64},DG.Tweening.Core.DOSetter{System.Int64},System.Int64,System.Single)\\">",
                      "<summary>Tweens a property or field to the given value using default plugins</summary>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The tween's duration</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{System.UInt64},DG.Tweening.Core.DOSetter{System.UInt64},System.UInt64,System.Single)\\">",
                      "<summary>Tweens a property or field to the given value using default plugins</summary>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The tween's duration</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{System.String},DG.Tweening.Core.DOSetter{System.String},System.String,System.Single)\\">",
                      "<summary>Tweens a property or field to the given value using default plugins</summary>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The tween's duration</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{UnityEngine.Vector2},DG.Tweening.Core.DOSetter{UnityEngine.Vector2},UnityEngine.Vector2,System.Single)\\">",
                      "<summary>Tweens a property or field to the given value using default plugins</summary>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The tween's duration</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{UnityEngine.Vector3},DG.Tweening.Core.DOSetter{UnityEngine.Vector3},UnityEngine.Vector3,System.Single)\\">",
                      "<summary>Tweens a property or field to the given value using default plugins</summary>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The tween's duration</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{UnityEngine.Vector4},DG.Tweening.Core.DOSetter{UnityEngine.Vector4},UnityEngine.Vector4,System.Single)\\">",
                      "<summary>Tweens a property or field to the given value using default plugins</summary>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The tween's duration</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{UnityEngine.Quaternion},DG.Tweening.Core.DOSetter{UnityEngine.Quaternion},UnityEngine.Vector3,System.Single)\\">",
                      "<summary>Tweens a property or field to the given value using default plugins</summary>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The tween's duration</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{UnityEngine.Color},DG.Tweening.Core.DOSetter{UnityEngine.Color},UnityEngine.Color,System.Single)\\">",
                      "<summary>Tweens a property or field to the given value using default plugins</summary>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The tween's duration</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{UnityEngine.Rect},DG.Tweening.Core.DOSetter{UnityEngine.Rect},UnityEngine.Rect,System.Single)\\">",
                      "<summary>Tweens a property or field to the given value using default plugins</summary>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The tween's duration</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOGetter{UnityEngine.RectOffset},DG.Tweening.Core.DOSetter{UnityEngine.RectOffset},UnityEngine.RectOffset,System.Single)\\">",
                      "<summary>Tweens a property or field to the given value using default plugins</summary>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The tween's duration</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.To\`\`3(DG.Tweening.Plugins.Core.ABSTweenPlugin{\`\`0,\`\`1,\`\`2},DG.Tweening.Core.DOGetter{\`\`0},DG.Tweening.Core.DOSetter{\`\`0},\`\`1,System.Single)\\">",
                      "<summary>Tweens a property or field to the given value using a custom plugin</summary>",
                      "<param name=\\"plugin\\">The plugin to use. Each custom plugin implements a static <code>Get()</code> method",
                      "you'll need to call to assign the correct plugin in the correct way, like this:",
                      "<para><code>CustomPlugin.Get()</code></para></param>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The tween's duration</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.ToAxis(DG.Tweening.Core.DOGetter{UnityEngine.Vector3},DG.Tweening.Core.DOSetter{UnityEngine.Vector3},System.Single,System.Single,DG.Tweening.AxisConstraint)\\">",
                      "<summary>Tweens only one axis of a Vector3 to the given value using default plugins.</summary>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The tween's duration</param>",
                      "<param name=\\"axisConstraint\\">The axis to tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.ToAlpha(DG.Tweening.Core.DOGetter{UnityEngine.Color},DG.Tweening.Core.DOSetter{UnityEngine.Color},System.Single,System.Single)\\">",
                      "<summary>Tweens only the alpha of a Color to the given value using default plugins</summary>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The tween's duration</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.To(DG.Tweening.Core.DOSetter{System.Single},System.Single,System.Single,System.Single)\\">",
                      "<summary>Tweens a virtual property from the given start to the given end value",
                      "and implements a setter that allows to use that value with an external method or a lambda",
                      "<para>Example:</para>",
                      "<code>To(MyMethod, 0, 12, 0.5f);</code>",
                      "<para>Where MyMethod is a function that accepts a float parameter (which will be the result of the virtual tween)</para></summary>",
                      "<param name=\\"setter\\">The action to perform with the tweened value</param>",
                      "<param name=\\"startValue\\">The value to start from</param>",
                      "<param name=\\"endValue\\">The end value to reach</param>",
                      "<param name=\\"duration\\">The duration of the virtual tween",
                      "</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.Punch(DG.Tweening.Core.DOGetter{UnityEngine.Vector3},DG.Tweening.Core.DOSetter{UnityEngine.Vector3},UnityEngine.Vector3,System.Single,System.Int32,System.Single)\\">",
                      "<summary>Punches a Vector3 towards the given direction and then back to the starting one",
                      "as if it was connected to the starting position via an elastic.",
                      "<para>This tween type generates some GC allocations at startup</para></summary>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"direction\\">The direction and strength of the punch</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"vibrato\\">Indicates how much will the punch vibrate</param>",
                      "<param name=\\"elasticity\\">Represents how much (0 to 1) the vector will go beyond the starting position when bouncing backwards.",
                      "1 creates a full oscillation between the direction and the opposite decaying direction,",
                      "while 0 oscillates only between the starting position and the decaying direction</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.Shake(DG.Tweening.Core.DOGetter{UnityEngine.Vector3},DG.Tweening.Core.DOSetter{UnityEngine.Vector3},System.Single,System.Single,System.Int32,System.Single,System.Boolean,System.Boolean,DG.Tweening.ShakeRandomnessMode)\\">",
                      "<summary>Shakes a Vector3 with the given values.</summary>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"strength\\">The shake strength</param>",
                      "<param name=\\"vibrato\\">Indicates how much will the shake vibrate</param>",
                      "<param name=\\"randomness\\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware).",
                      "Setting it to 0 will shake along a single direction and behave like a random punch.</param>",
                      "<param name=\\"ignoreZAxis\\">If TRUE only shakes on the X Y axis (looks better with things like cameras).</param>",
                      "<param name=\\"fadeOut\\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>",
                      "<param name=\\"randomnessMode\\">Randomness mode</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.Shake(DG.Tweening.Core.DOGetter{UnityEngine.Vector3},DG.Tweening.Core.DOSetter{UnityEngine.Vector3},System.Single,UnityEngine.Vector3,System.Int32,System.Single,System.Boolean,DG.Tweening.ShakeRandomnessMode)\\">",
                      "<summary>Shakes a Vector3 with the given values.</summary>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"strength\\">The shake strength on each axis</param>",
                      "<param name=\\"vibrato\\">Indicates how much will the shake vibrate</param>",
                      "<param name=\\"randomness\\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware).",
                      "Setting it to 0 will shake along a single direction and behave like a random punch.</param>",
                      "<param name=\\"fadeOut\\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>",
                      "<param name=\\"randomnessMode\\">Randomness mode</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.ToArray(DG.Tweening.Core.DOGetter{UnityEngine.Vector3},DG.Tweening.Core.DOSetter{UnityEngine.Vector3},UnityEngine.Vector3[],System.Single[])\\">",
                      "<summary>Tweens a property or field to the given values using default plugins.",
                      "Ease is applied between each segment and not as a whole.",
                      "<para>This tween type generates some GC allocations at startup</para></summary>",
                      "<param name=\\"getter\\">A getter for the field or property to tween.",
                      "<para>Example usage with lambda:</para><code>()=> myProperty</code></param>",
                      "<param name=\\"setter\\">A setter for the field or property to tween",
                      "<para>Example usage with lambda:</para><code>x=> myProperty = x</code></param>",
                      "<param name=\\"endValues\\">The end values to reach for each segment. This array must have the same length as <code>durations</code></param>",
                      "<param name=\\"durations\\">The duration of each segment. This array must have the same length as <code>endValues</code></param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.Sequence\\">",
                      "<summary>",
                      "Returns a new <see cref=\\"T:DG.Tweening.Sequence\\"/> to be used for tween groups.<para/>",
                      "Mind that Sequences don't have a target applied automatically like Tweener creation shortcuts,",
                      "so if you want to be able to kill this Sequence when calling DOTween.Kill(target) you'll have to add",
                      "the target manually; you can do that directly by using the <see cref=\\"M:DG.Tweening.DOTween.Sequence(System.Object)\\"/> overload instead of this one",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.Sequence(System.Object)\\">",
                      "<summary>",
                      "Returns a new <see cref=\\"T:DG.Tweening.Sequence\\"/> to be used for tween groups, and allows to set a target",
                      "(because Sequences don't have their target set automatically like Tweener creation shortcuts).",
                      "That way killing/controlling tweens by target will apply to this Sequence too.",
                      "</summary>",
                      "<param name=\\"target\\">The target of the Sequence. Relevant only for static target-based methods like DOTween.Kill(target),",
                      "useless otherwise</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.CompleteAll(System.Boolean)\\">",
                      "<summary>Completes all tweens and returns the number of actual tweens completed",
                      "(meaning tweens that don't have infinite loops and were not already complete)</summary>",
                      "<param name=\\"withCallbacks\\">For Sequences only: if TRUE also internal Sequence callbacks will be fired,",
                      "otherwise they will be ignored</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.Complete(System.Object,System.Boolean)\\">",
                      "<summary>Completes all tweens with the given ID or target and returns the number of actual tweens completed",
                      "(meaning the tweens that don't have infinite loops and were not already complete)</summary>",
                      "<param name=\\"withCallbacks\\">For Sequences only: if TRUE internal Sequence callbacks will be fired,",
                      "otherwise they will be ignored</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.FlipAll\\">",
                      "<summary>Flips all tweens (changing their direction to forward if it was backwards and viceversa),",
                      "then returns the number of actual tweens flipped</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.Flip(System.Object)\\">",
                      "<summary>Flips the tweens with the given ID or target (changing their direction to forward if it was backwards and viceversa),",
                      "then returns the number of actual tweens flipped</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.GotoAll(System.Single,System.Boolean)\\">",
                      "<summary>Sends all tweens to the given position (calculating also eventual loop cycles) and returns the actual tweens involved</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.Goto(System.Object,System.Single,System.Boolean)\\">",
                      "<summary>Sends all tweens with the given ID or target to the given position (calculating also eventual loop cycles)",
                      "and returns the actual tweens involved</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.KillAll(System.Boolean)\\">",
                      "<summary>Kills all tweens and returns the number of actual tweens killed</summary>",
                      "<param name=\\"complete\\">If TRUE completes the tweens before killing them</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.KillAll(System.Boolean,System.Object[])\\">",
                      "<summary>Kills all tweens and returns the number of actual tweens killed</summary>",
                      "<param name=\\"complete\\">If TRUE completes the tweens before killing them</param>",
                      "<param name=\\"idsOrTargetsToExclude\\">Eventual IDs or targets to exclude from the killing</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.Kill(System.Object,System.Boolean)\\">",
                      "<summary>Kills all tweens with the given ID or target and returns the number of actual tweens killed</summary>",
                      "<param name=\\"complete\\">If TRUE completes the tweens before killing them</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.Kill(System.Object,System.Object,System.Boolean)\\">",
                      "<summary>Kills all tweens with the given target and the given ID, and returns the number of actual tweens killed</summary>",
                      "<param name=\\"complete\\">If TRUE completes the tweens before killing them</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.PauseAll\\">",
                      "<summary>Pauses all tweens and returns the number of actual tweens paused</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.Pause(System.Object)\\">",
                      "<summary>Pauses all tweens with the given ID or target and returns the number of actual tweens paused",
                      "(meaning the tweens that were actually playing and have been paused)</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.PlayAll\\">",
                      "<summary>Plays all tweens and returns the number of actual tweens played",
                      "(meaning tweens that were not already playing or complete)</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.Play(System.Object)\\">",
                      "<summary>Plays all tweens with the given ID or target and returns the number of actual tweens played",
                      "(meaning the tweens that were not already playing or complete)</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.Play(System.Object,System.Object)\\">",
                      "<summary>Plays all tweens with the given target and the given ID, and returns the number of actual tweens played",
                      "(meaning the tweens that were not already playing or complete)</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.PlayBackwardsAll\\">",
                      "<summary>Plays backwards all tweens and returns the number of actual tweens played",
                      "(meaning tweens that were not already started, playing backwards or rewinded)</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.PlayBackwards(System.Object)\\">",
                      "<summary>Plays backwards all tweens with the given ID or target and returns the number of actual tweens played",
                      "(meaning the tweens that were not already started, playing backwards or rewinded)</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.PlayBackwards(System.Object,System.Object)\\">",
                      "<summary>Plays backwards all tweens with the given target and ID and returns the number of actual tweens played",
                      "(meaning the tweens that were not already started, playing backwards or rewinded)</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.PlayForwardAll\\">",
                      "<summary>Plays forward all tweens and returns the number of actual tweens played",
                      "(meaning tweens that were not already playing forward or complete)</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.PlayForward(System.Object)\\">",
                      "<summary>Plays forward all tweens with the given ID or target and returns the number of actual tweens played",
                      "(meaning the tweens that were not already playing forward or complete)</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.PlayForward(System.Object,System.Object)\\">",
                      "<summary>Plays forward all tweens with the given target and ID and returns the number of actual tweens played",
                      "(meaning the tweens that were not already started, playing backwards or rewinded)</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.RestartAll(System.Boolean)\\">",
                      "<summary>Restarts all tweens, then returns the number of actual tweens restarted</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.Restart(System.Object,System.Boolean,System.Single)\\">",
                      "<summary>Restarts all tweens with the given ID or target, then returns the number of actual tweens restarted</summary>",
                      "<param name=\\"includeDelay\\">If TRUE includes the eventual tweens delays, otherwise skips them</param>",
                      "<param name=\\"changeDelayTo\\">If >= 0 changes the startup delay of all involved tweens to this value, otherwise doesn't touch it</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.Restart(System.Object,System.Object,System.Boolean,System.Single)\\">",
                      "<summary>Restarts all tweens with the given target and the given ID, and returns the number of actual tweens played",
                      "(meaning the tweens that were not already playing or complete)</summary>",
                      "<param name=\\"includeDelay\\">If TRUE includes the eventual tweens delays, otherwise skips them</param>",
                      "<param name=\\"changeDelayTo\\">If >= 0 changes the startup delay of all involved tweens to this value, otherwise doesn't touch it</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.RewindAll(System.Boolean)\\">",
                      "<summary>Rewinds and pauses all tweens, then returns the number of actual tweens rewinded",
                      "(meaning tweens that were not already rewinded)</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.Rewind(System.Object,System.Boolean)\\">",
                      "<summary>Rewinds and pauses all tweens with the given ID or target, then returns the number of actual tweens rewinded",
                      "(meaning the tweens that were not already rewinded)</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.SmoothRewindAll\\">",
                      "<summary>Smoothly rewinds all tweens (delays excluded), then returns the number of actual tweens rewinding/rewinded",
                      "(meaning tweens that were not already rewinded).",
                      "A \\"smooth rewind\\" animates the tween to its start position,",
                      "skipping all elapsed loops (except in case of LoopType.Incremental) while keeping the animation fluent.",
                      "<para>Note that a tween that was smoothly rewinded will have its play direction flipped</para></summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.SmoothRewind(System.Object)\\">",
                      "<summary>Smoothly rewinds all tweens (delays excluded) with the given ID or target, then returns the number of actual tweens rewinding/rewinded",
                      "(meaning the tweens that were not already rewinded).",
                      "A \\"smooth rewind\\" animates the tween to its start position,",
                      "skipping all elapsed loops (except in case of LoopType.Incremental) while keeping the animation fluent.",
                      "<para>Note that a tween that was smoothly rewinded will have its play direction flipped</para></summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.TogglePauseAll\\">",
                      "<summary>Toggles the play state of all tweens and returns the number of actual tweens toggled",
                      "(meaning tweens that could be played or paused, depending on the toggle state)</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.TogglePause(System.Object)\\">",
                      "<summary>Toggles the play state of all tweens with the given ID or target and returns the number of actual tweens toggled",
                      "(meaning the tweens that could be played or paused, depending on the toggle state)</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.IsTweening(System.Object,System.Boolean)\\">",
                      "<summary>",
                      "Returns TRUE if a tween with the given ID or target is active.",
                      "<para>You can also use this to know if a shortcut tween is active for a given target.</para>",
                      "<para>Example:</para>",
                      "<para><code>transform.DOMoveX(45, 1); // transform is automatically added as the tween target</code></para>",
                      "<para><code>DOTween.IsTweening(transform); // Returns true</code></para>",
                      "</summary>",
                      "<param name=\\"targetOrId\\">The target or ID to look for</param>",
                      "<param name=\\"alsoCheckIfIsPlaying\\">If FALSE (default) returns TRUE as long as a tween for the given target/ID is active,",
                      "otherwise also requires it to be playing</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.TotalActiveTweens\\">",
                      "<summary>",
                      "Returns the total number of active tweens (so both Tweeners and Sequences).",
                      "A tween is considered active if it wasn't killed, regardless if it's playing or paused",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.TotalActiveTweeners\\">",
                      "<summary>",
                      "Returns the total number of active Tweeners.",
                      "A Tweener is considered active if it wasn't killed, regardless if it's playing or paused",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.TotalActiveSequences\\">",
                      "<summary>",
                      "Returns the total number of active Sequences.",
                      "A Sequence is considered active if it wasn't killed, regardless if it's playing or paused",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.TotalPlayingTweens\\">",
                      "<summary>",
                      "Returns the total number of active and playing tweens.",
                      "A tween is considered as playing even if its delay is actually playing",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.TotalTweensById(System.Object,System.Boolean)\\">",
                      "<summary>",
                      "Returns a the total number of active tweens with the given id.",
                      "</summary>",
                      "<param name=\\"playingOnly\\">If TRUE returns only the tweens with the given ID that are currently playing</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.PlayingTweens(System.Collections.Generic.List{DG.Tweening.Tween})\\">",
                      "<summary>",
                      "Returns a list of all active tweens in a playing state.",
                      "Returns NULL if there are no active playing tweens.",
                      "<para>Beware: each time you call this method a new list is generated, so use it for debug only</para>",
                      "</summary>",
                      "<param name=\\"fillableList\\">If NULL creates a new list, otherwise clears and fills this one (and thus saves allocations)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.PausedTweens(System.Collections.Generic.List{DG.Tweening.Tween})\\">",
                      "<summary>",
                      "Returns a list of all active tweens in a paused state.",
                      "Returns NULL if there are no active paused tweens.",
                      "<para>Beware: each time you call this method a new list is generated, so use it for debug only</para>",
                      "</summary>",
                      "<param name=\\"fillableList\\">If NULL creates a new list, otherwise clears and fills this one (and thus saves allocations)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.TweensById(System.Object,System.Boolean,System.Collections.Generic.List{DG.Tweening.Tween})\\">",
                      "<summary>",
                      "Returns a list of all active tweens with the given id.",
                      "Returns NULL if there are no active tweens with the given id.",
                      "<para>Beware: each time you call this method a new list is generated</para>",
                      "</summary>",
                      "<param name=\\"playingOnly\\">If TRUE returns only the tweens with the given ID that are currently playing</param>",
                      "<param name=\\"fillableList\\">If NULL creates a new list, otherwise clears and fills this one (and thus saves allocations)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOTween.TweensByTarget(System.Object,System.Boolean,System.Collections.Generic.List{DG.Tweening.Tween})\\">",
                      "<summary>",
                      "Returns a list of all active tweens with the given target.",
                      "Returns NULL if there are no active tweens with the given target.",
                      "<para>Beware: each time you call this method a new list is generated</para>",
                      "<param name=\\"playingOnly\\">If TRUE returns only the tweens with the given target that are currently playing</param>",
                      "<param name=\\"fillableList\\">If NULL creates a new list, otherwise clears and fills this one (and thus saves allocations)</param>",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.DOVirtual\\">",
                      "<summary>",
                      "Creates virtual tweens that can be used to change other elements via their OnUpdate calls",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOVirtual.Float(System.Single,System.Single,System.Single,DG.Tweening.TweenCallback{System.Single})\\">",
                      "<summary>",
                      "Tweens a virtual float.",
                      "You can add regular settings to the generated tween,",
                      "but do not use <code>OnUpdate</code> or you will overwrite the onVirtualUpdate parameter",
                      "</summary>",
                      "<param name=\\"from\\">The value to start from</param>",
                      "<param name=\\"to\\">The value to tween to</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"onVirtualUpdate\\">A callback which must accept a parameter of type float, called at each update</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOVirtual.Int(System.Int32,System.Int32,System.Single,DG.Tweening.TweenCallback{System.Int32})\\">",
                      "<summary>",
                      "Tweens a virtual int.",
                      "You can add regular settings to the generated tween,",
                      "but do not use <code>OnUpdate</code> or you will overwrite the onVirtualUpdate parameter",
                      "</summary>",
                      "<param name=\\"from\\">The value to start from</param>",
                      "<param name=\\"to\\">The value to tween to</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"onVirtualUpdate\\">A callback which must accept a parameter of type int, called at each update</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOVirtual.Vector2(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,DG.Tweening.TweenCallback{UnityEngine.Vector2})\\">",
                      "<summary>",
                      "Tweens a virtual Vector2.",
                      "You can add regular settings to the generated tween,",
                      "but do not use <code>OnUpdate</code> or you will overwrite the onVirtualUpdate parameter",
                      "</summary>",
                      "<param name=\\"from\\">The value to start from</param>",
                      "<param name=\\"to\\">The value to tween to</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"onVirtualUpdate\\">A callback which must accept a parameter of type Vector3, called at each update</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOVirtual.Vector3(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,DG.Tweening.TweenCallback{UnityEngine.Vector3})\\">",
                      "<summary>",
                      "Tweens a virtual Vector3.",
                      "You can add regular settings to the generated tween,",
                      "but do not use <code>OnUpdate</code> or you will overwrite the onVirtualUpdate parameter",
                      "</summary>",
                      "<param name=\\"from\\">The value to start from</param>",
                      "<param name=\\"to\\">The value to tween to</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"onVirtualUpdate\\">A callback which must accept a parameter of type Vector3, called at each update</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOVirtual.Color(UnityEngine.Color,UnityEngine.Color,System.Single,DG.Tweening.TweenCallback{UnityEngine.Color})\\">",
                      "<summary>",
                      "Tweens a virtual Color.",
                      "You can add regular settings to the generated tween,",
                      "but do not use <code>OnUpdate</code> or you will overwrite the onVirtualUpdate parameter",
                      "</summary>",
                      "<param name=\\"from\\">The value to start from</param>",
                      "<param name=\\"to\\">The value to tween to</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"onVirtualUpdate\\">A callback which must accept a parameter of type Color, called at each update</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOVirtual.EasedValue(System.Single,System.Single,System.Single,DG.Tweening.Ease)\\">",
                      "<summary>Returns a value based on the given ease and lifetime percentage (0 to 1)</summary>",
                      "<param name=\\"from\\">The value to start from when lifetimePercentage is 0</param>",
                      "<param name=\\"to\\">The value to reach when lifetimePercentage is 1</param>",
                      "<param name=\\"lifetimePercentage\\">The time percentage (0 to 1) at which the value should be taken</param>",
                      "<param name=\\"easeType\\">The type of ease</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOVirtual.EasedValue(System.Single,System.Single,System.Single,DG.Tweening.Ease,System.Single)\\">",
                      "<summary>Returns a value based on the given ease and lifetime percentage (0 to 1)</summary>",
                      "<param name=\\"from\\">The value to start from when lifetimePercentage is 0</param>",
                      "<param name=\\"to\\">The value to reach when lifetimePercentage is 1</param>",
                      "<param name=\\"lifetimePercentage\\">The time percentage (0 to 1) at which the value should be taken</param>",
                      "<param name=\\"easeType\\">The type of ease</param>",
                      "<param name=\\"overshoot\\">Eventual overshoot to use with Back ease</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOVirtual.EasedValue(System.Single,System.Single,System.Single,DG.Tweening.Ease,System.Single,System.Single)\\">",
                      "<summary>Returns a value based on the given ease and lifetime percentage (0 to 1)</summary>",
                      "<param name=\\"from\\">The value to start from when lifetimePercentage is 0</param>",
                      "<param name=\\"to\\">The value to reach when lifetimePercentage is 1</param>",
                      "<param name=\\"lifetimePercentage\\">The time percentage (0 to 1) at which the value should be taken</param>",
                      "<param name=\\"easeType\\">The type of ease</param>",
                      "<param name=\\"amplitude\\">Eventual amplitude to use with Elastic easeType</param>",
                      "<param name=\\"period\\">Eventual period to use with Elastic easeType</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOVirtual.EasedValue(System.Single,System.Single,System.Single,UnityEngine.AnimationCurve)\\">",
                      "<summary>Returns a value based on the given ease and lifetime percentage (0 to 1)</summary>",
                      "<param name=\\"from\\">The value to start from when lifetimePercentage is 0</param>",
                      "<param name=\\"to\\">The value to reach when lifetimePercentage is 1</param>",
                      "<param name=\\"lifetimePercentage\\">The time percentage (0 to 1) at which the value should be taken</param>",
                      "<param name=\\"easeCurve\\">The AnimationCurve to use for ease</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOVirtual.EasedValue(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,DG.Tweening.Ease)\\">",
                      "<summary>Returns a value based on the given ease and lifetime percentage (0 to 1)</summary>",
                      "<param name=\\"from\\">The value to start from when lifetimePercentage is 0</param>",
                      "<param name=\\"to\\">The value to reach when lifetimePercentage is 1</param>",
                      "<param name=\\"lifetimePercentage\\">The time percentage (0 to 1) at which the value should be taken</param>",
                      "<param name=\\"easeType\\">The type of ease</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOVirtual.EasedValue(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,DG.Tweening.Ease,System.Single)\\">",
                      "<summary>Returns a value based on the given ease and lifetime percentage (0 to 1)</summary>",
                      "<param name=\\"from\\">The value to start from when lifetimePercentage is 0</param>",
                      "<param name=\\"to\\">The value to reach when lifetimePercentage is 1</param>",
                      "<param name=\\"lifetimePercentage\\">The time percentage (0 to 1) at which the value should be taken</param>",
                      "<param name=\\"easeType\\">The type of ease</param>",
                      "<param name=\\"overshoot\\">Eventual overshoot to use with Back ease</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOVirtual.EasedValue(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,DG.Tweening.Ease,System.Single,System.Single)\\">",
                      "<summary>Returns a value based on the given ease and lifetime percentage (0 to 1)</summary>",
                      "<param name=\\"from\\">The value to start from when lifetimePercentage is 0</param>",
                      "<param name=\\"to\\">The value to reach when lifetimePercentage is 1</param>",
                      "<param name=\\"lifetimePercentage\\">The time percentage (0 to 1) at which the value should be taken</param>",
                      "<param name=\\"easeType\\">The type of ease</param>",
                      "<param name=\\"amplitude\\">Eventual amplitude to use with Elastic easeType</param>",
                      "<param name=\\"period\\">Eventual period to use with Elastic easeType</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOVirtual.EasedValue(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.AnimationCurve)\\">",
                      "<summary>Returns a value based on the given ease and lifetime percentage (0 to 1)</summary>",
                      "<param name=\\"from\\">The value to start from when lifetimePercentage is 0</param>",
                      "<param name=\\"to\\">The value to reach when lifetimePercentage is 1</param>",
                      "<param name=\\"lifetimePercentage\\">The time percentage (0 to 1) at which the value should be taken</param>",
                      "<param name=\\"easeCurve\\">The AnimationCurve to use for ease</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.DOVirtual.DelayedCall(System.Single,DG.Tweening.TweenCallback,System.Boolean)\\">",
                      "<summary>Fires the given callback after the given time.</summary>",
                      "<param name=\\"delay\\">Callback delay</param>",
                      "<param name=\\"callback\\">Callback to fire when the delay has expired</param>",
                      "<param name=\\"ignoreTimeScale\\">If TRUE (default) ignores Unity's timeScale</param>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Ease.INTERNAL_Zero\\">",
                      "<summary>",
                      "Don't assign this! It's assigned automatically when creating 0 duration tweens",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Ease.INTERNAL_Custom\\">",
                      "<summary>",
                      "Don't assign this! It's assigned automatically when setting the ease to an AnimationCurve or to a custom ease function",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.EaseFactory\\">",
                      "<summary>",
                      "Allows to wrap ease method in special ways, adding extra features",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.EaseFactory.StopMotion(System.Int32,System.Nullable{DG.Tweening.Ease})\\">",
                      "<summary>",
                      "Converts the given ease so that it also creates a stop-motion effect, by playing the tween at the given FPS",
                      "</summary>",
                      "<param name=\\"motionFps\\">FPS at which the tween should be played</param>",
                      "<param name=\\"ease\\">Ease type</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.EaseFactory.StopMotion(System.Int32,UnityEngine.AnimationCurve)\\">",
                      "<summary>",
                      "Converts the given ease so that it also creates a stop-motion effect, by playing the tween at the given FPS",
                      "</summary>",
                      "<param name=\\"motionFps\\">FPS at which the tween should be played</param>",
                      "<param name=\\"animCurve\\">AnimationCurve to use for the ease</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.EaseFactory.StopMotion(System.Int32,DG.Tweening.EaseFunction)\\">",
                      "<summary>",
                      "Converts the given ease so that it also creates a stop-motion effect, by playing the tween at the given FPS",
                      "</summary>",
                      "<param name=\\"motionFps\\">FPS at which the tween should be played</param>",
                      "<param name=\\"customEase\\">Custom ease function to use</param>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.IDOTweenInit\\">",
                      "<summary>",
                      "Used to allow method chaining with DOTween.Init",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.IDOTweenInit.SetCapacity(System.Int32,System.Int32)\\">",
                      "<summary>",
                      "Directly sets the current max capacity of Tweeners and Sequences",
                      "(meaning how many Tweeners and Sequences can be running at the same time),",
                      "so that DOTween doesn't need to automatically increase them in case the max is reached",
                      "(which might lead to hiccups when that happens).",
                      "Sequences capacity must be less or equal to Tweeners capacity",
                      "(if you pass a low Tweener capacity it will be automatically increased to match the Sequence's).",
                      "Beware: use this method only when there are no tweens running.",
                      "</summary>",
                      "<param name=\\"tweenersCapacity\\">Max Tweeners capacity.",
                      "Default: 200</param>",
                      "<param name=\\"sequencesCapacity\\">Max Sequences capacity.",
                      "Default: 50</param>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.LinkBehaviour\\">",
                      "<summary>",
                      "Behaviour that can be assigned when chaining a SetLink to a tween",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.LinkBehaviour.PauseOnDisable\\">",
                      "<summary>Pauses the tween when the link target is disabled</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.LinkBehaviour.PauseOnDisablePlayOnEnable\\">",
                      "<summary>Pauses the tween when the link target is disabled, plays it when it's enabled</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.LinkBehaviour.PauseOnDisableRestartOnEnable\\">",
                      "<summary>Pauses the tween when the link target is disabled, restarts it when it's enabled</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.LinkBehaviour.PlayOnEnable\\">",
                      "<summary>Plays the tween when the link target is enabled</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.LinkBehaviour.RestartOnEnable\\">",
                      "<summary>Restarts the tween when the link target is enabled</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.LinkBehaviour.KillOnDisable\\">",
                      "<summary>Kills the tween when the link target is disabled</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.LinkBehaviour.KillOnDestroy\\">",
                      "<summary>Kills the tween when the link target is destroyed (becomes NULL). This is always active even if another behaviour is chosen</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.LinkBehaviour.CompleteOnDisable\\">",
                      "<summary>Completes the tween when the link target is disabled</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.LinkBehaviour.CompleteAndKillOnDisable\\">",
                      "<summary>Completes and kills the tween when the link target is disabled</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.LinkBehaviour.RewindOnDisable\\">",
                      "<summary>Rewinds the tween (delay excluded) when the link target is disabled</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.LinkBehaviour.RewindAndKillOnDisable\\">",
                      "<summary>Rewinds and kills the tween when the link target is disabled</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.PathMode\\">",
                      "<summary>",
                      "Path mode (used to determine correct LookAt orientation)",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.PathMode.Ignore\\">",
                      "<summary>Ignores the path mode (and thus LookAt behaviour)</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.PathMode.Full3D\\">",
                      "<summary>Regular 3D path</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.PathMode.TopDown2D\\">",
                      "<summary>2D top-down path</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.PathMode.Sidescroller2D\\">",
                      "<summary>2D side-scroller path</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.PathType\\">",
                      "<summary>",
                      "Type of path to use with DOPath tweens",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.PathType.Linear\\">",
                      "<summary>Linear, composed of straight segments between each waypoint</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.PathType.CatmullRom\\">",
                      "<summary>Curved path (which uses Catmull-Rom curves)</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.PathType.CubicBezier\\">",
                      "<summary><code>EXPERIMENTAL: </code>Curved path (which uses Cubic Bezier curves, where each point requires two extra control points)</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Plugins.CirclePlugin\\">",
                      "<summary>",
                      "Tweens a Vector2 along a circle.",
                      "EndValue represents the center of the circle, start and end value degrees are inside options",
                      "ChangeValue x is changeValue°, y is unused",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Plugins.Core.PathCore.ControlPoint\\">",
                      "<summary>",
                      "Path control point",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Plugins.Core.PathCore.Path.wps\\">",
                      "<summary>",
                      "Path waypoints (modified by PathPlugin when setting relative end/change value or by CubicBezierDecoder) and by DOTweenPathInspector",
                      "</summary>",
                      "</member>",
                      "<member name=\\"P:DG.Tweening.Plugins.Core.PathCore.Path.minInputWaypoints\\">",
                      "<summary>",
                      "Minimum input points necessary to create the path (doesn't correspond to actual waypoints required)",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Plugins.Core.PathCore.Path.GetPoint(System.Single,System.Boolean)\\">",
                      "<summary>",
                      "Gets the point on the path at the given percentage (0 to 1)",
                      "</summary>",
                      "<param name=\\"perc\\">The percentage (0 to 1) at which to get the point</param>",
                      "<param name=\\"convertToConstantPerc\\">If TRUE constant speed is taken into account, otherwise not</param>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Plugins.Options.IPlugOptions\\">",
                      "<summary>",
                      "Base interface for all tween plugins options",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Plugins.Options.IPlugOptions.Reset\\">",
                      "<summary>Resets the plugin</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Plugins.Vector3ArrayPlugin\\">",
                      "<summary>",
                      "This plugin generates some GC allocations at startup",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Plugins.PathPlugin\\">",
                      "<summary>",
                      "Path plugin works exclusively with Transforms",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.RotateMode\\">",
                      "<summary>",
                      "Rotation mode used with DORotate methods",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.RotateMode.Fast\\">",
                      "<summary>",
                      "Fastest way that never rotates beyond 360°",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.RotateMode.FastBeyond360\\">",
                      "<summary>",
                      "Fastest way that rotates beyond 360°",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.RotateMode.WorldAxisAdd\\">",
                      "<summary>",
                      "Adds the given rotation to the transform using world axis and an advanced precision mode",
                      "(like when using transform.Rotate(Space.World)).",
                      "<para>In this mode the end value is is always considered relative</para>",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.RotateMode.LocalAxisAdd\\">",
                      "<summary>",
                      "Adds the given rotation to the transform's local axis",
                      "(like when rotating an object with the \\"local\\" switch enabled in Unity's editor or using transform.Rotate(Space.Self)).",
                      "<para>In this mode the end value is is always considered relative</para>",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.ScrambleMode\\">",
                      "<summary>",
                      "Type of scramble to apply to string tweens",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.ScrambleMode.None\\">",
                      "<summary>",
                      "No scrambling of characters",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.ScrambleMode.All\\">",
                      "<summary>",
                      "A-Z + a-z + 0-9 characters",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.ScrambleMode.Uppercase\\">",
                      "<summary>",
                      "A-Z characters",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.ScrambleMode.Lowercase\\">",
                      "<summary>",
                      "a-z characters",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.ScrambleMode.Numerals\\">",
                      "<summary>",
                      "0-9 characters",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.ScrambleMode.Custom\\">",
                      "<summary>",
                      "Custom characters",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.ShakeRandomnessMode\\">",
                      "<summary>",
                      "Type of randomness to apply to a shake tween",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.ShakeRandomnessMode.Full\\">",
                      "<summary>Default, full randomness</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.ShakeRandomnessMode.Harmonic\\">",
                      "<summary>Creates a more balanced randomness that looks more harmonic</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.TweenExtensions\\">",
                      "<summary>",
                      "Methods that extend Tween objects and allow to control or get data from them",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.Complete(DG.Tweening.Tween)\\">",
                      "<summary>Completes the tween</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.Complete(DG.Tweening.Tween,System.Boolean)\\">",
                      "<summary>Completes the tween</summary>",
                      "<param name=\\"withCallbacks\\">For Sequences only: if TRUE also internal Sequence callbacks will be fired,",
                      "otherwise they will be ignored</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.Flip(DG.Tweening.Tween)\\">",
                      "<summary>Flips the direction of this tween (backwards if it was going forward or viceversa)</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.ForceInit(DG.Tweening.Tween)\\">",
                      "<summary>Forces the tween to initialize its settings immediately</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.Goto(DG.Tweening.Tween,System.Single,System.Boolean)\\">",
                      "<summary>Send the tween to the given position in time</summary>",
                      "<param name=\\"to\\">Time position to reach",
                      "(if higher than the whole tween duration the tween will simply reach its end)</param>",
                      "<param name=\\"andPlay\\">If TRUE will play the tween after reaching the given position, otherwise it will pause it</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.GotoWithCallbacks(DG.Tweening.Tween,System.Single,System.Boolean)\\">",
                      "<summary>Send the tween to the given position in time while also executing any callback between the previous time position and the new one</summary>",
                      "<param name=\\"to\\">Time position to reach",
                      "(if higher than the whole tween duration the tween will simply reach its end)</param>",
                      "<param name=\\"andPlay\\">If TRUE will play the tween after reaching the given position, otherwise it will pause it</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.Kill(DG.Tweening.Tween,System.Boolean)\\">",
                      "<summary>Kills the tween</summary>",
                      "<param name=\\"complete\\">If TRUE completes the tween before killing it</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.ManualUpdate(DG.Tweening.Tween,System.Single,System.Single)\\">",
                      "<summary>",
                      "Forces this tween to update manually, regardless of the <see cref=\\"T:DG.Tweening.UpdateType\\"/> set via SetUpdate.",
                      "Note that the tween will still be subject to normal tween rules, so if for example it's paused this method will do nothing.<para/>",
                      "Also note that if you only want to update this tween instance manually you'll have to set it to <see cref=\\"F:DG.Tweening.UpdateType.Manual\\"/> anyway,",
                      "so that it's not updated automatically.",
                      "</summary>",
                      "<param name=\\"deltaTime\\">Manual deltaTime</param>",
                      "<param name=\\"unscaledDeltaTime\\">Unscaled delta time (used with tweens set as timeScaleIndependent)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.Pause\`\`1(\`\`0)\\">",
                      "<summary>Pauses the tween</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.Play\`\`1(\`\`0)\\">",
                      "<summary>Plays the tween</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.PlayBackwards(DG.Tweening.Tween)\\">",
                      "<summary>Sets the tween in a backwards direction and plays it</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.PlayForward(DG.Tweening.Tween)\\">",
                      "<summary>Sets the tween in a forward direction and plays it</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.Restart(DG.Tweening.Tween,System.Boolean,System.Single)\\">",
                      "<summary>Restarts the tween from the beginning</summary>",
                      "<param name=\\"includeDelay\\">Ignored in case of Sequences. If TRUE includes the eventual tween delay, otherwise skips it</param>",
                      "<param name=\\"changeDelayTo\\">Ignored in case of Sequences. If >= 0 changes the startup delay to this value, otherwise doesn't touch it</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.Rewind(DG.Tweening.Tween,System.Boolean)\\">",
                      "<summary>Rewinds and pauses the tween</summary>",
                      "<param name=\\"includeDelay\\">Ignored in case of Sequences. If TRUE includes the eventual tween delay, otherwise skips it</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.SmoothRewind(DG.Tweening.Tween)\\">",
                      "<summary>Smoothly rewinds the tween (delays excluded).",
                      "A \\"smooth rewind\\" animates the tween to its start position,",
                      "skipping all elapsed loops (except in case of LoopType.Incremental) while keeping the animation fluent.",
                      "If called on a tween who is still waiting for its delay to happen, it will simply set the delay to 0 and pause the tween.",
                      "<para>Note that a tween that was smoothly rewinded will have its play direction flipped</para></summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.TogglePause(DG.Tweening.Tween)\\">",
                      "<summary>Plays the tween if it was paused, pauses it if it was playing</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.GotoWaypoint(DG.Tweening.Tween,System.Int32,System.Boolean)\\">",
                      "<summary>Send a path tween to the given waypoint.",
                      "Has no effect if this is not a path tween.",
                      "<para>BEWARE, this is a special utility method:",
                      "it works only with Linear eases. Also, the lookAt direction might be wrong after calling this and might need to be set manually",
                      "(because it relies on a smooth path movement and doesn't work well with jumps that encompass dramatic direction changes)</para></summary>",
                      "<param name=\\"waypointIndex\\">Waypoint index to reach",
                      "(if higher than the max waypoint index the tween will simply go to the last one)</param>",
                      "<param name=\\"andPlay\\">If TRUE will play the tween after reaching the given waypoint, otherwise it will pause it</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.WaitForCompletion(DG.Tweening.Tween)\\">",
                      "<summary>",
                      "Creates a yield instruction that waits until the tween is killed or complete.",
                      "It can be used inside a coroutine as a yield.",
                      "<para>Example usage:</para><code>yield return myTween.WaitForCompletion();</code>",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.WaitForRewind(DG.Tweening.Tween)\\">",
                      "<summary>",
                      "Creates a yield instruction that waits until the tween is killed or rewinded.",
                      "It can be used inside a coroutine as a yield.",
                      "<para>Example usage:</para><code>yield return myTween.WaitForRewind();</code>",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.WaitForKill(DG.Tweening.Tween)\\">",
                      "<summary>",
                      "Creates a yield instruction that waits until the tween is killed.",
                      "It can be used inside a coroutine as a yield.",
                      "<para>Example usage:</para><code>yield return myTween.WaitForKill();</code>",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.WaitForElapsedLoops(DG.Tweening.Tween,System.Int32)\\">",
                      "<summary>",
                      "Creates a yield instruction that waits until the tween is killed or has gone through the given amount of loops.",
                      "It can be used inside a coroutine as a yield.",
                      "<para>Example usage:</para><code>yield return myTween.WaitForElapsedLoops(2);</code>",
                      "</summary>",
                      "<param name=\\"elapsedLoops\\">Elapsed loops to wait for</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.WaitForPosition(DG.Tweening.Tween,System.Single)\\">",
                      "<summary>",
                      "Creates a yield instruction that waits until the tween is killed or has reached the given position (loops included, delays excluded).",
                      "It can be used inside a coroutine as a yield.",
                      "<para>Example usage:</para><code>yield return myTween.WaitForPosition(2.5f);</code>",
                      "</summary>",
                      "<param name=\\"position\\">Position (loops included, delays excluded) to wait for</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.WaitForStart(DG.Tweening.Tween)\\">",
                      "<summary>",
                      "Creates a yield instruction that waits until the tween is killed or started",
                      "(meaning when the tween is set in a playing state the first time, after any eventual delay).",
                      "It can be used inside a coroutine as a yield.",
                      "<para>Example usage:</para><code>yield return myTween.WaitForStart();</code>",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.CompletedLoops(DG.Tweening.Tween)\\">",
                      "<summary>Returns the total number of loops completed by this tween</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.Delay(DG.Tweening.Tween)\\">",
                      "<summary>Returns the eventual delay set for this tween</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.ElapsedDelay(DG.Tweening.Tween)\\">",
                      "<summary>Returns the eventual elapsed delay set for this tween</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.Duration(DG.Tweening.Tween,System.Boolean)\\">",
                      "<summary>Returns the duration of this tween (delays excluded).",
                      "<para>NOTE: when using settings like SpeedBased, the duration will be recalculated when the tween starts</para></summary>",
                      "<param name=\\"includeLoops\\">If TRUE returns the full duration loops included,",
                      "otherwise the duration of a single loop cycle</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.Elapsed(DG.Tweening.Tween,System.Boolean)\\">",
                      "<summary>Returns the elapsed time for this tween (delays exluded)</summary>",
                      "<param name=\\"includeLoops\\">If TRUE returns the elapsed time since startup loops included,",
                      "otherwise the elapsed time within the current loop cycle</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.ElapsedPercentage(DG.Tweening.Tween,System.Boolean)\\">",
                      "<summary>Returns the elapsed percentage (0 to 1) of this tween (delays exluded)</summary>",
                      "<param name=\\"includeLoops\\">If TRUE returns the elapsed percentage since startup loops included,",
                      "otherwise the elapsed percentage within the current loop cycle</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.ElapsedDirectionalPercentage(DG.Tweening.Tween)\\">",
                      "<summary>Returns the elapsed percentage (0 to 1) of this tween (delays exluded),",
                      "based on a single loop, and calculating eventual backwards Yoyo loops as 1 to 0 instead of 0 to 1</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.IsActive(DG.Tweening.Tween)\\">",
                      "<summary>Returns FALSE if this tween has been killed or is NULL, TRUE otherwise.",
                      "<para>BEWARE: if this tween is recyclable it might have been spawned again for another use and thus return TRUE anyway.</para>",
                      "When working with recyclable tweens you should take care to know when a tween has been killed and manually set your references to NULL.",
                      "If you want to be sure your references are set to NULL when a tween is killed you can use the <code>OnKill</code> callback like this:",
                      "<para><code>.OnKill(()=> myTweenReference = null)</code></para></summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.IsBackwards(DG.Tweening.Tween)\\">",
                      "<summary>Returns TRUE if this tween was reversed and is set to go backwards</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.IsLoopingOrExecutingBackwards(DG.Tweening.Tween)\\">",
                      "<summary>NOTE: To check if a tween was simply set to go backwards see <see cref=\\"M:DG.Tweening.TweenExtensions.IsBackwards(DG.Tweening.Tween)\\"/>.<para/>",
                      "Returns TRUE if this tween is going backwards for any of these reasons:<para/>",
                      "- The tween was reversed and is going backwards on a straight loop<para/>",
                      "- The tween was reversed and is going backwards on an odd Yoyo loop<para/>",
                      "- The tween is going forward but on an even Yoyo loop<para/>",
                      "IMPORTANT: if used inside a tween's callback, this will return a result concerning the exact frame when it's asked,",
                      "so for example in a callback at the end of a Yoyo loop step this method will never return FALSE",
                      "because the frame will never end exactly there and the tween will already be going backwards when the callback is fired</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.IsComplete(DG.Tweening.Tween)\\">",
                      "<summary>Returns TRUE if the tween is complete",
                      "(silently fails and returns FALSE if the tween has been killed)</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.IsInitialized(DG.Tweening.Tween)\\">",
                      "<summary>Returns TRUE if this tween has been initialized</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.IsPlaying(DG.Tweening.Tween)\\">",
                      "<summary>Returns TRUE if this tween is playing</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.Loops(DG.Tweening.Tween)\\">",
                      "<summary>Returns the total number of loops set for this tween",
                      "(returns -1 if the loops are infinite)</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.PathGetPoint(DG.Tweening.Tween,System.Single)\\">",
                      "<summary>",
                      "Returns a point on a path based on the given path percentage.",
                      "Returns <code>Vector3.zero</code> if this is not a path tween, if the tween is invalid, or if the path is not yet initialized.",
                      "A path is initialized after its tween starts, or immediately if the tween was created with the Path Editor (DOTween Pro feature).",
                      "You can force a path to be initialized by calling <code>myTween.ForceInit()</code>.",
                      "</summary>",
                      "<param name=\\"pathPercentage\\">Percentage of the path (0 to 1) on which to get the point</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.PathGetDrawPoints(DG.Tweening.Tween,System.Int32)\\">",
                      "<summary>",
                      "Returns an array of points that can be used to draw the path.",
                      "Note that this method generates allocations, because it creates a new array.",
                      "Returns <code>NULL</code> if this is not a path tween, if the tween is invalid, or if the path is not yet initialized.",
                      "A path is initialized after its tween starts, or immediately if the tween was created with the Path Editor (DOTween Pro feature).",
                      "You can force a path to be initialized by calling <code>myTween.ForceInit()</code>.",
                      "</summary>",
                      "<param name=\\"subdivisionsXSegment\\">How many points to create for each path segment (waypoint to waypoint).",
                      "Only used in case of non-Linear paths</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenExtensions.PathLength(DG.Tweening.Tween)\\">",
                      "<summary>",
                      "Returns the length of a path.",
                      "Returns -1 if this is not a path tween, if the tween is invalid, or if the path is not yet initialized.",
                      "A path is initialized after its tween starts, or immediately if the tween was created with the Path Editor (DOTween Pro feature).",
                      "You can force a path to be initialized by calling <code>myTween.ForceInit()</code>.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.LoopType\\">",
                      "<summary>",
                      "Types of loop",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.LoopType.Restart\\">",
                      "<summary>Each loop cycle restarts from the beginning</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.LoopType.Yoyo\\">",
                      "<summary>The tween moves forward and backwards at alternate cycles</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.LoopType.Incremental\\">",
                      "<summary>Continuously increments the tween at the end of each loop cycle (A to B, B to B+(A-B), and so on), thus always moving \\"onward\\".",
                      "<para>In case of String tweens works only if the tween is set as relative</para></summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Sequence\\">",
                      "<summary>",
                      "Controls other tweens as a group",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.ShortcutExtensions\\">",
                      "<summary>",
                      "Methods that extend known Unity objects and allow to directly create and control tweens from their instances",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOAspect(UnityEngine.Camera,System.Single,System.Single)\\">",
                      "<summary>Tweens a Camera's <code>aspect</code> to the given value.",
                      "Also stores the camera as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOColor(UnityEngine.Camera,UnityEngine.Color,System.Single)\\">",
                      "<summary>Tweens a Camera's backgroundColor to the given value.",
                      "Also stores the camera as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOFarClipPlane(UnityEngine.Camera,System.Single,System.Single)\\">",
                      "<summary>Tweens a Camera's <code>farClipPlane</code> to the given value.",
                      "Also stores the camera as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOFieldOfView(UnityEngine.Camera,System.Single,System.Single)\\">",
                      "<summary>Tweens a Camera's <code>fieldOfView</code> to the given value.",
                      "Also stores the camera as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DONearClipPlane(UnityEngine.Camera,System.Single,System.Single)\\">",
                      "<summary>Tweens a Camera's <code>nearClipPlane</code> to the given value.",
                      "Also stores the camera as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOOrthoSize(UnityEngine.Camera,System.Single,System.Single)\\">",
                      "<summary>Tweens a Camera's <code>orthographicSize</code> to the given value.",
                      "Also stores the camera as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOPixelRect(UnityEngine.Camera,UnityEngine.Rect,System.Single)\\">",
                      "<summary>Tweens a Camera's <code>pixelRect</code> to the given value.",
                      "Also stores the camera as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DORect(UnityEngine.Camera,UnityEngine.Rect,System.Single)\\">",
                      "<summary>Tweens a Camera's <code>rect</code> to the given value.",
                      "Also stores the camera as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOShakePosition(UnityEngine.Camera,System.Single,System.Single,System.Int32,System.Single,System.Boolean,DG.Tweening.ShakeRandomnessMode)\\">",
                      "<summary>Shakes a Camera's localPosition along its relative X Y axes with the given values.",
                      "Also stores the camera as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"strength\\">The shake strength</param>",
                      "<param name=\\"vibrato\\">Indicates how much will the shake vibrate</param>",
                      "<param name=\\"randomness\\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware).",
                      "Setting it to 0 will shake along a single direction.</param>",
                      "<param name=\\"fadeOut\\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>",
                      "<param name=\\"randomnessMode\\">Randomness mode</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOShakePosition(UnityEngine.Camera,System.Single,UnityEngine.Vector3,System.Int32,System.Single,System.Boolean,DG.Tweening.ShakeRandomnessMode)\\">",
                      "<summary>Shakes a Camera's localPosition along its relative X Y axes with the given values.",
                      "Also stores the camera as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"strength\\">The shake strength on each axis</param>",
                      "<param name=\\"vibrato\\">Indicates how much will the shake vibrate</param>",
                      "<param name=\\"randomness\\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware).",
                      "Setting it to 0 will shake along a single direction.</param>",
                      "<param name=\\"fadeOut\\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>",
                      "<param name=\\"randomnessMode\\">Randomness mode</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOShakeRotation(UnityEngine.Camera,System.Single,System.Single,System.Int32,System.Single,System.Boolean,DG.Tweening.ShakeRandomnessMode)\\">",
                      "<summary>Shakes a Camera's localRotation.",
                      "Also stores the camera as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"strength\\">The shake strength</param>",
                      "<param name=\\"vibrato\\">Indicates how much will the shake vibrate</param>",
                      "<param name=\\"randomness\\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware).",
                      "Setting it to 0 will shake along a single direction.</param>",
                      "<param name=\\"fadeOut\\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>",
                      "<param name=\\"randomnessMode\\">Randomness mode</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOShakeRotation(UnityEngine.Camera,System.Single,UnityEngine.Vector3,System.Int32,System.Single,System.Boolean,DG.Tweening.ShakeRandomnessMode)\\">",
                      "<summary>Shakes a Camera's localRotation.",
                      "Also stores the camera as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"strength\\">The shake strength on each axis</param>",
                      "<param name=\\"vibrato\\">Indicates how much will the shake vibrate</param>",
                      "<param name=\\"randomness\\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware).",
                      "Setting it to 0 will shake along a single direction.</param>",
                      "<param name=\\"fadeOut\\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>",
                      "<param name=\\"randomnessMode\\">Randomness mode</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOColor(UnityEngine.Light,UnityEngine.Color,System.Single)\\">",
                      "<summary>Tweens a Light's color to the given value.",
                      "Also stores the light as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOIntensity(UnityEngine.Light,System.Single,System.Single)\\">",
                      "<summary>Tweens a Light's intensity to the given value.",
                      "Also stores the light as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOShadowStrength(UnityEngine.Light,System.Single,System.Single)\\">",
                      "<summary>Tweens a Light's shadowStrength to the given value.",
                      "Also stores the light as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOColor(UnityEngine.LineRenderer,DG.Tweening.Color2,DG.Tweening.Color2,System.Single)\\">",
                      "<summary>Tweens a LineRenderer's color to the given value.",
                      "Also stores the LineRenderer as the tween's target so it can be used for filtered operations.",
                      "<para>Note that this method requires to also insert the start colors for the tween,",
                      "since LineRenderers have no way to get them.</para></summary>",
                      "<param name=\\"startValue\\">The start value to tween from</param>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOColor(UnityEngine.Material,UnityEngine.Color,System.Single)\\">",
                      "<summary>Tweens a Material's color to the given value.",
                      "Also stores the material as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOColor(UnityEngine.Material,UnityEngine.Color,System.String,System.Single)\\">",
                      "<summary>Tweens a Material's named color property to the given value.",
                      "Also stores the material as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param>",
                      "<param name=\\"property\\">The name of the material property to tween (like _Tint or _SpecColor)</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOColor(UnityEngine.Material,UnityEngine.Color,System.Int32,System.Single)\\">",
                      "<summary>Tweens a Material's named color property with the given ID to the given value.",
                      "Also stores the material as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param>",
                      "<param name=\\"propertyID\\">The ID of the material property to tween (also called nameID in Unity's manual)</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOFade(UnityEngine.Material,System.Single,System.Single)\\">",
                      "<summary>Tweens a Material's alpha color to the given value",
                      "(will have no effect unless your material supports transparency).",
                      "Also stores the material as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOFade(UnityEngine.Material,System.Single,System.String,System.Single)\\">",
                      "<summary>Tweens a Material's alpha color to the given value",
                      "(will have no effect unless your material supports transparency).",
                      "Also stores the material as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param>",
                      "<param name=\\"property\\">The name of the material property to tween (like _Tint or _SpecColor)</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOFade(UnityEngine.Material,System.Single,System.Int32,System.Single)\\">",
                      "<summary>Tweens a Material's alpha color with the given ID to the given value",
                      "(will have no effect unless your material supports transparency).",
                      "Also stores the material as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param>",
                      "<param name=\\"propertyID\\">The ID of the material property to tween (also called nameID in Unity's manual)</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOFloat(UnityEngine.Material,System.Single,System.String,System.Single)\\">",
                      "<summary>Tweens a Material's named float property to the given value.",
                      "Also stores the material as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param>",
                      "<param name=\\"property\\">The name of the material property to tween</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOFloat(UnityEngine.Material,System.Single,System.Int32,System.Single)\\">",
                      "<summary>Tweens a Material's named float property with the given ID to the given value.",
                      "Also stores the material as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param>",
                      "<param name=\\"propertyID\\">The ID of the material property to tween (also called nameID in Unity's manual)</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOOffset(UnityEngine.Material,UnityEngine.Vector2,System.Single)\\">",
                      "<summary>Tweens a Material's texture offset to the given value.",
                      "Also stores the material as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOOffset(UnityEngine.Material,UnityEngine.Vector2,System.String,System.Single)\\">",
                      "<summary>Tweens a Material's named texture offset property to the given value.",
                      "Also stores the material as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param>",
                      "<param name=\\"property\\">The name of the material property to tween</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOTiling(UnityEngine.Material,UnityEngine.Vector2,System.Single)\\">",
                      "<summary>Tweens a Material's texture scale to the given value.",
                      "Also stores the material as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOTiling(UnityEngine.Material,UnityEngine.Vector2,System.String,System.Single)\\">",
                      "<summary>Tweens a Material's named texture scale property to the given value.",
                      "Also stores the material as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param>",
                      "<param name=\\"property\\">The name of the material property to tween</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOVector(UnityEngine.Material,UnityEngine.Vector4,System.String,System.Single)\\">",
                      "<summary>Tweens a Material's named Vector property to the given value.",
                      "Also stores the material as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param>",
                      "<param name=\\"property\\">The name of the material property to tween</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOVector(UnityEngine.Material,UnityEngine.Vector4,System.Int32,System.Single)\\">",
                      "<summary>Tweens a Material's named Vector property with the given ID to the given value.",
                      "Also stores the material as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param>",
                      "<param name=\\"propertyID\\">The ID of the material property to tween (also called nameID in Unity's manual)</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOResize(UnityEngine.TrailRenderer,System.Single,System.Single,System.Single)\\">",
                      "<summary>Tweens a TrailRenderer's startWidth/endWidth to the given value.",
                      "Also stores the TrailRenderer as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"toStartWidth\\">The end startWidth to reach</param><param name=\\"toEndWidth\\">The end endWidth to reach</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOTime(UnityEngine.TrailRenderer,System.Single,System.Single)\\">",
                      "<summary>Tweens a TrailRenderer's time to the given value.",
                      "Also stores the TrailRenderer as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOMove(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Boolean)\\">",
                      "<summary>Tweens a Transform's position to the given value.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOMoveX(UnityEngine.Transform,System.Single,System.Single,System.Boolean)\\">",
                      "<summary>Tweens a Transform's X position to the given value.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOMoveY(UnityEngine.Transform,System.Single,System.Single,System.Boolean)\\">",
                      "<summary>Tweens a Transform's Y position to the given value.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOMoveZ(UnityEngine.Transform,System.Single,System.Single,System.Boolean)\\">",
                      "<summary>Tweens a Transform's Z position to the given value.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOLocalMove(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Boolean)\\">",
                      "<summary>Tweens a Transform's localPosition to the given value.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOLocalMoveX(UnityEngine.Transform,System.Single,System.Single,System.Boolean)\\">",
                      "<summary>Tweens a Transform's X localPosition to the given value.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOLocalMoveY(UnityEngine.Transform,System.Single,System.Single,System.Boolean)\\">",
                      "<summary>Tweens a Transform's Y localPosition to the given value.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOLocalMoveZ(UnityEngine.Transform,System.Single,System.Single,System.Boolean)\\">",
                      "<summary>Tweens a Transform's Z localPosition to the given value.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DORotate(UnityEngine.Transform,UnityEngine.Vector3,System.Single,DG.Tweening.RotateMode)\\">",
                      "<summary>Tweens a Transform's rotation to the given value.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"mode\\">Rotation mode</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DORotateQuaternion(UnityEngine.Transform,UnityEngine.Quaternion,System.Single)\\">",
                      "<summary>Tweens a Transform's rotation to the given value using pure quaternion values.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations.",
                      "<para>PLEASE NOTE: DORotate, which takes Vector3 values, is the preferred rotation method.",
                      "This method was implemented for very special cases, and doesn't support LoopType.Incremental loops",
                      "(neither for itself nor if placed inside a LoopType.Incremental Sequence)</para>",
                      "</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOLocalRotate(UnityEngine.Transform,UnityEngine.Vector3,System.Single,DG.Tweening.RotateMode)\\">",
                      "<summary>Tweens a Transform's localRotation to the given value.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"mode\\">Rotation mode</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOLocalRotateQuaternion(UnityEngine.Transform,UnityEngine.Quaternion,System.Single)\\">",
                      "<summary>Tweens a Transform's rotation to the given value using pure quaternion values.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations.",
                      "<para>PLEASE NOTE: DOLocalRotate, which takes Vector3 values, is the preferred rotation method.",
                      "This method was implemented for very special cases, and doesn't support LoopType.Incremental loops",
                      "(neither for itself nor if placed inside a LoopType.Incremental Sequence)</para>",
                      "</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOScale(UnityEngine.Transform,UnityEngine.Vector3,System.Single)\\">",
                      "<summary>Tweens a Transform's localScale to the given value.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOScale(UnityEngine.Transform,System.Single,System.Single)\\">",
                      "<summary>Tweens a Transform's localScale uniformly to the given value.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOScaleX(UnityEngine.Transform,System.Single,System.Single)\\">",
                      "<summary>Tweens a Transform's X localScale to the given value.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOScaleY(UnityEngine.Transform,System.Single,System.Single)\\">",
                      "<summary>Tweens a Transform's Y localScale to the given value.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOScaleZ(UnityEngine.Transform,System.Single,System.Single)\\">",
                      "<summary>Tweens a Transform's Z localScale to the given value.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOLookAt(UnityEngine.Transform,UnityEngine.Vector3,System.Single,DG.Tweening.AxisConstraint,System.Nullable{UnityEngine.Vector3})\\">",
                      "<summary>Tweens a Transform's rotation so that it will look towards the given world position.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"towards\\">The position to look at</param><param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"axisConstraint\\">Eventual axis constraint for the rotation</param>",
                      "<param name=\\"up\\">The vector that defines in which direction up is (default: Vector3.up)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DODynamicLookAt(UnityEngine.Transform,UnityEngine.Vector3,System.Single,DG.Tweening.AxisConstraint,System.Nullable{UnityEngine.Vector3})\\">",
                      "<summary><code>EXPERIMENTAL</code> Tweens a Transform's rotation so that it will look towards the given world position,",
                      "while also updating the lookAt position every frame",
                      "(contrary to <see cref=\\"M:DG.Tweening.ShortcutExtensions.DOLookAt(UnityEngine.Transform,UnityEngine.Vector3,System.Single,DG.Tweening.AxisConstraint,System.Nullable{UnityEngine.Vector3})\\"/> which calculates the lookAt rotation only once, when the tween starts).",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"towards\\">The position to look at</param><param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"axisConstraint\\">Eventual axis constraint for the rotation</param>",
                      "<param name=\\"up\\">The vector that defines in which direction up is (default: Vector3.up)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOPunchPosition(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Int32,System.Single,System.Boolean)\\">",
                      "<summary>Punches a Transform's localPosition towards the given direction and then back to the starting one",
                      "as if it was connected to the starting position via an elastic.</summary>",
                      "<param name=\\"punch\\">The direction and strength of the punch (added to the Transform's current position)</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"vibrato\\">Indicates how much will the punch vibrate</param>",
                      "<param name=\\"elasticity\\">Represents how much (0 to 1) the vector will go beyond the starting position when bouncing backwards.",
                      "1 creates a full oscillation between the punch direction and the opposite direction,",
                      "while 0 oscillates only between the punch and the start position</param>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOPunchScale(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Int32,System.Single)\\">",
                      "<summary>Punches a Transform's localScale towards the given size and then back to the starting one",
                      "as if it was connected to the starting scale via an elastic.</summary>",
                      "<param name=\\"punch\\">The punch strength (added to the Transform's current scale)</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"vibrato\\">Indicates how much will the punch vibrate</param>",
                      "<param name=\\"elasticity\\">Represents how much (0 to 1) the vector will go beyond the starting size when bouncing backwards.",
                      "1 creates a full oscillation between the punch scale and the opposite scale,",
                      "while 0 oscillates only between the punch scale and the start scale</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOPunchRotation(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Int32,System.Single)\\">",
                      "<summary>Punches a Transform's localRotation towards the given size and then back to the starting one",
                      "as if it was connected to the starting rotation via an elastic.</summary>",
                      "<param name=\\"punch\\">The punch strength (added to the Transform's current rotation)</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"vibrato\\">Indicates how much will the punch vibrate</param>",
                      "<param name=\\"elasticity\\">Represents how much (0 to 1) the vector will go beyond the starting rotation when bouncing backwards.",
                      "1 creates a full oscillation between the punch rotation and the opposite rotation,",
                      "while 0 oscillates only between the punch and the start rotation</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOShakePosition(UnityEngine.Transform,System.Single,System.Single,System.Int32,System.Single,System.Boolean,System.Boolean,DG.Tweening.ShakeRandomnessMode)\\">",
                      "<summary>Shakes a Transform's localPosition with the given values.</summary>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"strength\\">The shake strength</param>",
                      "<param name=\\"vibrato\\">Indicates how much will the shake vibrate</param>",
                      "<param name=\\"randomness\\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware).",
                      "Setting it to 0 will shake along a single direction.</param>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "<param name=\\"fadeOut\\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>",
                      "<param name=\\"randomnessMode\\">Randomness mode</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOShakePosition(UnityEngine.Transform,System.Single,UnityEngine.Vector3,System.Int32,System.Single,System.Boolean,System.Boolean,DG.Tweening.ShakeRandomnessMode)\\">",
                      "<summary>Shakes a Transform's localPosition with the given values.</summary>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"strength\\">The shake strength on each axis</param>",
                      "<param name=\\"vibrato\\">Indicates how much will the shake vibrate</param>",
                      "<param name=\\"randomness\\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware).",
                      "Setting it to 0 will shake along a single direction.</param>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "<param name=\\"fadeOut\\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>",
                      "<param name=\\"randomnessMode\\">Randomness mode</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOShakeRotation(UnityEngine.Transform,System.Single,System.Single,System.Int32,System.Single,System.Boolean,DG.Tweening.ShakeRandomnessMode)\\">",
                      "<summary>Shakes a Transform's localRotation.</summary>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"strength\\">The shake strength</param>",
                      "<param name=\\"vibrato\\">Indicates how much will the shake vibrate</param>",
                      "<param name=\\"randomness\\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware).",
                      "Setting it to 0 will shake along a single direction.</param>",
                      "<param name=\\"fadeOut\\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>",
                      "<param name=\\"randomnessMode\\">Randomness mode</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOShakeRotation(UnityEngine.Transform,System.Single,UnityEngine.Vector3,System.Int32,System.Single,System.Boolean,DG.Tweening.ShakeRandomnessMode)\\">",
                      "<summary>Shakes a Transform's localRotation.</summary>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"strength\\">The shake strength on each axis</param>",
                      "<param name=\\"vibrato\\">Indicates how much will the shake vibrate</param>",
                      "<param name=\\"randomness\\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware).",
                      "Setting it to 0 will shake along a single direction.</param>",
                      "<param name=\\"fadeOut\\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>",
                      "<param name=\\"randomnessMode\\">Randomness mode</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOShakeScale(UnityEngine.Transform,System.Single,System.Single,System.Int32,System.Single,System.Boolean,DG.Tweening.ShakeRandomnessMode)\\">",
                      "<summary>Shakes a Transform's localScale.</summary>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"strength\\">The shake strength</param>",
                      "<param name=\\"vibrato\\">Indicates how much will the shake vibrate</param>",
                      "<param name=\\"randomness\\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware).",
                      "Setting it to 0 will shake along a single direction.</param>",
                      "<param name=\\"fadeOut\\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>",
                      "<param name=\\"randomnessMode\\">Randomness mode</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOShakeScale(UnityEngine.Transform,System.Single,UnityEngine.Vector3,System.Int32,System.Single,System.Boolean,DG.Tweening.ShakeRandomnessMode)\\">",
                      "<summary>Shakes a Transform's localScale.</summary>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"strength\\">The shake strength on each axis</param>",
                      "<param name=\\"vibrato\\">Indicates how much will the shake vibrate</param>",
                      "<param name=\\"randomness\\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware).",
                      "Setting it to 0 will shake along a single direction.</param>",
                      "<param name=\\"fadeOut\\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>",
                      "<param name=\\"randomnessMode\\">Randomness mode</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOJump(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Int32,System.Single,System.Boolean)\\">",
                      "<summary>Tweens a Transform's position to the given value, while also applying a jump effect along the Y axis.",
                      "Returns a Sequence instead of a Tweener.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param>",
                      "<param name=\\"jumpPower\\">Power of the jump (the max height of the jump is represented by this plus the final Y offset)</param>",
                      "<param name=\\"numJumps\\">Total number of jumps</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOLocalJump(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Int32,System.Single,System.Boolean)\\">",
                      "<summary>Tweens a Transform's localPosition to the given value, while also applying a jump effect along the Y axis.",
                      "Returns a Sequence instead of a Tweener.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param>",
                      "<param name=\\"jumpPower\\">Power of the jump (the max height of the jump is represented by this plus the final Y offset)</param>",
                      "<param name=\\"numJumps\\">Total number of jumps</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOPath(UnityEngine.Transform,UnityEngine.Vector3[],System.Single,DG.Tweening.PathType,DG.Tweening.PathMode,System.Int32,System.Nullable{UnityEngine.Color})\\">",
                      "<summary>Tweens a Transform's position through the given path waypoints, using the chosen path algorithm.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"path\\">The waypoints to go through</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"pathType\\">The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points)</param>",
                      "<param name=\\"pathMode\\">The path mode: 3D, side-scroller 2D, top-down 2D</param>",
                      "<param name=\\"resolution\\">The resolution of the path (useless in case of Linear paths): higher resolutions make for more detailed curved paths but are more expensive.",
                      "Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints</param>",
                      "<param name=\\"gizmoColor\\">The color of the path (shown when gizmos are active in the Play panel and the tween is running)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOLocalPath(UnityEngine.Transform,UnityEngine.Vector3[],System.Single,DG.Tweening.PathType,DG.Tweening.PathMode,System.Int32,System.Nullable{UnityEngine.Color})\\">",
                      "<summary>Tweens a Transform's localPosition through the given path waypoints, using the chosen path algorithm.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"path\\">The waypoint to go through</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"pathType\\">The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points)</param>",
                      "<param name=\\"pathMode\\">The path mode: 3D, side-scroller 2D, top-down 2D</param>",
                      "<param name=\\"resolution\\">The resolution of the path: higher resolutions make for more detailed curved paths but are more expensive.",
                      "Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints</param>",
                      "<param name=\\"gizmoColor\\">The color of the path (shown when gizmos are active in the Play panel and the tween is running)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOPath(UnityEngine.Transform,DG.Tweening.Plugins.Core.PathCore.Path,System.Single,DG.Tweening.PathMode)\\">",
                      "<summary>IMPORTANT: Unless you really know what you're doing, you should use the overload that accepts a Vector3 array instead.<para/>",
                      "Tweens a Transform's position via the given path.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"path\\">The path to use</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"pathMode\\">The path mode: 3D, side-scroller 2D, top-down 2D</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOLocalPath(UnityEngine.Transform,DG.Tweening.Plugins.Core.PathCore.Path,System.Single,DG.Tweening.PathMode)\\">",
                      "<summary>IMPORTANT: Unless you really know what you're doing, you should use the overload that accepts a Vector3 array instead.<para/>",
                      "Tweens a Transform's localPosition via the given path.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"path\\">The path to use</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"pathMode\\">The path mode: 3D, side-scroller 2D, top-down 2D</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOTimeScale(DG.Tweening.Tween,System.Single,System.Single)\\">",
                      "<summary>Tweens a Tween's timeScale to the given value.",
                      "Also stores the Tween as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOBlendableColor(UnityEngine.Light,UnityEngine.Color,System.Single)\\">",
                      "<summary>Tweens a Light's color to the given value,",
                      "in a way that allows other DOBlendableColor tweens to work together on the same target,",
                      "instead than fight each other as multiple DOColor would do.",
                      "Also stores the Light as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The value to tween to</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOBlendableColor(UnityEngine.Material,UnityEngine.Color,System.Single)\\">",
                      "<summary>Tweens a Material's color to the given value,",
                      "in a way that allows other DOBlendableColor tweens to work together on the same target,",
                      "instead than fight each other as multiple DOColor would do.",
                      "Also stores the Material as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The value to tween to</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOBlendableColor(UnityEngine.Material,UnityEngine.Color,System.String,System.Single)\\">",
                      "<summary>Tweens a Material's named color property to the given value,",
                      "in a way that allows other DOBlendableColor tweens to work together on the same target,",
                      "instead than fight each other as multiple DOColor would do.",
                      "Also stores the Material as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The value to tween to</param>",
                      "<param name=\\"property\\">The name of the material property to tween (like _Tint or _SpecColor)</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOBlendableColor(UnityEngine.Material,UnityEngine.Color,System.Int32,System.Single)\\">",
                      "<summary>Tweens a Material's named color property with the given ID to the given value,",
                      "in a way that allows other DOBlendableColor tweens to work together on the same target,",
                      "instead than fight each other as multiple DOColor would do.",
                      "Also stores the Material as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"endValue\\">The value to tween to</param>",
                      "<param name=\\"propertyID\\">The ID of the material property to tween (also called nameID in Unity's manual)</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOBlendableMoveBy(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Boolean)\\">",
                      "<summary>Tweens a Transform's position BY the given value (as if you chained a <code>SetRelative</code>),",
                      "in a way that allows other DOBlendableMove tweens to work together on the same target,",
                      "instead than fight each other as multiple DOMove would do.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"byValue\\">The value to tween by</param><param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOBlendableLocalMoveBy(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Boolean)\\">",
                      "<summary>Tweens a Transform's localPosition BY the given value (as if you chained a <code>SetRelative</code>),",
                      "in a way that allows other DOBlendableMove tweens to work together on the same target,",
                      "instead than fight each other as multiple DOMove would do.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"byValue\\">The value to tween by</param><param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOBlendableRotateBy(UnityEngine.Transform,UnityEngine.Vector3,System.Single,DG.Tweening.RotateMode)\\">",
                      "<summary>EXPERIMENTAL METHOD - Tweens a Transform's rotation BY the given value (as if you chained a <code>SetRelative</code>),",
                      "in a way that allows other DOBlendableRotate tweens to work together on the same target,",
                      "instead than fight each other as multiple DORotate would do.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"byValue\\">The value to tween by</param><param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"mode\\">Rotation mode</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOBlendableLocalRotateBy(UnityEngine.Transform,UnityEngine.Vector3,System.Single,DG.Tweening.RotateMode)\\">",
                      "<summary>EXPERIMENTAL METHOD - Tweens a Transform's lcoalRotation BY the given value (as if you chained a <code>SetRelative</code>),",
                      "in a way that allows other DOBlendableRotate tweens to work together on the same target,",
                      "instead than fight each other as multiple DORotate would do.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"byValue\\">The value to tween by</param><param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"mode\\">Rotation mode</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOBlendablePunchRotation(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Int32,System.Single)\\">",
                      "<summary>Punches a Transform's localRotation BY the given value and then back to the starting one",
                      "as if it was connected to the starting rotation via an elastic. Does it in a way that allows other",
                      "DOBlendableRotate tweens to work together on the same target</summary>",
                      "<param name=\\"punch\\">The punch strength (added to the Transform's current rotation)</param>",
                      "<param name=\\"duration\\">The duration of the tween</param>",
                      "<param name=\\"vibrato\\">Indicates how much will the punch vibrate</param>",
                      "<param name=\\"elasticity\\">Represents how much (0 to 1) the vector will go beyond the starting rotation when bouncing backwards.",
                      "1 creates a full oscillation between the punch rotation and the opposite rotation,",
                      "while 0 oscillates only between the punch and the start rotation</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOBlendableScaleBy(UnityEngine.Transform,UnityEngine.Vector3,System.Single)\\">",
                      "<summary>Tweens a Transform's localScale BY the given value (as if you chained a <code>SetRelative</code>),",
                      "in a way that allows other DOBlendableScale tweens to work together on the same target,",
                      "instead than fight each other as multiple DOScale would do.",
                      "Also stores the transform as the tween's target so it can be used for filtered operations</summary>",
                      "<param name=\\"byValue\\">The value to tween by</param><param name=\\"duration\\">The duration of the tween</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOComplete(UnityEngine.Component,System.Boolean)\\">",
                      "<summary>",
                      "Completes all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens completed",
                      "(meaning the tweens that don't have infinite loops and were not already complete)",
                      "</summary>",
                      "<param name=\\"withCallbacks\\">For Sequences only: if TRUE also internal Sequence callbacks will be fired,",
                      "otherwise they will be ignored</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOComplete(UnityEngine.Material,System.Boolean)\\">",
                      "<summary>",
                      "Completes all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens completed",
                      "(meaning the tweens that don't have infinite loops and were not already complete)",
                      "</summary>",
                      "<param name=\\"withCallbacks\\">For Sequences only: if TRUE also internal Sequence callbacks will be fired,",
                      "otherwise they will be ignored</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOKill(UnityEngine.Component,System.Boolean)\\">",
                      "<summary>",
                      "Kills all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens killed.",
                      "</summary>",
                      "<param name=\\"complete\\">If TRUE completes the tween before killing it</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOKill(UnityEngine.Material,System.Boolean)\\">",
                      "<summary>",
                      "Kills all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens killed.",
                      "</summary>",
                      "<param name=\\"complete\\">If TRUE completes the tween before killing it</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOFlip(UnityEngine.Component)\\">",
                      "<summary>",
                      "Flips the direction (backwards if it was going forward or viceversa) of all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens flipped.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOFlip(UnityEngine.Material)\\">",
                      "<summary>",
                      "Flips the direction (backwards if it was going forward or viceversa) of all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens flipped.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOGoto(UnityEngine.Component,System.Single,System.Boolean)\\">",
                      "<summary>",
                      "Sends to the given position all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens involved.",
                      "</summary>",
                      "<param name=\\"to\\">Time position to reach",
                      "(if higher than the whole tween duration the tween will simply reach its end)</param>",
                      "<param name=\\"andPlay\\">If TRUE will play the tween after reaching the given position, otherwise it will pause it</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOGoto(UnityEngine.Material,System.Single,System.Boolean)\\">",
                      "<summary>",
                      "Sends to the given position all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens involved.",
                      "</summary>",
                      "<param name=\\"to\\">Time position to reach",
                      "(if higher than the whole tween duration the tween will simply reach its end)</param>",
                      "<param name=\\"andPlay\\">If TRUE will play the tween after reaching the given position, otherwise it will pause it</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOPause(UnityEngine.Component)\\">",
                      "<summary>",
                      "Pauses all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens paused.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOPause(UnityEngine.Material)\\">",
                      "<summary>",
                      "Pauses all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens paused.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOPlay(UnityEngine.Component)\\">",
                      "<summary>",
                      "Plays all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens played.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOPlay(UnityEngine.Material)\\">",
                      "<summary>",
                      "Plays all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens played.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOPlayBackwards(UnityEngine.Component)\\">",
                      "<summary>",
                      "Plays backwards all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens played.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOPlayBackwards(UnityEngine.Material)\\">",
                      "<summary>",
                      "Plays backwards all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens played.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOPlayForward(UnityEngine.Component)\\">",
                      "<summary>",
                      "Plays forward all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens played.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOPlayForward(UnityEngine.Material)\\">",
                      "<summary>",
                      "Plays forward all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens played.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DORestart(UnityEngine.Component,System.Boolean)\\">",
                      "<summary>",
                      "Restarts all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens restarted.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DORestart(UnityEngine.Material,System.Boolean)\\">",
                      "<summary>",
                      "Restarts all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens restarted.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DORewind(UnityEngine.Component,System.Boolean)\\">",
                      "<summary>",
                      "Rewinds all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens rewinded.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DORewind(UnityEngine.Material,System.Boolean)\\">",
                      "<summary>",
                      "Rewinds all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens rewinded.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOSmoothRewind(UnityEngine.Component)\\">",
                      "<summary>",
                      "Smoothly rewinds all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens rewinded.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOSmoothRewind(UnityEngine.Material)\\">",
                      "<summary>",
                      "Smoothly rewinds all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens rewinded.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOTogglePause(UnityEngine.Component)\\">",
                      "<summary>",
                      "Toggles the paused state (plays if it was paused, pauses if it was playing) of all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens involved.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.ShortcutExtensions.DOTogglePause(UnityEngine.Material)\\">",
                      "<summary>",
                      "Toggles the paused state (plays if it was paused, pauses if it was playing) of all tweens that have this target as a reference",
                      "(meaning tweens that were started from this target, or that had this target added as an Id)",
                      "and returns the total number of tweens involved.",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.TweenParams\\">",
                      "<summary>",
                      "This class serves only as a utility class to store tween settings to apply on multiple tweens.",
                      "It is in no way needed otherwise, since you can directly apply tween settings to a tween via chaining",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.TweenParams.Params\\">",
                      "<summary>A variable you can eventually Clear and reuse when needed,",
                      "to avoid instantiating TweenParams objects</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.#ctor\\">",
                      "<summary>Creates a new TweenParams object, which you can use to store tween settings",
                      "to pass to multiple tweens via <code>myTween.SetAs(myTweenParms)</code></summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.Clear\\">",
                      "<summary>Clears and resets this TweenParams instance using default values,",
                      "so it can be reused without instantiating another one</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.SetAutoKill(System.Boolean)\\">",
                      "<summary>Sets the autoKill behaviour of the tween.",
                      "Has no effect if the tween has already started</summary>",
                      "<param name=\\"autoKillOnCompletion\\">If TRUE the tween will be automatically killed when complete</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.SetId(System.Object)\\">",
                      "<summary>Sets an ID for the tween, which can then be used as a filter with DOTween's static methods.</summary>",
                      "<param name=\\"objectId\\">The ID to assign to this tween. Can be an int, a string, an object or anything else.</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.SetId(System.String)\\">",
                      "<summary>Sets an ID for the tween, which can then be used as a filter with DOTween's static methods.</summary>",
                      "<param name=\\"stringId\\">The ID to assign to this tween. Can be an int, a string, an object or anything else.</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.SetId(System.Int32)\\">",
                      "<summary>Sets an ID for the tween, which can then be used as a filter with DOTween's static methods.</summary>",
                      "<param name=\\"intId\\">The ID to assign to this tween. Can be an int, a string, an object or anything else.</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.SetTarget(System.Object)\\">",
                      "<summary>Sets the target for the tween, which can then be used as a filter with DOTween's static methods.",
                      "<para>IMPORTANT: use it with caution. If you just want to set an ID for the tween use <code>SetId</code> instead.</para>",
                      "When using shorcuts the shortcut target is already assigned as the tween's target,",
                      "so using this method will overwrite it and prevent shortcut-operations like myTarget.DOPause from working correctly.</summary>",
                      "<param name=\\"target\\">The target to assign to this tween. Can be an int, a string, an object or anything else.</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.SetLoops(System.Int32,System.Nullable{DG.Tweening.LoopType})\\">",
                      "<summary>Sets the looping options for the tween.",
                      "Has no effect if the tween has already started</summary>",
                      "<param name=\\"loops\\">Number of cycles to play (-1 for infinite - will be converted to 1 in case the tween is nested in a Sequence)</param>",
                      "<param name=\\"loopType\\">Loop behaviour type (default: LoopType.Restart)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.SetEase(DG.Tweening.Ease,System.Nullable{System.Single},System.Nullable{System.Single})\\">",
                      "<summary>Sets the ease of the tween.",
                      "<para>If applied to Sequences eases the whole sequence animation</para></summary>",
                      "<param name=\\"overshootOrAmplitude\\">Eventual overshoot or amplitude to use with Back or Elastic easeType (default is 1.70158)</param>",
                      "<param name=\\"period\\">Eventual period to use with Elastic easeType (default is 0)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.SetEase(UnityEngine.AnimationCurve)\\">",
                      "<summary>Sets the ease of the tween using an AnimationCurve.",
                      "<para>If applied to Sequences eases the whole sequence animation</para></summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.SetEase(DG.Tweening.EaseFunction)\\">",
                      "<summary>Sets the ease of the tween using a custom ease function.",
                      "<para>If applied to Sequences eases the whole sequence animation</para></summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.SetRecyclable(System.Boolean)\\">",
                      "<summary>Sets the recycling behaviour for the tween.</summary>",
                      "<param name=\\"recyclable\\">If TRUE the tween will be recycled after being killed, otherwise it will be destroyed.</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.SetUpdate(System.Boolean)\\">",
                      "<summary>Sets the update type to the one defined in DOTween.defaultUpdateType (UpdateType.Normal unless changed)",
                      "and lets you choose if it should be independent from Unity's Time.timeScale</summary>",
                      "<param name=\\"isIndependentUpdate\\">If TRUE the tween will ignore Unity's Time.timeScale</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.SetUpdate(DG.Tweening.UpdateType,System.Boolean)\\">",
                      "<summary>Sets the type of update (default or independent) for the tween</summary>",
                      "<param name=\\"updateType\\">The type of update (default: UpdateType.Normal)</param>",
                      "<param name=\\"isIndependentUpdate\\">If TRUE the tween will ignore Unity's Time.timeScale</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.OnStart(DG.Tweening.TweenCallback)\\">",
                      "<summary>Sets the onStart callback for the tween.",
                      "Called the first time the tween is set in a playing state, after any eventual delay</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.OnPlay(DG.Tweening.TweenCallback)\\">",
                      "<summary>Sets the onPlay callback for the tween.",
                      "Called when the tween is set in a playing state, after any eventual delay.",
                      "Also called each time the tween resumes playing from a paused state</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.OnRewind(DG.Tweening.TweenCallback)\\">",
                      "<summary>Sets the onRewind callback for the tween.",
                      "Called when the tween is rewinded,",
                      "either by calling <code>Rewind</code> or by reaching the start position while playing backwards.",
                      "Rewinding a tween that is already rewinded will not fire this callback</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.OnUpdate(DG.Tweening.TweenCallback)\\">",
                      "<summary>Sets the onUpdate callback for the tween.",
                      "Called each time the tween updates</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.OnStepComplete(DG.Tweening.TweenCallback)\\">",
                      "<summary>Sets the onStepComplete callback for the tween.",
                      "Called the moment the tween completes one loop cycle, even when going backwards</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.OnComplete(DG.Tweening.TweenCallback)\\">",
                      "<summary>Sets the onComplete callback for the tween.",
                      "Called the moment the tween reaches its final forward position, loops included</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.OnKill(DG.Tweening.TweenCallback)\\">",
                      "<summary>Sets the onKill callback for the tween.",
                      "Called the moment the tween is killed</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.OnWaypointChange(DG.Tweening.TweenCallback{System.Int32})\\">",
                      "<summary>Sets the onWaypointChange callback for the tween.",
                      "Called when a path tween reaches a new waypoint</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.SetDelay(System.Single)\\">",
                      "<summary>Sets a delayed startup for the tween.",
                      "<para>Has no effect on Sequences or if the tween has already started</para></summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.SetRelative(System.Boolean)\\">",
                      "<summary>If isRelative is TRUE sets the tween as relative",
                      "(the endValue will be calculated as <code>startValue + endValue</code> instead than being used directly).",
                      "<para>Has no effect on Sequences or if the tween has already started</para></summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenParams.SetSpeedBased(System.Boolean)\\">",
                      "<summary>If isSpeedBased is TRUE sets the tween as speed based",
                      "(the duration will represent the number of units the tween moves x second).",
                      "<para>Has no effect on Sequences, nested tweens, or if the tween has already started</para></summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.TweenSettingsExtensions\\">",
                      "<summary>",
                      "Methods that extend Tween objects and allow to set their parameters",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetAutoKill\`\`1(\`\`0)\\">",
                      "<summary>Sets the autoKill behaviour of the tween to TRUE.",
                      "<code>Has no effect</code> if the tween has already started or if it's added to a Sequence</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetAutoKill\`\`1(\`\`0,System.Boolean)\\">",
                      "<summary>Sets the autoKill behaviour of the tween.",
                      "<code>Has no effect</code> if the tween has already started or if it's added to a Sequence</summary>",
                      "<param name=\\"autoKillOnCompletion\\">If TRUE the tween will be automatically killed when complete</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetId\`\`1(\`\`0,System.Object)\\">",
                      "<summary>Sets an ID for the tween (<see cref=\\"F:DG.Tweening.Tween.id\\"/>), which can then be used as a filter with DOTween's static methods.</summary>",
                      "<param name=\\"objectId\\">The ID to assign to this tween. Can be an int, a string, an object or anything else.</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetId\`\`1(\`\`0,System.String)\\">",
                      "<summary>Sets a string ID for the tween (<see cref=\\"F:DG.Tweening.Tween.stringId\\"/>), which can then be used as a filter with DOTween's static methods.<para/>",
                      "Filtering via string is 2X faster than using an object as an ID (using the alternate obejct overload)</summary>",
                      "<param name=\\"stringId\\">The string ID to assign to this tween.</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetId\`\`1(\`\`0,System.Int32)\\">",
                      "<summary>Sets an int ID for the tween (<see cref=\\"F:DG.Tweening.Tween.intId\\"/>), which can then be used as a filter with DOTween's static methods.<para/>",
                      "Filtering via int is 4X faster than via object, 2X faster than via string (using the alternate object/string overloads)</summary>",
                      "<param name=\\"intId\\">The int ID to assign to this tween.</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetLink\`\`1(\`\`0,UnityEngine.GameObject)\\">",
                      "<summary>Allows to link this tween to a GameObject",
                      "so that it will be automatically killed when the GameObject is destroyed.",
                      "<code>Has no effect</code> if the tween is added to a Sequence</summary>",
                      "<param name=\\"gameObject\\">The link target (unrelated to the target set via <code>SetTarget</code>)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetLink\`\`1(\`\`0,UnityEngine.GameObject,DG.Tweening.LinkBehaviour)\\">",
                      "<summary>Allows to link this tween to a GameObject and assign a behaviour depending on it.",
                      "This will also automatically kill the tween when the GameObject is destroyed.",
                      "<code>Has no effect</code> if the tween is added to a Sequence</summary>",
                      "<param name=\\"gameObject\\">The link target (unrelated to the target set via <code>SetTarget</code>)</param>",
                      "<param name=\\"behaviour\\">The behaviour to use (<see cref=\\"F:DG.Tweening.LinkBehaviour.KillOnDestroy\\"/> is always evaluated even if you choose another one)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetTarget\`\`1(\`\`0,System.Object)\\">",
                      "<summary>Sets the target for the tween, which can then be used as a filter with DOTween's static methods.",
                      "<para>IMPORTANT: use it with caution. If you just want to set an ID for the tween use <code>SetId</code> instead.</para>",
                      "When using shorcuts the shortcut target is already assigned as the tween's target,",
                      "so using this method will overwrite it and prevent shortcut-operations like myTarget.DOPause from working correctly.</summary>",
                      "<param name=\\"target\\">The target to assign to this tween. Can be an int, a string, an object or anything else.</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetLoops\`\`1(\`\`0,System.Int32)\\">",
                      "<summary>Sets the looping options for the tween.",
                      "Has no effect if the tween has already started</summary>",
                      "<param name=\\"loops\\">Number of cycles to play (-1 for infinite - will be converted to 1 in case the tween is nested in a Sequence)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetLoops\`\`1(\`\`0,System.Int32,DG.Tweening.LoopType)\\">",
                      "<summary>Sets the looping options for the tween.",
                      "Has no effect if the tween has already started</summary>",
                      "<param name=\\"loops\\">Number of cycles to play (-1 for infinite - will be converted to 1 in case the tween is nested in a Sequence)</param>",
                      "<param name=\\"loopType\\">Loop behaviour type (default: LoopType.Restart)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetEase\`\`1(\`\`0,DG.Tweening.Ease)\\">",
                      "<summary>Sets the ease of the tween.",
                      "<para>If applied to Sequences eases the whole sequence animation</para></summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetEase\`\`1(\`\`0,DG.Tweening.Ease,System.Single)\\">",
                      "<summary>Sets the ease of the tween.",
                      "<para>If applied to Sequences eases the whole sequence animation</para></summary>",
                      "<param name=\\"overshoot\\">",
                      "Eventual overshoot to use with Back or Flash ease (default is 1.70158 - 1 for Flash).",
                      "<para>In case of Flash ease it must be an intenger and sets the total number of flashes that will happen.",
                      "Using an even number will complete the tween on the starting value, while an odd one will complete it on the end value.</para>",
                      "</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetEase\`\`1(\`\`0,DG.Tweening.Ease,System.Single,System.Single)\\">",
                      "<summary>Sets the ease of the tween.",
                      "<para>If applied to Sequences eases the whole sequence animation</para></summary>",
                      "<param name=\\"amplitude\\">Eventual amplitude to use with Elastic easeType or overshoot to use with Flash easeType (default is 1.70158 - 1 for Flash).",
                      "<para>In case of Flash ease it must be an integer and sets the total number of flashes that will happen.",
                      "Using an even number will complete the tween on the starting value, while an odd one will complete it on the end value.</para>",
                      "</param>",
                      "<param name=\\"period\\">Eventual period to use with Elastic or Flash easeType (default is 0).",
                      "<para>In case of Flash ease it indicates the power in time of the ease, and must be between -1 and 1.",
                      "0 is balanced, 1 weakens the ease with time, -1 starts the ease weakened and gives it power towards the end.</para>",
                      "</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetEase\`\`1(\`\`0,UnityEngine.AnimationCurve)\\">",
                      "<summary>Sets the ease of the tween using an AnimationCurve.",
                      "<para>If applied to Sequences eases the whole sequence animation</para></summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetEase\`\`1(\`\`0,DG.Tweening.EaseFunction)\\">",
                      "<summary>Sets the ease of the tween using a custom ease function (which must return a value between 0 and 1).",
                      "<para>If applied to Sequences eases the whole sequence animation</para></summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetRecyclable\`\`1(\`\`0)\\">",
                      "<summary>Allows the tween to be recycled after being killed.</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetRecyclable\`\`1(\`\`0,System.Boolean)\\">",
                      "<summary>Sets the recycling behaviour for the tween.</summary>",
                      "<param name=\\"recyclable\\">If TRUE the tween will be recycled after being killed, otherwise it will be destroyed.</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetUpdate\`\`1(\`\`0,System.Boolean)\\">",
                      "<summary>Sets the update type to UpdateType.Normal and lets you choose if it should be independent from Unity's Time.timeScale</summary>",
                      "<param name=\\"isIndependentUpdate\\">If TRUE the tween will ignore Unity's Time.timeScale</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetUpdate\`\`1(\`\`0,DG.Tweening.UpdateType)\\">",
                      "<summary>Sets the type of update for the tween</summary>",
                      "<param name=\\"updateType\\">The type of update (defalt: UpdateType.Normal)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetUpdate\`\`1(\`\`0,DG.Tweening.UpdateType,System.Boolean)\\">",
                      "<summary>Sets the type of update for the tween and lets you choose if it should be independent from Unity's Time.timeScale</summary>",
                      "<param name=\\"updateType\\">The type of update</param>",
                      "<param name=\\"isIndependentUpdate\\">If TRUE the tween will ignore Unity's Time.timeScale</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetInverted\`\`1(\`\`0)\\">",
                      "<summary>EXPERIMENTAL: inverts this tween, so that it will play from the end to the beginning",
                      "(playing it backwards will actually play it from the beginning to the end).",
                      "<code>Has no effect</code> if the tween has already started or if it's added to a Sequence</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetInverted\`\`1(\`\`0,System.Boolean)\\">",
                      "<summary>EXPERIMENTAL: inverts this tween, so that it will play from the end to the beginning",
                      "(playing it backwards will actually play it from the beginning to the end).",
                      "<code>Has no effect</code> if the tween has already started or if it's added to a Sequence</summary>",
                      "<param name=\\"inverted\\">If TRUE the tween will be inverted, otherwise it won't</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.OnStart\`\`1(\`\`0,DG.Tweening.TweenCallback)\\">",
                      "<summary>Sets the <code>onStart</code> callback for the tween, clearing any previous <code>onStart</code> callback that was set.",
                      "Called the first time the tween is set in a playing state, after any eventual delay</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.OnPlay\`\`1(\`\`0,DG.Tweening.TweenCallback)\\">",
                      "<summary>Sets the <code>onPlay</code> callback for the tween, clearing any previous <code>onPlay</code> callback that was set.",
                      "Called when the tween is set in a playing state, after any eventual delay.",
                      "Also called each time the tween resumes playing from a paused state</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.OnPause\`\`1(\`\`0,DG.Tweening.TweenCallback)\\">",
                      "<summary>Sets the <code>onPause</code> callback for the tween, clearing any previous <code>onPause</code> callback that was set.",
                      "Called when the tween state changes from playing to paused.",
                      "If the tween has autoKill set to FALSE, this is called also when the tween reaches completion.</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.OnRewind\`\`1(\`\`0,DG.Tweening.TweenCallback)\\">",
                      "<summary>Sets the <code>onRewind</code> callback for the tween, clearing any previous <code>onRewind</code> callback that was set.",
                      "Called when the tween is rewinded,",
                      "either by calling <code>Rewind</code> or by reaching the start position while playing backwards.",
                      "Rewinding a tween that is already rewinded will not fire this callback</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.OnUpdate\`\`1(\`\`0,DG.Tweening.TweenCallback)\\">",
                      "<summary>Sets the <code>onUpdate</code> callback for the tween, clearing any previous <code>onUpdate</code> callback that was set.",
                      "Called each time the tween updates</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.OnStepComplete\`\`1(\`\`0,DG.Tweening.TweenCallback)\\">",
                      "<summary>Sets the <code>onStepComplete</code> callback for the tween, clearing any previous <code>onStepComplete</code> callback that was set.",
                      "Called the moment the tween completes one loop cycle, even when going backwards</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.OnComplete\`\`1(\`\`0,DG.Tweening.TweenCallback)\\">",
                      "<summary>Sets the <code>onComplete</code> callback for the tween, clearing any previous <code>onComplete</code> callback that was set.",
                      "Called the moment the tween reaches its final forward position, loops included</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.OnKill\`\`1(\`\`0,DG.Tweening.TweenCallback)\\">",
                      "<summary>Sets the <code>onKill</code> callback for the tween, clearing any previous <code>onKill</code> callback that was set.",
                      "Called the moment the tween is killed</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.OnWaypointChange\`\`1(\`\`0,DG.Tweening.TweenCallback{System.Int32})\\">",
                      "<summary>Sets the <code>onWaypointChange</code> callback for the tween, clearing any previous <code>onWaypointChange</code> callback that was set.",
                      "Called when a path tween's current waypoint changes</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetAs\`\`1(\`\`0,DG.Tweening.Tween)\\">",
                      "<summary>Sets the parameters of the tween (id, ease, loops, delay, timeScale, callbacks, etc) as the parameters of the given one.",
                      "Doesn't copy specific SetOptions settings: those will need to be applied manually each time.",
                      "<para>Has no effect if the tween has already started.</para>",
                      "NOTE: the tween's <code>target</code> will not be changed</summary>",
                      "<param name=\\"asTween\\">Tween from which to copy the parameters</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetAs\`\`1(\`\`0,DG.Tweening.TweenParams)\\">",
                      "<summary>Sets the parameters of the tween (id, ease, loops, delay, timeScale, callbacks, etc) as the parameters of the given TweenParams.",
                      "<para>Has no effect if the tween has already started.</para></summary>",
                      "<param name=\\"tweenParams\\">TweenParams from which to copy the parameters</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.Append(DG.Tweening.Sequence,DG.Tweening.Tween)\\">",
                      "<summary>Adds the given tween to the end of the Sequence.",
                      "Has no effect if the Sequence has already started</summary>",
                      "<param name=\\"t\\">The tween to append</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.Prepend(DG.Tweening.Sequence,DG.Tweening.Tween)\\">",
                      "<summary>Adds the given tween to the beginning of the Sequence, pushing forward the other nested content.",
                      "Has no effect if the Sequence has already started</summary>",
                      "<param name=\\"t\\">The tween to prepend</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.Join(DG.Tweening.Sequence,DG.Tweening.Tween)\\">",
                      "<summary>Inserts the given tween at the same time position of the last tween, callback or intervale added to the Sequence.",
                      "Note that, in case of a Join after an interval, the insertion time will be the time where the interval starts, not where it finishes.",
                      "Has no effect if the Sequence has already started</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.Insert(DG.Tweening.Sequence,System.Single,DG.Tweening.Tween)\\">",
                      "<summary>Inserts the given tween at the given time position in the Sequence,",
                      "automatically adding an interval if needed.",
                      "Has no effect if the Sequence has already started</summary>",
                      "<param name=\\"atPosition\\">The time position where the tween will be placed</param>",
                      "<param name=\\"t\\">The tween to insert</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.AppendInterval(DG.Tweening.Sequence,System.Single)\\">",
                      "<summary>Adds the given interval to the end of the Sequence.",
                      "Has no effect if the Sequence has already started</summary>",
                      "<param name=\\"interval\\">The interval duration</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.PrependInterval(DG.Tweening.Sequence,System.Single)\\">",
                      "<summary>Adds the given interval to the beginning of the Sequence, pushing forward the other nested content.",
                      "Has no effect if the Sequence has already started</summary>",
                      "<param name=\\"interval\\">The interval duration</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.AppendCallback(DG.Tweening.Sequence,DG.Tweening.TweenCallback)\\">",
                      "<summary>Adds the given callback to the end of the Sequence.",
                      "Has no effect if the Sequence has already started</summary>",
                      "<param name=\\"callback\\">The callback to append</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.PrependCallback(DG.Tweening.Sequence,DG.Tweening.TweenCallback)\\">",
                      "<summary>Adds the given callback to the beginning of the Sequence, pushing forward the other nested content.",
                      "Has no effect if the Sequence has already started</summary>",
                      "<param name=\\"callback\\">The callback to prepend</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.InsertCallback(DG.Tweening.Sequence,System.Single,DG.Tweening.TweenCallback)\\">",
                      "<summary>Inserts the given callback at the given time position in the Sequence,",
                      "automatically adding an interval if needed.",
                      "Has no effect if the Sequence has already started</summary>",
                      "<param name=\\"atPosition\\">The time position where the callback will be placed</param>",
                      "<param name=\\"callback\\">The callback to insert</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.From\`\`1(\`\`0)\\">",
                      "<summary>Changes a TO tween into a FROM tween: sets the current target's position as the tween's endValue",
                      "then immediately sends the target to the previously set endValue.</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.From\`\`1(\`\`0,System.Boolean)\\">",
                      "<summary>Changes a TO tween into a FROM tween: sets the current target's position as the tween's endValue",
                      "then immediately sends the target to the previously set endValue.</summary>",
                      "<param name=\\"isRelative\\">If TRUE the FROM value will be calculated as relative to the current one</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.From\`\`1(\`\`0,System.Boolean,System.Boolean)\\">",
                      "<summary>Changes a TO tween into a FROM tween: sets the current value of the target as the endValue,",
                      "and the previously passed endValue as the actual startValue.</summary>",
                      "<param name=\\"setImmediately\\">If TRUE sets the target to from value immediately, otherwise waits for the tween to start</param>",
                      "<param name=\\"isRelative\\">If TRUE the FROM value will be calculated as relative to the current one</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.From\`\`3(DG.Tweening.Core.TweenerCore{\`\`0,\`\`1,\`\`2},\`\`1,System.Boolean,System.Boolean)\\">",
                      "<summary>Changes a TO tween into a FROM tween: sets the tween's starting value to the given one",
                      "and eventually sets the tween's target to that value immediately.</summary>",
                      "<param name=\\"fromValue\\">Value to start from</param>",
                      "<param name=\\"setImmediately\\">If TRUE sets the target to from value immediately, otherwise waits for the tween to start</param>",
                      "<param name=\\"isRelative\\">If TRUE the FROM/TO values will be calculated as relative to the current ones</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.From(DG.Tweening.Core.TweenerCore{UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions},System.Single,System.Boolean,System.Boolean)\\">",
                      "<summary>Changes a TO tween into a FROM tween: sets the tween's starting value to the given one",
                      "and eventually sets the tween's target to that value immediately.</summary>",
                      "<param name=\\"fromAlphaValue\\">Alpha value to start from (in case of Fade tweens)</param>",
                      "<param name=\\"setImmediately\\">If TRUE sets the target to from value immediately, otherwise waits for the tween to start</param>",
                      "<param name=\\"isRelative\\">If TRUE the FROM/TO values will be calculated as relative to the current ones</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.From(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions},System.Single,System.Boolean,System.Boolean)\\">",
                      "<summary>Changes a TO tween into a FROM tween: sets the tween's starting value to the given one",
                      "and eventually sets the tween's target to that value immediately.</summary>",
                      "<param name=\\"fromValue\\">Value to start from (in case of Vector tweens that act on a single coordinate or scale tweens)</param>",
                      "<param name=\\"setImmediately\\">If TRUE sets the target to from value immediately, otherwise waits for the tween to start</param>",
                      "<param name=\\"isRelative\\">If TRUE the FROM/TO values will be calculated as relative to the current ones</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.From(DG.Tweening.Core.TweenerCore{UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.CircleOptions},System.Single,System.Boolean,System.Boolean)\\">",
                      "<summary>Changes a TO tween into a FROM tween: sets the tween's starting value to the given one",
                      "and eventually sets the tween's target to that value immediately.</summary>",
                      "<param name=\\"fromValueDegrees\\">Value to start from (in case of Vector tweens that act on a single coordinate or scale tweens)</param>",
                      "<param name=\\"setImmediately\\">If TRUE sets the target to from value immediately, otherwise waits for the tween to start</param>",
                      "<param name=\\"isRelative\\">If TRUE the FROM/TO values will be calculated as relative to the current ones</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetDelay\`\`1(\`\`0,System.Single)\\">",
                      "<summary>Sets a delayed startup for the tween.<para/>",
                      "In case of Sequences behaves the same as <see cref=\\"M:DG.Tweening.TweenSettingsExtensions.PrependInterval(DG.Tweening.Sequence,System.Single)\\"/>,",
                      "which means the delay will repeat in case of loops (while with tweens it's ignored after the first loop cycle).<para/>",
                      "Has no effect if the tween has already started</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetDelay\`\`1(\`\`0,System.Single,System.Boolean)\\">",
                      "<summary>EXPERIMENTAL: implemented in v1.2.340.<para/>",
                      "Sets a delayed startup for the tween with options to choose how the delay is applied in case of Sequences.<para/>",
                      "Has no effect if the tween has already started</summary>",
                      "<param name=\\"asPrependedIntervalIfSequence\\">Only used by <see cref=\\"T:DG.Tweening.Sequence\\"/> types: If FALSE sets the delay as a one-time occurrence",
                      "(defaults to this for <see cref=\\"T:DG.Tweening.Tweener\\"/> types),",
                      "otherwise as a Sequence interval which will repeat at the beginning of every loop cycle</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetRelative\`\`1(\`\`0)\\">",
                      "<summary>Sets the tween as relative",
                      "(the endValue will be calculated as <code>startValue + endValue</code> instead than being used directly).",
                      "<para>Has no effect on Sequences or if the tween has already started</para></summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetRelative\`\`1(\`\`0,System.Boolean)\\">",
                      "<summary>If isRelative is TRUE sets the tween as relative",
                      "(the endValue will be calculated as <code>startValue + endValue</code> instead than being used directly).",
                      "<para>Has no effect on Sequences or if the tween has already started</para></summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetSpeedBased\`\`1(\`\`0)\\">",
                      "<summary>If isSpeedBased is TRUE sets the tween as speed based",
                      "(the duration will represent the number of units the tween moves x second).",
                      "<para>Has no effect on Sequences, nested tweens, or if the tween has already started</para></summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetSpeedBased\`\`1(\`\`0,System.Boolean)\\">",
                      "<summary>If isSpeedBased is TRUE sets the tween as speed based",
                      "(the duration will represent the number of units the tween moves x second).",
                      "<para>Has no effect on Sequences, nested tweens, or if the tween has already started</para></summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions},System.Boolean)\\">",
                      "<summary>Options for float tweens</summary>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions},System.Boolean)\\">",
                      "<summary>Options for Vector2 tweens</summary>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions},DG.Tweening.AxisConstraint,System.Boolean)\\">",
                      "<summary>Options for Vector2 tweens</summary>",
                      "<param name=\\"axisConstraint\\">Selecting an axis will tween the vector only on that axis, leaving the others untouched</param>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions},System.Boolean)\\">",
                      "<summary>Options for Vector3 tweens</summary>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions},DG.Tweening.AxisConstraint,System.Boolean)\\">",
                      "<summary>Options for Vector3 tweens</summary>",
                      "<param name=\\"axisConstraint\\">Selecting an axis will tween the vector only on that axis, leaving the others untouched</param>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector4,UnityEngine.Vector4,DG.Tweening.Plugins.Options.VectorOptions},System.Boolean)\\">",
                      "<summary>Options for Vector4 tweens</summary>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector4,UnityEngine.Vector4,DG.Tweening.Plugins.Options.VectorOptions},DG.Tweening.AxisConstraint,System.Boolean)\\">",
                      "<summary>Options for Vector4 tweens</summary>",
                      "<param name=\\"axisConstraint\\">Selecting an axis will tween the vector only on that axis, leaving the others untouched</param>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Quaternion,UnityEngine.Vector3,DG.Tweening.Plugins.Options.QuaternionOptions},System.Boolean)\\">",
                      "<summary>Options for Quaternion tweens</summary>",
                      "<param name=\\"useShortest360Route\\">If TRUE (default) the rotation will take the shortest route, and will not rotate more than 360°.",
                      "If FALSE the rotation will be fully accounted. Is always FALSE if the tween is set as relative</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions},System.Boolean)\\">",
                      "<summary>Options for Color tweens</summary>",
                      "<param name=\\"alphaOnly\\">If TRUE only the alpha value of the color will be tweened</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Rect,UnityEngine.Rect,DG.Tweening.Plugins.Options.RectOptions},System.Boolean)\\">",
                      "<summary>Options for Vector4 tweens</summary>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{System.String,System.String,DG.Tweening.Plugins.Options.StringOptions},System.Boolean,DG.Tweening.ScrambleMode,System.String)\\">",
                      "<summary>Options for Vector4 tweens</summary>",
                      "<param name=\\"richTextEnabled\\">If TRUE, rich text will be interpreted correctly while animated,",
                      "otherwise all tags will be considered as normal text</param>",
                      "<param name=\\"scrambleMode\\">The type of scramble to use, if any</param>",
                      "<param name=\\"scrambleChars\\">A string containing the characters to use for scrambling.",
                      "Use as many characters as possible (minimum 10) because DOTween uses a fast scramble mode which gives better results with more characters.",
                      "Leave it to NULL to use default ones</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,UnityEngine.Vector3[],DG.Tweening.Plugins.Options.Vector3ArrayOptions},System.Boolean)\\">",
                      "<summary>Options for Vector3Array tweens</summary>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,UnityEngine.Vector3[],DG.Tweening.Plugins.Options.Vector3ArrayOptions},DG.Tweening.AxisConstraint,System.Boolean)\\">",
                      "<summary>Options for Vector3Array tweens</summary>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.CircleOptions},System.Single,System.Boolean,System.Boolean)\\">",
                      "<summary>Options for ShapeCircle tweens</summary>",
                      "<param name=\\"relativeCenter\\">If TRUE the center you set in the DOTween.To method will be considered as relative",
                      "to the starting position of the target</param>",
                      "<param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions},DG.Tweening.AxisConstraint,DG.Tweening.AxisConstraint)\\">",
                      "<summary>Options for Path tweens (created via the <code>DOPath</code> shortcut)</summary>",
                      "<param name=\\"lockPosition\\">The eventual movement axis to lock. You can input multiple axis if you separate them like this:",
                      "<para>AxisConstrain.X | AxisConstraint.Y</para></param>",
                      "<param name=\\"lockRotation\\">The eventual rotation axis to lock. You can input multiple axis if you separate them like this:",
                      "<para>AxisConstrain.X | AxisConstraint.Y</para></param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetOptions(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions},System.Boolean,DG.Tweening.AxisConstraint,DG.Tweening.AxisConstraint)\\">",
                      "<summary>Options for Path tweens (created via the <code>DOPath</code> shortcut)</summary>",
                      "<param name=\\"closePath\\">If TRUE the path will be automatically closed</param>",
                      "<param name=\\"lockPosition\\">The eventual movement axis to lock. You can input multiple axis if you separate them like this:",
                      "<para>AxisConstrain.X | AxisConstraint.Y</para></param>",
                      "<param name=\\"lockRotation\\">The eventual rotation axis to lock. You can input multiple axis if you separate them like this:",
                      "<para>AxisConstrain.X | AxisConstraint.Y</para></param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetLookAt(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions},UnityEngine.Vector3,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3})\\">",
                      "<summary>Additional LookAt options for Path tweens (created via the <code>DOPath</code> shortcut).",
                      "Orients the target towards the given position.",
                      "Must be chained directly to the tween creation method or to a <code>SetOptions</code></summary>",
                      "<param name=\\"lookAtPosition\\">The position to look at</param>",
                      "<param name=\\"forwardDirection\\">The eventual direction to consider as \\"forward\\".",
                      "If left to NULL defaults to the regular forward side of the transform</param>",
                      "<param name=\\"up\\">The vector that defines in which direction up is (default: Vector3.up)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetLookAt(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions},UnityEngine.Vector3,System.Boolean)\\">",
                      "<summary>Additional LookAt options for Path tweens (created via the <code>DOPath</code> shortcut).",
                      "Orients the target towards the given position with options to keep the Z rotation stable.",
                      "Must be chained directly to the tween creation method or to a <code>SetOptions</code></summary>",
                      "<param name=\\"lookAtPosition\\">The position to look at</param>",
                      "<param name=\\"stableZRotation\\">If TRUE doesn't rotate the target along the Z axis</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetLookAt(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions},UnityEngine.Transform,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3})\\">",
                      "<summary>Additional LookAt options for Path tweens (created via the <code>DOPath</code> shortcut).",
                      "Orients the target towards another transform.",
                      "Must be chained directly to the tween creation method or to a <code>SetOptions</code></summary>",
                      "<param name=\\"lookAtTransform\\">The transform to look at</param>",
                      "<param name=\\"forwardDirection\\">The eventual direction to consider as \\"forward\\".",
                      "If left to NULL defaults to the regular forward side of the transform</param>",
                      "<param name=\\"up\\">The vector that defines in which direction up is (default: Vector3.up)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetLookAt(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions},UnityEngine.Transform,System.Boolean)\\">",
                      "<summary>Additional LookAt options for Path tweens (created via the <code>DOPath</code> shortcut).",
                      "Orients the target towards another transform with options to keep the Z rotation stable.",
                      "Must be chained directly to the tween creation method or to a <code>SetOptions</code></summary>",
                      "<param name=\\"lookAtTransform\\">The transform to look at</param>",
                      "<param name=\\"stableZRotation\\">If TRUE doesn't rotate the target along the Z axis</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetLookAt(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions},System.Single,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3})\\">",
                      "<summary>Additional LookAt options for Path tweens (created via the <code>DOPath</code> shortcut).",
                      "Orients the target to the path, with the given lookAhead.",
                      "Must be chained directly to the tween creation method or to a <code>SetOptions</code></summary>",
                      "<param name=\\"lookAhead\\">The percentage of lookAhead to use (0 to 1)</param>",
                      "<param name=\\"forwardDirection\\">The eventual direction to consider as \\"forward\\".",
                      "If left to NULL defaults to the regular forward side of the transform</param>",
                      "<param name=\\"up\\">The vector that defines in which direction up is (default: Vector3.up)</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.TweenSettingsExtensions.SetLookAt(DG.Tweening.Core.TweenerCore{UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions},System.Single,System.Boolean)\\">",
                      "<summary>Additional LookAt options for Path tweens (created via the <code>DOPath</code> shortcut).",
                      "Orients the path with options to keep the Z rotation stable.",
                      "Must be chained directly to the tween creation method or to a <code>SetOptions</code></summary>",
                      "<param name=\\"lookAhead\\">The percentage of lookAhead to use (0 to 1)</param>",
                      "<param name=\\"stableZRotation\\">If TRUE doesn't rotate the target along the Z axis</param>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.LogBehaviour\\">",
                      "<summary>",
                      "Types of log behaviours",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.LogBehaviour.Default\\">",
                      "<summary>Log only warnings and errors</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.LogBehaviour.Verbose\\">",
                      "<summary>Log warnings, errors and additional infos</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.LogBehaviour.ErrorsOnly\\">",
                      "<summary>Log only errors</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Tween\\">",
                      "<summary>",
                      "Indicates either a Tweener or a Sequence",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Tween.timeScale\\">",
                      "<summary>TimeScale for the tween</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Tween.isBackwards\\">",
                      "<summary>If TRUE the tween will play backwards</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Tween.isInverted\\">",
                      "<summary>If TRUE the tween is completely inverted but without playing it backwards",
                      "(play backwards will actually play the tween in the original direction)</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Tween.id\\">",
                      "<summary>Object ID (usable for filtering with DOTween static methods). Can be anything except a string or an int",
                      "(use <see cref=\\"F:DG.Tweening.Tween.stringId\\"/> or <see cref=\\"F:DG.Tweening.Tween.intId\\"/> for those)</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Tween.stringId\\">",
                      "<summary>String ID (usable for filtering with DOTween static methods). 2X faster than using an object id</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Tween.intId\\">",
                      "<summary>Int ID (usable for filtering with DOTween static methods). 4X faster than using an object id, 2X faster than using a string id.",
                      "Default is -999 so avoid using an ID like that or it will capture all unset intIds</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Tween.target\\">",
                      "<summary>Tween target (usable for filtering with DOTween static methods). Automatically set by tween creation shortcuts</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Tween.onPlay\\">",
                      "<summary>Called when the tween is set in a playing state, after any eventual delay.",
                      "Also called each time the tween resumes playing from a paused state</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Tween.onPause\\">",
                      "<summary>Called when the tween state changes from playing to paused.",
                      "If the tween has autoKill set to FALSE, this is called also when the tween reaches completion.</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Tween.onRewind\\">",
                      "<summary>Called when the tween is rewinded,",
                      "either by calling <code>Rewind</code> or by reaching the start position while playing backwards.",
                      "Rewinding a tween that is already rewinded will not fire this callback</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Tween.onUpdate\\">",
                      "<summary>Called each time the tween updates</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Tween.onStepComplete\\">",
                      "<summary>Called the moment the tween completes one loop cycle</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Tween.onComplete\\">",
                      "<summary>Called the moment the tween reaches completion (loops included)</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Tween.onKill\\">",
                      "<summary>Called the moment the tween is killed</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Tween.onWaypointChange\\">",
                      "<summary>Called when a path tween's current waypoint changes</summary>",
                      "</member>",
                      "<member name=\\"P:DG.Tweening.Tween.isRelative\\">",
                      "<summary>Tweeners-only (ignored by Sequences), returns TRUE if the tween was set as relative</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.Tween.debugTargetId\\">",
                      "<summary>",
                      "Set by SetTarget if DOTween's Debug Mode is on (see DOTween Utility Panel -> \\"Store GameObject's ID\\" debug option",
                      "</summary>",
                      "</member>",
                      "<member name=\\"P:DG.Tweening.Tween.active\\">",
                      "<summary>FALSE when tween is (or should be) despawned - set only by TweenManager</summary>",
                      "</member>",
                      "<member name=\\"P:DG.Tweening.Tween.fullPosition\\">",
                      "<summary>Gets and sets the time position (loops included, delays excluded) of the tween</summary>",
                      "</member>",
                      "<member name=\\"P:DG.Tweening.Tween.hasLoops\\">",
                      "<summary>Returns TRUE if the tween is set to loop (either a set number of times or infinitely)</summary>",
                      "</member>",
                      "<member name=\\"P:DG.Tweening.Tween.playedOnce\\">",
                      "<summary>TRUE after the tween was set in a play state at least once, AFTER any delay is elapsed</summary>",
                      "</member>",
                      "<member name=\\"P:DG.Tweening.Tween.position\\">",
                      "<summary>Time position within a single loop cycle</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.Tweener\\">",
                      "<summary>",
                      "Animates a single value",
                      "</summary>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Tweener.ChangeStartValue(System.Object,System.Single)\\">",
                      "<summary>Changes the start value of a tween and rewinds it (without pausing it).",
                      "Has no effect with tweens that are inside Sequences</summary>",
                      "<param name=\\"newStartValue\\">The new start value</param>",
                      "<param name=\\"newDuration\\">If bigger than 0 applies it as the new tween duration</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Tweener.ChangeEndValue(System.Object,System.Single,System.Boolean)\\">",
                      "<summary>Changes the end value of a tween and rewinds it (without pausing it).",
                      "Has no effect with tweens that are inside Sequences</summary>",
                      "<param name=\\"newEndValue\\">The new end value</param>",
                      "<param name=\\"newDuration\\">If bigger than 0 applies it as the new tween duration</param>",
                      "<param name=\\"snapStartValue\\">If TRUE the start value will become the current target's value, otherwise it will stay the same</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Tweener.ChangeEndValue(System.Object,System.Boolean)\\">",
                      "<summary>Changes the end value of a tween and rewinds it (without pausing it).",
                      "Has no effect with tweens that are inside Sequences</summary>",
                      "<param name=\\"newEndValue\\">The new end value</param>",
                      "<param name=\\"snapStartValue\\">If TRUE the start value will become the current target's value, otherwise it will stay the same</param>",
                      "</member>",
                      "<member name=\\"M:DG.Tweening.Tweener.ChangeValues(System.Object,System.Object,System.Single)\\">",
                      "<summary>Changes the start and end value of a tween and rewinds it (without pausing it).",
                      "Has no effect with tweens that are inside Sequences</summary>",
                      "<param name=\\"newStartValue\\">The new start value</param>",
                      "<param name=\\"newEndValue\\">The new end value</param>",
                      "<param name=\\"newDuration\\">If bigger than 0 applies it as the new tween duration</param>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.TweenType\\">",
                      "<summary>",
                      "Used internally",
                      "</summary>",
                      "</member>",
                      "<member name=\\"T:DG.Tweening.UpdateType\\">",
                      "<summary>",
                      "Update type",
                      "</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.UpdateType.Normal\\">",
                      "<summary>Updates every frame during Update calls</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.UpdateType.Late\\">",
                      "<summary>Updates every frame during LateUpdate calls</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.UpdateType.Fixed\\">",
                      "<summary>Updates using FixedUpdate calls</summary>",
                      "</member>",
                      "<member name=\\"F:DG.Tweening.UpdateType.Manual\\">",
                      "<summary>Updates using manual update calls</summary>",
                      "</member>",
                      "</members>",
                      "</doc>"
                    ]
                  },
                  "DOTween.XML.meta": {
                    "path": "./unity/Lumberjack/Assets/DOTween 4/DOTween.XML.meta",
                    "isBinary": true,
                    "content": null
                  },
                  "DOTween.dll": {
                    "path": "./unity/Lumberjack/Assets/DOTween 4/DOTween.dll",
                    "isBinary": true,
                    "content": null
                  },
                  "DOTween.dll.mdb": {
                    "path": "./unity/Lumberjack/Assets/DOTween 4/DOTween.dll.mdb",
                    "isBinary": true,
                    "content": null
                  },
                  "DOTween.dll.mdb.meta": {
                    "path": "./unity/Lumberjack/Assets/DOTween 4/DOTween.dll.mdb.meta",
                    "isBinary": true,
                    "content": null
                  },
                  "DOTween.dll.meta": {
                    "path": "./unity/Lumberjack/Assets/DOTween 4/DOTween.dll.meta",
                    "isBinary": true,
                    "content": null
                  },
                  "Editor": {
                    "path": "./unity/Lumberjack/Assets/DOTween 4/Editor",
                    "children": {
                      "DOTweenEditor.XML": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Editor/DOTweenEditor.XML",
                        "isBinary": false,
                        "content": [
                          "<?xml version=\\"1.0\\"?>",
                          "<doc>",
                          "<assembly>",
                          "<name>DOTweenEditor</name>",
                          "</assembly>",
                          "<members>",
                          "<member name=\\"T:DG.DOTweenEditor.EditorCompatibilityUtils\\">",
                          "<summary>",
                          "Contains compatibility methods taken from DemiEditor (for when DOTween is without it)",
                          "</summary>",
                          "</member>",
                          "<member name=\\"M:DG.DOTweenEditor.EditorCompatibilityUtils.FindObjectOfType\`\`1(System.Boolean)\\">",
                          "<summary>",
                          "Warning: some versions of this method don't have the includeInactive parameter so it won't be taken into account",
                          "</summary>",
                          "</member>",
                          "<member name=\\"M:DG.DOTweenEditor.EditorCompatibilityUtils.FindObjectOfType(System.Type,System.Boolean)\\">",
                          "<summary>",
                          "Warning: some versions of this method don't have the includeInactive parameter so it won't be taken into account",
                          "</summary>",
                          "</member>",
                          "<member name=\\"M:DG.DOTweenEditor.EditorCompatibilityUtils.FindObjectsOfType\`\`1(System.Boolean)\\">",
                          "<summary>",
                          "Warning: some versions of this method don't have the includeInactive parameter so it won't be taken into account",
                          "</summary>",
                          "</member>",
                          "<member name=\\"M:DG.DOTweenEditor.EditorCompatibilityUtils.FindObjectsOfType(System.Type,System.Boolean)\\">",
                          "<summary>",
                          "Warning: some versions of this method don't have the includeInactive parameter so it won't be taken into account",
                          "</summary>",
                          "</member>",
                          "<member name=\\"M:DG.DOTweenEditor.DOTweenEditorPreview.Start(System.Action)\\">",
                          "<summary>",
                          "Starts the update loop of tween in the editor. Has no effect during playMode.",
                          "</summary>",
                          "<param name=\\"onPreviewUpdated\\">Eventual callback to call after every update</param>",
                          "</member>",
                          "<member name=\\"M:DG.DOTweenEditor.DOTweenEditorPreview.Stop(System.Boolean,System.Boolean)\\">",
                          "<summary>",
                          "Stops the update loop and clears the onPreviewUpdated callback.",
                          "</summary>",
                          "<param name=\\"resetTweenTargets\\">If TRUE also resets the tweened objects to their original state.",
                          "Note that this works by calling Rewind on all tweens, so it will work correctly",
                          "only if you have a single tween type per object and it wasn't killed</param>",
                          "<param name=\\"clearTweens\\">If TRUE also kills any cached tween</param>",
                          "</member>",
                          "<member name=\\"M:DG.DOTweenEditor.DOTweenEditorPreview.PrepareTweenForPreview(DG.Tweening.Tween,System.Boolean,System.Boolean,System.Boolean)\\">",
                          "<summary>",
                          "Readies the tween for editor preview by setting its UpdateType to Manual plus eventual extra settings.",
                          "</summary>",
                          "<param name=\\"t\\">The tween to ready</param>",
                          "<param name=\\"clearCallbacks\\">If TRUE (recommended) removes all callbacks (OnComplete/Rewind/etc)</param>",
                          "<param name=\\"preventAutoKill\\">If TRUE prevents the tween from being auto-killed at completion</param>",
                          "<param name=\\"andPlay\\">If TRUE starts playing the tween immediately</param>",
                          "</member>",
                          "<member name=\\"F:DG.DOTweenEditor.EditorVersion.Version\\">",
                          "<summary>Full major version + first minor version (ex: 2018.1f)</summary>",
                          "</member>",
                          "<member name=\\"F:DG.DOTweenEditor.EditorVersion.MajorVersion\\">",
                          "<summary>Major version</summary>",
                          "</member>",
                          "<member name=\\"F:DG.DOTweenEditor.EditorVersion.MinorVersion\\">",
                          "<summary>First minor version (ex: in 2018.1 it would be 1)</summary>",
                          "</member>",
                          "<member name=\\"M:DG.DOTweenEditor.EditorUtils.SetEditorTexture(UnityEngine.Texture2D,UnityEngine.FilterMode,System.Int32)\\">",
                          "<summary>",
                          "Checks that the given editor texture use the correct import settings,",
                          "and applies them if they're incorrect.",
                          "</summary>",
                          "</member>",
                          "<member name=\\"M:DG.DOTweenEditor.EditorUtils.DOTweenSetupRequired\\">",
                          "<summary>",
                          "Returns TRUE if setup is required",
                          "</summary>",
                          "</member>",
                          "<member name=\\"M:DG.DOTweenEditor.EditorUtils.AssetExists(System.String)\\">",
                          "<summary>",
                          "Returns TRUE if the file/directory at the given path exists.",
                          "</summary>",
                          "<param name=\\"adbPath\\">Path, relative to Unity's project folder</param>",
                          "<returns></returns>",
                          "</member>",
                          "<member name=\\"M:DG.DOTweenEditor.EditorUtils.ADBPathToFullPath(System.String)\\">",
                          "<summary>",
                          "Converts the given project-relative path to a full path,",
                          "with backward (\\\\) slashes).",
                          "</summary>",
                          "</member>",
                          "<member name=\\"M:DG.DOTweenEditor.EditorUtils.FullPathToADBPath(System.String)\\">",
                          "<summary>",
                          "Converts the given full path to a path usable with AssetDatabase methods",
                          "(relative to Unity's project folder, and with the correct Unity forward (/) slashes).",
                          "</summary>",
                          "</member>",
                          "<member name=\\"M:DG.DOTweenEditor.EditorUtils.ConnectToSourceAsset\`\`1(System.String,System.Boolean)\\">",
                          "<summary>",
                          "Connects to a <see cref=\\"T:UnityEngine.ScriptableObject\\"/> asset.",
                          "If the asset already exists at the given path, loads it and returns it.",
                          "Otherwise, either returns NULL or automatically creates it before loading and returning it",
                          "(depending on the given parameters).",
                          "</summary>",
                          "<typeparam name=\\"T\\">Asset type</typeparam>",
                          "<param name=\\"adbFilePath\\">File path (relative to Unity's project folder)</param>",
                          "<param name=\\"createIfMissing\\">If TRUE and the requested asset doesn't exist, forces its creation</param>",
                          "</member>",
                          "<member name=\\"M:DG.DOTweenEditor.EditorUtils.GetAssemblyFilePath(System.Reflection.Assembly)\\">",
                          "<summary>",
                          "Full path for the given loaded assembly, assembly file included",
                          "</summary>",
                          "</member>",
                          "<member name=\\"M:DG.DOTweenEditor.EditorUtils.AddGlobalDefine(System.String)\\">",
                          "<summary>",
                          "Adds the given global define if it's not already present",
                          "</summary>",
                          "</member>",
                          "<member name=\\"M:DG.DOTweenEditor.EditorUtils.RemoveGlobalDefine(System.String)\\">",
                          "<summary>",
                          "Removes the given global define if it's present",
                          "</summary>",
                          "</member>",
                          "<member name=\\"M:DG.DOTweenEditor.EditorUtils.HasGlobalDefine(System.String,System.Nullable{UnityEditor.BuildTargetGroup})\\">",
                          "<summary>",
                          "Returns TRUE if the given global define is present in all the <see cref=\\"T:UnityEditor.BuildTargetGroup\\"/>",
                          "or only in the given <see cref=\\"T:UnityEditor.BuildTargetGroup\\"/>, depending on passed parameters.<para/>",
                          "</summary>",
                          "<param name=\\"id\\"></param>",
                          "<param name=\\"buildTargetGroup\\"><see cref=\\"T:UnityEditor.BuildTargetGroup\\"/>to use. Leave NULL to check in all of them.</param>",
                          "</member>",
                          "<member name=\\"T:DG.DOTweenEditor.DOTweenDefines\\">",
                          "<summary>",
                          "Not used as menu item anymore, but as a utiity function",
                          "</summary>",
                          "</member>",
                          "<member name=\\"F:DG.DOTweenEditor.UnityEditorVersion.Version\\">",
                          "<summary>Full major version + first minor version (ex: 2018.1f)</summary>",
                          "</member>",
                          "<member name=\\"F:DG.DOTweenEditor.UnityEditorVersion.MajorVersion\\">",
                          "<summary>Major version</summary>",
                          "</member>",
                          "<member name=\\"F:DG.DOTweenEditor.UnityEditorVersion.MinorVersion\\">",
                          "<summary>First minor version (ex: in 2018.1 it would be 1)</summary>",
                          "</member>",
                          "</members>",
                          "</doc>"
                        ]
                      },
                      "DOTweenEditor.XML.meta": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Editor/DOTweenEditor.XML.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "DOTweenEditor.dll": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Editor/DOTweenEditor.dll",
                        "isBinary": true,
                        "content": null
                      },
                      "DOTweenEditor.dll.mdb": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Editor/DOTweenEditor.dll.mdb",
                        "isBinary": true,
                        "content": null
                      },
                      "DOTweenEditor.dll.mdb.meta": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Editor/DOTweenEditor.dll.mdb.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "DOTweenEditor.dll.meta": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Editor/DOTweenEditor.dll.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "Imgs": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Editor/Imgs",
                        "children": {
                          "DOTweenIcon.png": {
                            "path": "./unity/Lumberjack/Assets/DOTween 4/Editor/Imgs/DOTweenIcon.png",
                            "isBinary": true,
                            "content": null
                          },
                          "DOTweenIcon.png.meta": {
                            "path": "./unity/Lumberjack/Assets/DOTween 4/Editor/Imgs/DOTweenIcon.png.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "DOTweenMiniIcon.png": {
                            "path": "./unity/Lumberjack/Assets/DOTween 4/Editor/Imgs/DOTweenMiniIcon.png",
                            "isBinary": true,
                            "content": null
                          },
                          "DOTweenMiniIcon.png.meta": {
                            "path": "./unity/Lumberjack/Assets/DOTween 4/Editor/Imgs/DOTweenMiniIcon.png.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "Footer.png": {
                            "path": "./unity/Lumberjack/Assets/DOTween 4/Editor/Imgs/Footer.png",
                            "isBinary": true,
                            "content": null
                          },
                          "Footer.png.meta": {
                            "path": "./unity/Lumberjack/Assets/DOTween 4/Editor/Imgs/Footer.png.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "Footer_dark.png": {
                            "path": "./unity/Lumberjack/Assets/DOTween 4/Editor/Imgs/Footer_dark.png",
                            "isBinary": true,
                            "content": null
                          },
                          "Footer_dark.png.meta": {
                            "path": "./unity/Lumberjack/Assets/DOTween 4/Editor/Imgs/Footer_dark.png.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "Header.jpg": {
                            "path": "./unity/Lumberjack/Assets/DOTween 4/Editor/Imgs/Header.jpg",
                            "isBinary": true,
                            "content": null
                          },
                          "Header.jpg.meta": {
                            "path": "./unity/Lumberjack/Assets/DOTween 4/Editor/Imgs/Header.jpg.meta",
                            "isBinary": true,
                            "content": null
                          }
                        }
                      },
                      "Imgs.meta": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Editor/Imgs.meta",
                        "isBinary": true,
                        "content": null
                      }
                    }
                  },
                  "Editor.meta": {
                    "path": "./unity/Lumberjack/Assets/DOTween 4/Editor.meta",
                    "isBinary": true,
                    "content": null
                  },
                  "Modules": {
                    "path": "./unity/Lumberjack/Assets/DOTween 4/Modules",
                    "children": {
                      "DOTweenModuleAudio.cs": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Modules/DOTweenModuleAudio.cs",
                        "isBinary": false,
                        "content": [
                          "// Author: Daniele Giardini - http://www.demigiant.com",
                          "// Created: 2018/07/13",
                          "#if true // MODULE_MARKER",
                          "using System;",
                          "using DG.Tweening.Core;",
                          "using DG.Tweening.Plugins.Options;",
                          "using UnityEngine;",
                          "using UnityEngine.Audio; // Required for AudioMixer",
                          "#pragma warning disable 1591",
                          "namespace DG.Tweening",
                          "{",
                          "public static class DOTweenModuleAudio",
                          "{",
                          "#region Shortcuts",
                          "#region Audio",
                          "/// <summary>Tweens an AudioSource's volume to the given value.",
                          "/// Also stores the AudioSource as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach (0 to 1)</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<float, float, FloatOptions> DOFade(this AudioSource target, float endValue, float duration)",
                          "{",
                          "if (endValue < 0) endValue = 0;",
                          "else if (endValue > 1) endValue = 1;",
                          "TweenerCore<float, float, FloatOptions> t = DOTween.To(() => target.volume, x => target.volume = x, endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens an AudioSource's pitch to the given value.",
                          "/// Also stores the AudioSource as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<float, float, FloatOptions> DOPitch(this AudioSource target, float endValue, float duration)",
                          "{",
                          "TweenerCore<float, float, FloatOptions> t = DOTween.To(() => target.pitch, x => target.pitch = x, endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "#endregion",
                          "#region AudioMixer",
                          "/// <summary>Tweens an AudioMixer's exposed float to the given value.",
                          "/// Also stores the AudioMixer as the tween's target so it can be used for filtered operations.",
                          "/// Note that you need to manually expose a float in an AudioMixerGroup in order to be able to tween it from an AudioMixer.</summary>",
                          "/// <param name=\\"floatName\\">Name given to the exposed float to set</param>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<float, float, FloatOptions> DOSetFloat(this AudioMixer target, string floatName, float endValue, float duration)",
                          "{",
                          "TweenerCore<float, float, FloatOptions> t = DOTween.To(()=> {",
                          "float currVal;",
                          "target.GetFloat(floatName, out currVal);",
                          "return currVal;",
                          "}, x=> target.SetFloat(floatName, x), endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "#region Operation Shortcuts",
                          "/// <summary>",
                          "/// Completes all tweens that have this target as a reference",
                          "/// (meaning tweens that were started from this target, or that had this target added as an Id)",
                          "/// and returns the total number of tweens completed",
                          "/// (meaning the tweens that don't have infinite loops and were not already complete)",
                          "/// </summary>",
                          "/// <param name=\\"withCallbacks\\">For Sequences only: if TRUE also internal Sequence callbacks will be fired,",
                          "/// otherwise they will be ignored</param>",
                          "public static int DOComplete(this AudioMixer target, bool withCallbacks = false)",
                          "{",
                          "return DOTween.Complete(target, withCallbacks);",
                          "}",
                          "/// <summary>",
                          "/// Kills all tweens that have this target as a reference",
                          "/// (meaning tweens that were started from this target, or that had this target added as an Id)",
                          "/// and returns the total number of tweens killed.",
                          "/// </summary>",
                          "/// <param name=\\"complete\\">If TRUE completes the tween before killing it</param>",
                          "public static int DOKill(this AudioMixer target, bool complete = false)",
                          "{",
                          "return DOTween.Kill(target, complete);",
                          "}",
                          "/// <summary>",
                          "/// Flips the direction (backwards if it was going forward or viceversa) of all tweens that have this target as a reference",
                          "/// (meaning tweens that were started from this target, or that had this target added as an Id)",
                          "/// and returns the total number of tweens flipped.",
                          "/// </summary>",
                          "public static int DOFlip(this AudioMixer target)",
                          "{",
                          "return DOTween.Flip(target);",
                          "}",
                          "/// <summary>",
                          "/// Sends to the given position all tweens that have this target as a reference",
                          "/// (meaning tweens that were started from this target, or that had this target added as an Id)",
                          "/// and returns the total number of tweens involved.",
                          "/// </summary>",
                          "/// <param name=\\"to\\">Time position to reach",
                          "/// (if higher than the whole tween duration the tween will simply reach its end)</param>",
                          "/// <param name=\\"andPlay\\">If TRUE will play the tween after reaching the given position, otherwise it will pause it</param>",
                          "public static int DOGoto(this AudioMixer target, float to, bool andPlay = false)",
                          "{",
                          "return DOTween.Goto(target, to, andPlay);",
                          "}",
                          "/// <summary>",
                          "/// Pauses all tweens that have this target as a reference",
                          "/// (meaning tweens that were started from this target, or that had this target added as an Id)",
                          "/// and returns the total number of tweens paused.",
                          "/// </summary>",
                          "public static int DOPause(this AudioMixer target)",
                          "{",
                          "return DOTween.Pause(target);",
                          "}",
                          "/// <summary>",
                          "/// Plays all tweens that have this target as a reference",
                          "/// (meaning tweens that were started from this target, or that had this target added as an Id)",
                          "/// and returns the total number of tweens played.",
                          "/// </summary>",
                          "public static int DOPlay(this AudioMixer target)",
                          "{",
                          "return DOTween.Play(target);",
                          "}",
                          "/// <summary>",
                          "/// Plays backwards all tweens that have this target as a reference",
                          "/// (meaning tweens that were started from this target, or that had this target added as an Id)",
                          "/// and returns the total number of tweens played.",
                          "/// </summary>",
                          "public static int DOPlayBackwards(this AudioMixer target)",
                          "{",
                          "return DOTween.PlayBackwards(target);",
                          "}",
                          "/// <summary>",
                          "/// Plays forward all tweens that have this target as a reference",
                          "/// (meaning tweens that were started from this target, or that had this target added as an Id)",
                          "/// and returns the total number of tweens played.",
                          "/// </summary>",
                          "public static int DOPlayForward(this AudioMixer target)",
                          "{",
                          "return DOTween.PlayForward(target);",
                          "}",
                          "/// <summary>",
                          "/// Restarts all tweens that have this target as a reference",
                          "/// (meaning tweens that were started from this target, or that had this target added as an Id)",
                          "/// and returns the total number of tweens restarted.",
                          "/// </summary>",
                          "public static int DORestart(this AudioMixer target)",
                          "{",
                          "return DOTween.Restart(target);",
                          "}",
                          "/// <summary>",
                          "/// Rewinds all tweens that have this target as a reference",
                          "/// (meaning tweens that were started from this target, or that had this target added as an Id)",
                          "/// and returns the total number of tweens rewinded.",
                          "/// </summary>",
                          "public static int DORewind(this AudioMixer target)",
                          "{",
                          "return DOTween.Rewind(target);",
                          "}",
                          "/// <summary>",
                          "/// Smoothly rewinds all tweens that have this target as a reference",
                          "/// (meaning tweens that were started from this target, or that had this target added as an Id)",
                          "/// and returns the total number of tweens rewinded.",
                          "/// </summary>",
                          "public static int DOSmoothRewind(this AudioMixer target)",
                          "{",
                          "return DOTween.SmoothRewind(target);",
                          "}",
                          "/// <summary>",
                          "/// Toggles the paused state (plays if it was paused, pauses if it was playing) of all tweens that have this target as a reference",
                          "/// (meaning tweens that were started from this target, or that had this target added as an Id)",
                          "/// and returns the total number of tweens involved.",
                          "/// </summary>",
                          "public static int DOTogglePause(this AudioMixer target)",
                          "{",
                          "return DOTween.TogglePause(target);",
                          "}",
                          "#endregion",
                          "#endregion",
                          "#endregion",
                          "}",
                          "}",
                          "#endif"
                        ]
                      },
                      "DOTweenModuleAudio.cs.meta": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Modules/DOTweenModuleAudio.cs.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "DOTweenModuleEPOOutline.cs": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Modules/DOTweenModuleEPOOutline.cs",
                        "isBinary": false,
                        "content": [
                          "using UnityEngine;",
                          "#if false || EPO_DOTWEEN // MODULE_MARKER",
                          "using EPOOutline;",
                          "using DG.Tweening.Plugins.Options;",
                          "using DG.Tweening;",
                          "using DG.Tweening.Core;",
                          "namespace DG.Tweening",
                          "{",
                          "public static class DOTweenModuleEPOOutline",
                          "{",
                          "public static int DOKill(this SerializedPass target, bool complete)",
                          "{",
                          "return DOTween.Kill(target, complete);",
                          "}",
                          "public static TweenerCore<float, float, FloatOptions> DOFloat(this SerializedPass target, string propertyName, float endValue, float duration)",
                          "{",
                          "var tweener = DOTween.To(() => target.GetFloat(propertyName), x => target.SetFloat(propertyName, x), endValue, duration);",
                          "tweener.SetOptions(true).SetTarget(target);",
                          "return tweener;",
                          "}",
                          "public static TweenerCore<Color, Color, ColorOptions> DOFade(this SerializedPass target, string propertyName, float endValue, float duration)",
                          "{",
                          "var tweener = DOTween.ToAlpha(() => target.GetColor(propertyName), x => target.SetColor(propertyName, x), endValue, duration);",
                          "tweener.SetOptions(true).SetTarget(target);",
                          "return tweener;",
                          "}",
                          "public static TweenerCore<Color, Color, ColorOptions> DOColor(this SerializedPass target, string propertyName, Color endValue, float duration)",
                          "{",
                          "var tweener = DOTween.To(() => target.GetColor(propertyName), x => target.SetColor(propertyName, x), endValue, duration);",
                          "tweener.SetOptions(false).SetTarget(target);",
                          "return tweener;",
                          "}",
                          "public static TweenerCore<Vector4, Vector4, VectorOptions> DOVector(this SerializedPass target, string propertyName, Vector4 endValue, float duration)",
                          "{",
                          "var tweener = DOTween.To(() => target.GetVector(propertyName), x => target.SetVector(propertyName, x), endValue, duration);",
                          "tweener.SetOptions(false).SetTarget(target);",
                          "return tweener;",
                          "}",
                          "public static TweenerCore<float, float, FloatOptions> DOFloat(this SerializedPass target, int propertyId, float endValue, float duration)",
                          "{",
                          "var tweener = DOTween.To(() => target.GetFloat(propertyId), x => target.SetFloat(propertyId, x), endValue, duration);",
                          "tweener.SetOptions(true).SetTarget(target);",
                          "return tweener;",
                          "}",
                          "public static TweenerCore<Color, Color, ColorOptions> DOFade(this SerializedPass target, int propertyId, float endValue, float duration)",
                          "{",
                          "var tweener = DOTween.ToAlpha(() => target.GetColor(propertyId), x => target.SetColor(propertyId, x), endValue, duration);",
                          "tweener.SetOptions(true).SetTarget(target);",
                          "return tweener;",
                          "}",
                          "public static TweenerCore<Color, Color, ColorOptions> DOColor(this SerializedPass target, int propertyId, Color endValue, float duration)",
                          "{",
                          "var tweener = DOTween.To(() => target.GetColor(propertyId), x => target.SetColor(propertyId, x), endValue, duration);",
                          "tweener.SetOptions(false).SetTarget(target);",
                          "return tweener;",
                          "}",
                          "public static TweenerCore<Vector4, Vector4, VectorOptions> DOVector(this SerializedPass target, int propertyId, Vector4 endValue, float duration)",
                          "{",
                          "var tweener = DOTween.To(() => target.GetVector(propertyId), x => target.SetVector(propertyId, x), endValue, duration);",
                          "tweener.SetOptions(false).SetTarget(target);",
                          "return tweener;",
                          "}",
                          "public static int DOKill(this Outlinable.OutlineProperties target, bool complete = false)",
                          "{",
                          "return DOTween.Kill(target, complete);",
                          "}",
                          "public static int DOKill(this Outliner target, bool complete = false)",
                          "{",
                          "return DOTween.Kill(target, complete);",
                          "}",
                          "/// <summary>",
                          "/// Controls the alpha (transparency) of the outline",
                          "/// </summary>",
                          "public static TweenerCore<Color, Color, ColorOptions> DOFade(this Outlinable.OutlineProperties target, float endValue, float duration)",
                          "{",
                          "var tweener = DOTween.ToAlpha(() => target.Color, x => target.Color = x, endValue, duration);",
                          "tweener.SetOptions(true).SetTarget(target);",
                          "return tweener;",
                          "}",
                          "/// <summary>",
                          "/// Controls the color of the outline",
                          "/// </summary>",
                          "public static TweenerCore<Color, Color, ColorOptions> DOColor(this Outlinable.OutlineProperties target, Color endValue, float duration)",
                          "{",
                          "var tweener = DOTween.To(() => target.Color, x => target.Color = x, endValue, duration);",
                          "tweener.SetOptions(false).SetTarget(target);",
                          "return tweener;",
                          "}",
                          "/// <summary>",
                          "/// Controls the amount of blur applied to the outline",
                          "/// </summary>",
                          "public static TweenerCore<float, float, FloatOptions> DOBlurShift(this Outlinable.OutlineProperties target, float endValue, float duration, bool snapping = false)",
                          "{",
                          "var tweener = DOTween.To(() => target.BlurShift, x => target.BlurShift = x, endValue, duration);",
                          "tweener.SetOptions(snapping).SetTarget(target);",
                          "return tweener;",
                          "}",
                          "/// <summary>",
                          "/// Controls the amount of blur applied to the outline",
                          "/// </summary>",
                          "public static TweenerCore<float, float, FloatOptions> DOBlurShift(this Outliner target, float endValue, float duration, bool snapping = false)",
                          "{",
                          "var tweener = DOTween.To(() => target.BlurShift, x => target.BlurShift = x, endValue, duration);",
                          "tweener.SetOptions(snapping).SetTarget(target);",
                          "return tweener;",
                          "}",
                          "/// <summary>",
                          "/// Controls the amount of dilation applied to the outline",
                          "/// </summary>",
                          "public static TweenerCore<float, float, FloatOptions> DODilateShift(this Outlinable.OutlineProperties target, float endValue, float duration, bool snapping = false)",
                          "{",
                          "var tweener = DOTween.To(() => target.DilateShift, x => target.DilateShift = x, endValue, duration);",
                          "tweener.SetOptions(snapping).SetTarget(target);",
                          "return tweener;",
                          "}",
                          "/// <summary>",
                          "/// Controls the amount of dilation applied to the outline",
                          "/// </summary>",
                          "public static TweenerCore<float, float, FloatOptions> DODilateShift(this Outliner target, float endValue, float duration, bool snapping = false)",
                          "{",
                          "var tweener = DOTween.To(() => target.DilateShift, x => target.DilateShift = x, endValue, duration);",
                          "tweener.SetOptions(snapping).SetTarget(target);",
                          "return tweener;",
                          "}",
                          "}",
                          "}",
                          "#endif"
                        ]
                      },
                      "DOTweenModuleEPOOutline.cs.meta": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Modules/DOTweenModuleEPOOutline.cs.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "DOTweenModulePhysics.cs": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Modules/DOTweenModulePhysics.cs",
                        "isBinary": false,
                        "content": [
                          "// Author: Daniele Giardini - http://www.demigiant.com",
                          "// Created: 2018/07/13",
                          "#if true // MODULE_MARKER",
                          "using System;",
                          "using DG.Tweening.Core;",
                          "using DG.Tweening.Core.Enums;",
                          "using DG.Tweening.Plugins;",
                          "using DG.Tweening.Plugins.Core.PathCore;",
                          "using DG.Tweening.Plugins.Options;",
                          "using UnityEngine;",
                          "#pragma warning disable 1591",
                          "namespace DG.Tweening",
                          "{",
                          "public static class DOTweenModulePhysics",
                          "{",
                          "#region Shortcuts",
                          "#region Rigidbody",
                          "/// <summary>Tweens a Rigidbody's position to the given value.",
                          "/// Also stores the rigidbody as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector3, Vector3, VectorOptions> DOMove(this Rigidbody target, Vector3 endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<Vector3, Vector3, VectorOptions> t = DOTween.To(() => target.position, target.MovePosition, endValue, duration);",
                          "t.SetOptions(snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a Rigidbody's X position to the given value.",
                          "/// Also stores the rigidbody as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveX(this Rigidbody target, float endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<Vector3, Vector3, VectorOptions> t = DOTween.To(() => target.position, target.MovePosition, new Vector3(endValue, 0, 0), duration);",
                          "t.SetOptions(AxisConstraint.X, snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a Rigidbody's Y position to the given value.",
                          "/// Also stores the rigidbody as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveY(this Rigidbody target, float endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<Vector3, Vector3, VectorOptions> t = DOTween.To(() => target.position, target.MovePosition, new Vector3(0, endValue, 0), duration);",
                          "t.SetOptions(AxisConstraint.Y, snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a Rigidbody's Z position to the given value.",
                          "/// Also stores the rigidbody as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveZ(this Rigidbody target, float endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<Vector3, Vector3, VectorOptions> t = DOTween.To(() => target.position, target.MovePosition, new Vector3(0, 0, endValue), duration);",
                          "t.SetOptions(AxisConstraint.Z, snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a Rigidbody's rotation to the given value.",
                          "/// Also stores the rigidbody as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"mode\\">Rotation mode</param>",
                          "public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DORotate(this Rigidbody target, Vector3 endValue, float duration, RotateMode mode = RotateMode.Fast)",
                          "{",
                          "TweenerCore<Quaternion, Vector3, QuaternionOptions> t = DOTween.To(() => target.rotation, target.MoveRotation, endValue, duration);",
                          "t.SetTarget(target);",
                          "t.plugOptions.rotateMode = mode;",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a Rigidbody's rotation so that it will look towards the given position.",
                          "/// Also stores the rigidbody as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"towards\\">The position to look at</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"axisConstraint\\">Eventual axis constraint for the rotation</param>",
                          "/// <param name=\\"up\\">The vector that defines in which direction up is (default: Vector3.up)</param>",
                          "public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DOLookAt(this Rigidbody target, Vector3 towards, float duration, AxisConstraint axisConstraint = AxisConstraint.None, Vector3? up = null)",
                          "{",
                          "TweenerCore<Quaternion, Vector3, QuaternionOptions> t = DOTween.To(() => target.rotation, target.MoveRotation, towards, duration)",
                          ".SetTarget(target).SetSpecialStartupMode(SpecialStartupMode.SetLookAt);",
                          "t.plugOptions.axisConstraint = axisConstraint;",
                          "t.plugOptions.up = (up == null) ? Vector3.up : (Vector3)up;",
                          "return t;",
                          "}",
                          "#region Special",
                          "/// <summary>Tweens a Rigidbody's position to the given value, while also applying a jump effect along the Y axis.",
                          "/// Returns a Sequence instead of a Tweener.",
                          "/// Also stores the Rigidbody as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param>",
                          "/// <param name=\\"jumpPower\\">Power of the jump (the max height of the jump is represented by this plus the final Y offset)</param>",
                          "/// <param name=\\"numJumps\\">Total number of jumps</param>",
                          "/// <param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static Sequence DOJump(this Rigidbody target, Vector3 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)",
                          "{",
                          "if (numJumps < 1) numJumps = 1;",
                          "float startPosY = 0;",
                          "float offsetY = -1;",
                          "bool offsetYSet = false;",
                          "Sequence s = DOTween.Sequence();",
                          "Tween yTween = DOTween.To(() => target.position, target.MovePosition, new Vector3(0, jumpPower, 0), duration / (numJumps * 2))",
                          ".SetOptions(AxisConstraint.Y, snapping).SetEase(Ease.OutQuad).SetRelative()",
                          ".SetLoops(numJumps * 2, LoopType.Yoyo)",
                          ".OnStart(() => startPosY = target.position.y);",
                          "s.Append(DOTween.To(() => target.position, target.MovePosition, new Vector3(endValue.x, 0, 0), duration)",
                          ".SetOptions(AxisConstraint.X, snapping).SetEase(Ease.Linear)",
                          ").Join(DOTween.To(() => target.position, target.MovePosition, new Vector3(0, 0, endValue.z), duration)",
                          ".SetOptions(AxisConstraint.Z, snapping).SetEase(Ease.Linear)",
                          ").Join(yTween)",
                          ".SetTarget(target).SetEase(DOTween.defaultEaseType);",
                          "yTween.OnUpdate(() => {",
                          "if (!offsetYSet) {",
                          "offsetYSet = true;",
                          "offsetY = s.isRelative ? endValue.y : endValue.y - startPosY;",
                          "}",
                          "Vector3 pos = target.position;",
                          "pos.y += DOVirtual.EasedValue(0, offsetY, yTween.ElapsedPercentage(), Ease.OutQuad);",
                          "target.MovePosition(pos);",
                          "});",
                          "return s;",
                          "}",
                          "/// <summary>Tweens a Rigidbody's position through the given path waypoints, using the chosen path algorithm.",
                          "/// Also stores the Rigidbody as the tween's target so it can be used for filtered operations.",
                          "/// <para>NOTE: to tween a rigidbody correctly it should be set to kinematic at least while being tweened.</para>",
                          "/// <para>BEWARE: doesn't work on Windows Phone store (waiting for Unity to fix their own bug).",
                          "/// If you plan to publish there you should use a regular transform.DOPath.</para></summary>",
                          "/// <param name=\\"path\\">The waypoints to go through</param>",
                          "/// <param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"pathType\\">The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points)</param>",
                          "/// <param name=\\"pathMode\\">The path mode: 3D, side-scroller 2D, top-down 2D</param>",
                          "/// <param name=\\"resolution\\">The resolution of the path (useless in case of Linear paths): higher resolutions make for more detailed curved paths but are more expensive.",
                          "/// Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints</param>",
                          "/// <param name=\\"gizmoColor\\">The color of the path (shown when gizmos are active in the Play panel and the tween is running)</param>",
                          "public static TweenerCore<Vector3, Path, PathOptions> DOPath(",
                          "this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear,",
                          "PathMode pathMode = PathMode.Full3D, int resolution = 10, Color? gizmoColor = null",
                          ")",
                          "{",
                          "if (resolution < 1) resolution = 1;",
                          "TweenerCore<Vector3, Path, PathOptions> t = DOTween.To(PathPlugin.Get(), () => target.position, target.MovePosition, new Path(pathType, path, resolution, gizmoColor), duration)",
                          ".SetTarget(target).SetUpdate(UpdateType.Fixed);",
                          "t.plugOptions.isRigidbody = true;",
                          "t.plugOptions.mode = pathMode;",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a Rigidbody's localPosition through the given path waypoints, using the chosen path algorithm.",
                          "/// Also stores the Rigidbody as the tween's target so it can be used for filtered operations",
                          "/// <para>NOTE: to tween a rigidbody correctly it should be set to kinematic at least while being tweened.</para>",
                          "/// <para>BEWARE: doesn't work on Windows Phone store (waiting for Unity to fix their own bug).",
                          "/// If you plan to publish there you should use a regular transform.DOLocalPath.</para></summary>",
                          "/// <param name=\\"path\\">The waypoint to go through</param>",
                          "/// <param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"pathType\\">The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points)</param>",
                          "/// <param name=\\"pathMode\\">The path mode: 3D, side-scroller 2D, top-down 2D</param>",
                          "/// <param name=\\"resolution\\">The resolution of the path: higher resolutions make for more detailed curved paths but are more expensive.",
                          "/// Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints</param>",
                          "/// <param name=\\"gizmoColor\\">The color of the path (shown when gizmos are active in the Play panel and the tween is running)</param>",
                          "public static TweenerCore<Vector3, Path, PathOptions> DOLocalPath(",
                          "this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear,",
                          "PathMode pathMode = PathMode.Full3D, int resolution = 10, Color? gizmoColor = null",
                          ")",
                          "{",
                          "if (resolution < 1) resolution = 1;",
                          "Transform trans = target.transform;",
                          "TweenerCore<Vector3, Path, PathOptions> t = DOTween.To(PathPlugin.Get(), () => trans.localPosition, x => target.MovePosition(trans.parent == null ? x : trans.parent.TransformPoint(x)), new Path(pathType, path, resolution, gizmoColor), duration)",
                          ".SetTarget(target).SetUpdate(UpdateType.Fixed);",
                          "t.plugOptions.isRigidbody = true;",
                          "t.plugOptions.mode = pathMode;",
                          "t.plugOptions.useLocalPosition = true;",
                          "return t;",
                          "}",
                          "// Used by path editor when creating the actual tween, so it can pass a pre-compiled path",
                          "internal static TweenerCore<Vector3, Path, PathOptions> DOPath(",
                          "this Rigidbody target, Path path, float duration, PathMode pathMode = PathMode.Full3D",
                          ")",
                          "{",
                          "TweenerCore<Vector3, Path, PathOptions> t = DOTween.To(PathPlugin.Get(), () => target.position, target.MovePosition, path, duration)",
                          ".SetTarget(target);",
                          "t.plugOptions.isRigidbody = true;",
                          "t.plugOptions.mode = pathMode;",
                          "return t;",
                          "}",
                          "internal static TweenerCore<Vector3, Path, PathOptions> DOLocalPath(",
                          "this Rigidbody target, Path path, float duration, PathMode pathMode = PathMode.Full3D",
                          ")",
                          "{",
                          "Transform trans = target.transform;",
                          "TweenerCore<Vector3, Path, PathOptions> t = DOTween.To(PathPlugin.Get(), () => trans.localPosition, x => target.MovePosition(trans.parent == null ? x : trans.parent.TransformPoint(x)), path, duration)",
                          ".SetTarget(target);",
                          "t.plugOptions.isRigidbody = true;",
                          "t.plugOptions.mode = pathMode;",
                          "t.plugOptions.useLocalPosition = true;",
                          "return t;",
                          "}",
                          "#endregion",
                          "#endregion",
                          "#endregion",
                          "}",
                          "}",
                          "#endif"
                        ]
                      },
                      "DOTweenModulePhysics.cs.meta": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Modules/DOTweenModulePhysics.cs.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "DOTweenModulePhysics2D.cs": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Modules/DOTweenModulePhysics2D.cs",
                        "isBinary": false,
                        "content": [
                          "// Author: Daniele Giardini - http://www.demigiant.com",
                          "// Created: 2018/07/13",
                          "#if true // MODULE_MARKER",
                          "using System;",
                          "using DG.Tweening.Core;",
                          "using DG.Tweening.Plugins;",
                          "using DG.Tweening.Plugins.Core.PathCore;",
                          "using DG.Tweening.Plugins.Options;",
                          "using UnityEngine;",
                          "#pragma warning disable 1591",
                          "namespace DG.Tweening",
                          "{",
                          "public static class DOTweenModulePhysics2D",
                          "{",
                          "#region Shortcuts",
                          "#region Rigidbody2D Shortcuts",
                          "/// <summary>Tweens a Rigidbody2D's position to the given value.",
                          "/// Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector2, Vector2, VectorOptions> DOMove(this Rigidbody2D target, Vector2 endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<Vector2, Vector2, VectorOptions> t = DOTween.To(() => target.position, target.MovePosition, endValue, duration);",
                          "t.SetOptions(snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a Rigidbody2D's X position to the given value.",
                          "/// Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector2, Vector2, VectorOptions> DOMoveX(this Rigidbody2D target, float endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<Vector2, Vector2, VectorOptions> t = DOTween.To(() => target.position, target.MovePosition, new Vector2(endValue, 0), duration);",
                          "t.SetOptions(AxisConstraint.X, snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a Rigidbody2D's Y position to the given value.",
                          "/// Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector2, Vector2, VectorOptions> DOMoveY(this Rigidbody2D target, float endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<Vector2, Vector2, VectorOptions> t = DOTween.To(() => target.position, target.MovePosition, new Vector2(0, endValue), duration);",
                          "t.SetOptions(AxisConstraint.Y, snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a Rigidbody2D's rotation to the given value.",
                          "/// Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<float, float, FloatOptions> DORotate(this Rigidbody2D target, float endValue, float duration)",
                          "{",
                          "TweenerCore<float, float, FloatOptions> t = DOTween.To(() => target.rotation, target.MoveRotation, endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "#region Special",
                          "/// <summary>Tweens a Rigidbody2D's position to the given value, while also applying a jump effect along the Y axis.",
                          "/// Returns a Sequence instead of a Tweener.",
                          "/// Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations.",
                          "/// <para>IMPORTANT: a rigidbody2D can't be animated in a jump arc using MovePosition, so the tween will directly set the position</para></summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param>",
                          "/// <param name=\\"jumpPower\\">Power of the jump (the max height of the jump is represented by this plus the final Y offset)</param>",
                          "/// <param name=\\"numJumps\\">Total number of jumps</param>",
                          "/// <param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static Sequence DOJump(this Rigidbody2D target, Vector2 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)",
                          "{",
                          "if (numJumps < 1) numJumps = 1;",
                          "float startPosY = 0;",
                          "float offsetY = -1;",
                          "bool offsetYSet = false;",
                          "Sequence s = DOTween.Sequence();",
                          "Tween yTween = DOTween.To(() => target.position, x => target.position = x, new Vector2(0, jumpPower), duration / (numJumps * 2))",
                          ".SetOptions(AxisConstraint.Y, snapping).SetEase(Ease.OutQuad).SetRelative()",
                          ".SetLoops(numJumps * 2, LoopType.Yoyo)",
                          ".OnStart(() => startPosY = target.position.y);",
                          "s.Append(DOTween.To(() => target.position, x => target.position = x, new Vector2(endValue.x, 0), duration)",
                          ".SetOptions(AxisConstraint.X, snapping).SetEase(Ease.Linear)",
                          ").Join(yTween)",
                          ".SetTarget(target).SetEase(DOTween.defaultEaseType);",
                          "yTween.OnUpdate(() => {",
                          "if (!offsetYSet) {",
                          "offsetYSet = true;",
                          "offsetY = s.isRelative ? endValue.y : endValue.y - startPosY;",
                          "}",
                          "Vector3 pos = target.position;",
                          "pos.y += DOVirtual.EasedValue(0, offsetY, yTween.ElapsedPercentage(), Ease.OutQuad);",
                          "target.MovePosition(pos);",
                          "});",
                          "return s;",
                          "}",
                          "/// <summary>Tweens a Rigidbody2D's position through the given path waypoints, using the chosen path algorithm.",
                          "/// Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations.",
                          "/// <para>NOTE: to tween a Rigidbody2D correctly it should be set to kinematic at least while being tweened.</para>",
                          "/// <para>BEWARE: doesn't work on Windows Phone store (waiting for Unity to fix their own bug).",
                          "/// If you plan to publish there you should use a regular transform.DOPath.</para></summary>",
                          "/// <param name=\\"path\\">The waypoints to go through</param>",
                          "/// <param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"pathType\\">The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points)</param>",
                          "/// <param name=\\"pathMode\\">The path mode: 3D, side-scroller 2D, top-down 2D</param>",
                          "/// <param name=\\"resolution\\">The resolution of the path (useless in case of Linear paths): higher resolutions make for more detailed curved paths but are more expensive.",
                          "/// Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints</param>",
                          "/// <param name=\\"gizmoColor\\">The color of the path (shown when gizmos are active in the Play panel and the tween is running)</param>",
                          "public static TweenerCore<Vector3, Path, PathOptions> DOPath(",
                          "this Rigidbody2D target, Vector2[] path, float duration, PathType pathType = PathType.Linear,",
                          "PathMode pathMode = PathMode.Full3D, int resolution = 10, Color? gizmoColor = null",
                          ")",
                          "{",
                          "if (resolution < 1) resolution = 1;",
                          "int len = path.Length;",
                          "Vector3[] path3D = new Vector3[len];",
                          "for (int i = 0; i < len; ++i) path3D[i] = path[i];",
                          "TweenerCore<Vector3, Path, PathOptions> t = DOTween.To(PathPlugin.Get(), () => target.position, x => target.MovePosition(x), new Path(pathType, path3D, resolution, gizmoColor), duration)",
                          ".SetTarget(target).SetUpdate(UpdateType.Fixed);",
                          "t.plugOptions.isRigidbody2D = true;",
                          "t.plugOptions.mode = pathMode;",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a Rigidbody2D's localPosition through the given path waypoints, using the chosen path algorithm.",
                          "/// Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations",
                          "/// <para>NOTE: to tween a Rigidbody2D correctly it should be set to kinematic at least while being tweened.</para>",
                          "/// <para>BEWARE: doesn't work on Windows Phone store (waiting for Unity to fix their own bug).",
                          "/// If you plan to publish there you should use a regular transform.DOLocalPath.</para></summary>",
                          "/// <param name=\\"path\\">The waypoint to go through</param>",
                          "/// <param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"pathType\\">The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points)</param>",
                          "/// <param name=\\"pathMode\\">The path mode: 3D, side-scroller 2D, top-down 2D</param>",
                          "/// <param name=\\"resolution\\">The resolution of the path: higher resolutions make for more detailed curved paths but are more expensive.",
                          "/// Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints</param>",
                          "/// <param name=\\"gizmoColor\\">The color of the path (shown when gizmos are active in the Play panel and the tween is running)</param>",
                          "public static TweenerCore<Vector3, Path, PathOptions> DOLocalPath(",
                          "this Rigidbody2D target, Vector2[] path, float duration, PathType pathType = PathType.Linear,",
                          "PathMode pathMode = PathMode.Full3D, int resolution = 10, Color? gizmoColor = null",
                          ")",
                          "{",
                          "if (resolution < 1) resolution = 1;",
                          "int len = path.Length;",
                          "Vector3[] path3D = new Vector3[len];",
                          "for (int i = 0; i < len; ++i) path3D[i] = path[i];",
                          "Transform trans = target.transform;",
                          "TweenerCore<Vector3, Path, PathOptions> t = DOTween.To(PathPlugin.Get(), () => trans.localPosition, x => target.MovePosition(trans.parent == null ? x : trans.parent.TransformPoint(x)), new Path(pathType, path3D, resolution, gizmoColor), duration)",
                          ".SetTarget(target).SetUpdate(UpdateType.Fixed);",
                          "t.plugOptions.isRigidbody2D = true;",
                          "t.plugOptions.mode = pathMode;",
                          "t.plugOptions.useLocalPosition = true;",
                          "return t;",
                          "}",
                          "// Used by path editor when creating the actual tween, so it can pass a pre-compiled path",
                          "internal static TweenerCore<Vector3, Path, PathOptions> DOPath(",
                          "this Rigidbody2D target, Path path, float duration, PathMode pathMode = PathMode.Full3D",
                          ")",
                          "{",
                          "TweenerCore<Vector3, Path, PathOptions> t = DOTween.To(PathPlugin.Get(), () => target.position, x => target.MovePosition(x), path, duration)",
                          ".SetTarget(target);",
                          "t.plugOptions.isRigidbody2D = true;",
                          "t.plugOptions.mode = pathMode;",
                          "return t;",
                          "}",
                          "internal static TweenerCore<Vector3, Path, PathOptions> DOLocalPath(",
                          "this Rigidbody2D target, Path path, float duration, PathMode pathMode = PathMode.Full3D",
                          ")",
                          "{",
                          "Transform trans = target.transform;",
                          "TweenerCore<Vector3, Path, PathOptions> t = DOTween.To(PathPlugin.Get(), () => trans.localPosition, x => target.MovePosition(trans.parent == null ? x : trans.parent.TransformPoint(x)), path, duration)",
                          ".SetTarget(target);",
                          "t.plugOptions.isRigidbody2D = true;",
                          "t.plugOptions.mode = pathMode;",
                          "t.plugOptions.useLocalPosition = true;",
                          "return t;",
                          "}",
                          "#endregion",
                          "#endregion",
                          "#endregion",
                          "}",
                          "}",
                          "#endif"
                        ]
                      },
                      "DOTweenModulePhysics2D.cs.meta": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Modules/DOTweenModulePhysics2D.cs.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "DOTweenModuleSprite.cs": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Modules/DOTweenModuleSprite.cs",
                        "isBinary": false,
                        "content": [
                          "// Author: Daniele Giardini - http://www.demigiant.com",
                          "// Created: 2018/07/13",
                          "#if true // MODULE_MARKER",
                          "using System;",
                          "using UnityEngine;",
                          "using DG.Tweening.Core;",
                          "using DG.Tweening.Plugins.Options;",
                          "#pragma warning disable 1591",
                          "namespace DG.Tweening",
                          "{",
                          "public static class DOTweenModuleSprite",
                          "{",
                          "#region Shortcuts",
                          "#region SpriteRenderer",
                          "/// <summary>Tweens a SpriteRenderer's color to the given value.",
                          "/// Also stores the spriteRenderer as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<Color, Color, ColorOptions> DOColor(this SpriteRenderer target, Color endValue, float duration)",
                          "{",
                          "TweenerCore<Color, Color, ColorOptions> t = DOTween.To(() => target.color, x => target.color = x, endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a Material's alpha color to the given value.",
                          "/// Also stores the spriteRenderer as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<Color, Color, ColorOptions> DOFade(this SpriteRenderer target, float endValue, float duration)",
                          "{",
                          "TweenerCore<Color, Color, ColorOptions> t = DOTween.ToAlpha(() => target.color, x => target.color = x, endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a SpriteRenderer's color using the given gradient",
                          "/// (NOTE 1: only uses the colors of the gradient, not the alphas - NOTE 2: creates a Sequence, not a Tweener).",
                          "/// Also stores the image as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"gradient\\">The gradient to use</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static Sequence DOGradientColor(this SpriteRenderer target, Gradient gradient, float duration)",
                          "{",
                          "Sequence s = DOTween.Sequence();",
                          "GradientColorKey[] colors = gradient.colorKeys;",
                          "int len = colors.Length;",
                          "for (int i = 0; i < len; ++i) {",
                          "GradientColorKey c = colors[i];",
                          "if (i == 0 && c.time <= 0) {",
                          "target.color = c.color;",
                          "continue;",
                          "}",
                          "float colorDuration = i == len - 1",
                          "? duration - s.Duration(false) // Verifies that total duration is correct",
                          ": duration * (i == 0 ? c.time : c.time - colors[i - 1].time);",
                          "s.Append(target.DOColor(c.color, colorDuration).SetEase(Ease.Linear));",
                          "}",
                          "s.SetTarget(target);",
                          "return s;",
                          "}",
                          "#endregion",
                          "#region Blendables",
                          "#region SpriteRenderer",
                          "/// <summary>Tweens a SpriteRenderer's color to the given value,",
                          "/// in a way that allows other DOBlendableColor tweens to work together on the same target,",
                          "/// instead than fight each other as multiple DOColor would do.",
                          "/// Also stores the SpriteRenderer as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The value to tween to</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static Tweener DOBlendableColor(this SpriteRenderer target, Color endValue, float duration)",
                          "{",
                          "endValue = endValue - target.color;",
                          "Color to = new Color(0, 0, 0, 0);",
                          "return DOTween.To(() => to, x => {",
                          "Color diff = x - to;",
                          "to = x;",
                          "target.color += diff;",
                          "}, endValue, duration)",
                          ".Blendable().SetTarget(target);",
                          "}",
                          "#endregion",
                          "#endregion",
                          "#endregion",
                          "}",
                          "}",
                          "#endif"
                        ]
                      },
                      "DOTweenModuleSprite.cs.meta": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Modules/DOTweenModuleSprite.cs.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "DOTweenModuleUI.cs": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Modules/DOTweenModuleUI.cs",
                        "isBinary": false,
                        "content": [
                          "// Author: Daniele Giardini - http://www.demigiant.com",
                          "// Created: 2018/07/13",
                          "#if true // MODULE_MARKER",
                          "using System;",
                          "using System.Globalization;",
                          "using UnityEngine;",
                          "using UnityEngine.UI;",
                          "using DG.Tweening.Core;",
                          "using DG.Tweening.Core.Enums;",
                          "using DG.Tweening.Plugins;",
                          "using DG.Tweening.Plugins.Options;",
                          "using Outline = UnityEngine.UI.Outline;",
                          "using Text = UnityEngine.UI.Text;",
                          "#pragma warning disable 1591",
                          "namespace DG.Tweening",
                          "{",
                          "public static class DOTweenModuleUI",
                          "{",
                          "#region Shortcuts",
                          "#region CanvasGroup",
                          "/// <summary>Tweens a CanvasGroup's alpha color to the given value.",
                          "/// Also stores the canvasGroup as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<float, float, FloatOptions> DOFade(this CanvasGroup target, float endValue, float duration)",
                          "{",
                          "TweenerCore<float, float, FloatOptions> t = DOTween.To(() => target.alpha, x => target.alpha = x, endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "#endregion",
                          "#region Graphic",
                          "/// <summary>Tweens an Graphic's color to the given value.",
                          "/// Also stores the image as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<Color, Color, ColorOptions> DOColor(this Graphic target, Color endValue, float duration)",
                          "{",
                          "TweenerCore<Color, Color, ColorOptions> t = DOTween.To(() => target.color, x => target.color = x, endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens an Graphic's alpha color to the given value.",
                          "/// Also stores the image as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<Color, Color, ColorOptions> DOFade(this Graphic target, float endValue, float duration)",
                          "{",
                          "TweenerCore<Color, Color, ColorOptions> t = DOTween.ToAlpha(() => target.color, x => target.color = x, endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "#endregion",
                          "#region Image",
                          "/// <summary>Tweens an Image's color to the given value.",
                          "/// Also stores the image as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<Color, Color, ColorOptions> DOColor(this Image target, Color endValue, float duration)",
                          "{",
                          "TweenerCore<Color, Color, ColorOptions> t = DOTween.To(() => target.color, x => target.color = x, endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens an Image's alpha color to the given value.",
                          "/// Also stores the image as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<Color, Color, ColorOptions> DOFade(this Image target, float endValue, float duration)",
                          "{",
                          "TweenerCore<Color, Color, ColorOptions> t = DOTween.ToAlpha(() => target.color, x => target.color = x, endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens an Image's fillAmount to the given value.",
                          "/// Also stores the image as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach (0 to 1)</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<float, float, FloatOptions> DOFillAmount(this Image target, float endValue, float duration)",
                          "{",
                          "if (endValue > 1) endValue = 1;",
                          "else if (endValue < 0) endValue = 0;",
                          "TweenerCore<float, float, FloatOptions> t = DOTween.To(() => target.fillAmount, x => target.fillAmount = x, endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens an Image's colors using the given gradient",
                          "/// (NOTE 1: only uses the colors of the gradient, not the alphas - NOTE 2: creates a Sequence, not a Tweener).",
                          "/// Also stores the image as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"gradient\\">The gradient to use</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static Sequence DOGradientColor(this Image target, Gradient gradient, float duration)",
                          "{",
                          "Sequence s = DOTween.Sequence();",
                          "GradientColorKey[] colors = gradient.colorKeys;",
                          "int len = colors.Length;",
                          "for (int i = 0; i < len; ++i) {",
                          "GradientColorKey c = colors[i];",
                          "if (i == 0 && c.time <= 0) {",
                          "target.color = c.color;",
                          "continue;",
                          "}",
                          "float colorDuration = i == len - 1",
                          "? duration - s.Duration(false) // Verifies that total duration is correct",
                          ": duration * (i == 0 ? c.time : c.time - colors[i - 1].time);",
                          "s.Append(target.DOColor(c.color, colorDuration).SetEase(Ease.Linear));",
                          "}",
                          "s.SetTarget(target);",
                          "return s;",
                          "}",
                          "#endregion",
                          "#region LayoutElement",
                          "/// <summary>Tweens an LayoutElement's flexibleWidth/Height to the given value.",
                          "/// Also stores the LayoutElement as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector2, Vector2, VectorOptions> DOFlexibleSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<Vector2, Vector2, VectorOptions> t = DOTween.To(() => new Vector2(target.flexibleWidth, target.flexibleHeight), x => {",
                          "target.flexibleWidth = x.x;",
                          "target.flexibleHeight = x.y;",
                          "}, endValue, duration);",
                          "t.SetOptions(snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens an LayoutElement's minWidth/Height to the given value.",
                          "/// Also stores the LayoutElement as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector2, Vector2, VectorOptions> DOMinSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<Vector2, Vector2, VectorOptions> t = DOTween.To(() => new Vector2(target.minWidth, target.minHeight), x => {",
                          "target.minWidth = x.x;",
                          "target.minHeight = x.y;",
                          "}, endValue, duration);",
                          "t.SetOptions(snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens an LayoutElement's preferredWidth/Height to the given value.",
                          "/// Also stores the LayoutElement as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector2, Vector2, VectorOptions> DOPreferredSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<Vector2, Vector2, VectorOptions> t = DOTween.To(() => new Vector2(target.preferredWidth, target.preferredHeight), x => {",
                          "target.preferredWidth = x.x;",
                          "target.preferredHeight = x.y;",
                          "}, endValue, duration);",
                          "t.SetOptions(snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "#endregion",
                          "#region Outline",
                          "/// <summary>Tweens a Outline's effectColor to the given value.",
                          "/// Also stores the Outline as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<Color, Color, ColorOptions> DOColor(this Outline target, Color endValue, float duration)",
                          "{",
                          "TweenerCore<Color, Color, ColorOptions> t = DOTween.To(() => target.effectColor, x => target.effectColor = x, endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a Outline's effectColor alpha to the given value.",
                          "/// Also stores the Outline as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<Color, Color, ColorOptions> DOFade(this Outline target, float endValue, float duration)",
                          "{",
                          "TweenerCore<Color, Color, ColorOptions> t = DOTween.ToAlpha(() => target.effectColor, x => target.effectColor = x, endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a Outline's effectDistance to the given value.",
                          "/// Also stores the Outline as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<Vector2, Vector2, VectorOptions> DOScale(this Outline target, Vector2 endValue, float duration)",
                          "{",
                          "TweenerCore<Vector2, Vector2, VectorOptions> t = DOTween.To(() => target.effectDistance, x => target.effectDistance = x, endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "#endregion",
                          "#region RectTransform",
                          "/// <summary>Tweens a RectTransform's anchoredPosition to the given value.",
                          "/// Also stores the RectTransform as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPos(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<Vector2, Vector2, VectorOptions> t = DOTween.To(() => target.anchoredPosition, x => target.anchoredPosition = x, endValue, duration);",
                          "t.SetOptions(snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a RectTransform's anchoredPosition X to the given value.",
                          "/// Also stores the RectTransform as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPosX(this RectTransform target, float endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<Vector2, Vector2, VectorOptions> t = DOTween.To(() => target.anchoredPosition, x => target.anchoredPosition = x, new Vector2(endValue, 0), duration);",
                          "t.SetOptions(AxisConstraint.X, snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a RectTransform's anchoredPosition Y to the given value.",
                          "/// Also stores the RectTransform as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPosY(this RectTransform target, float endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<Vector2, Vector2, VectorOptions> t = DOTween.To(() => target.anchoredPosition, x => target.anchoredPosition = x, new Vector2(0, endValue), duration);",
                          "t.SetOptions(AxisConstraint.Y, snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a RectTransform's anchoredPosition3D to the given value.",
                          "/// Also stores the RectTransform as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3D(this RectTransform target, Vector3 endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<Vector3, Vector3, VectorOptions> t = DOTween.To(() => target.anchoredPosition3D, x => target.anchoredPosition3D = x, endValue, duration);",
                          "t.SetOptions(snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a RectTransform's anchoredPosition3D X to the given value.",
                          "/// Also stores the RectTransform as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DX(this RectTransform target, float endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<Vector3, Vector3, VectorOptions> t = DOTween.To(() => target.anchoredPosition3D, x => target.anchoredPosition3D = x, new Vector3(endValue, 0, 0), duration);",
                          "t.SetOptions(AxisConstraint.X, snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a RectTransform's anchoredPosition3D Y to the given value.",
                          "/// Also stores the RectTransform as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DY(this RectTransform target, float endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<Vector3, Vector3, VectorOptions> t = DOTween.To(() => target.anchoredPosition3D, x => target.anchoredPosition3D = x, new Vector3(0, endValue, 0), duration);",
                          "t.SetOptions(AxisConstraint.Y, snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a RectTransform's anchoredPosition3D Z to the given value.",
                          "/// Also stores the RectTransform as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DZ(this RectTransform target, float endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<Vector3, Vector3, VectorOptions> t = DOTween.To(() => target.anchoredPosition3D, x => target.anchoredPosition3D = x, new Vector3(0, 0, endValue), duration);",
                          "t.SetOptions(AxisConstraint.Z, snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a RectTransform's anchorMax to the given value.",
                          "/// Also stores the RectTransform as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorMax(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<Vector2, Vector2, VectorOptions> t = DOTween.To(() => target.anchorMax, x => target.anchorMax = x, endValue, duration);",
                          "t.SetOptions(snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a RectTransform's anchorMin to the given value.",
                          "/// Also stores the RectTransform as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorMin(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<Vector2, Vector2, VectorOptions> t = DOTween.To(() => target.anchorMin, x => target.anchorMin = x, endValue, duration);",
                          "t.SetOptions(snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a RectTransform's pivot to the given value.",
                          "/// Also stores the RectTransform as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivot(this RectTransform target, Vector2 endValue, float duration)",
                          "{",
                          "TweenerCore<Vector2, Vector2, VectorOptions> t = DOTween.To(() => target.pivot, x => target.pivot = x, endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a RectTransform's pivot X to the given value.",
                          "/// Also stores the RectTransform as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivotX(this RectTransform target, float endValue, float duration)",
                          "{",
                          "TweenerCore<Vector2, Vector2, VectorOptions> t = DOTween.To(() => target.pivot, x => target.pivot = x, new Vector2(endValue, 0), duration);",
                          "t.SetOptions(AxisConstraint.X).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a RectTransform's pivot Y to the given value.",
                          "/// Also stores the RectTransform as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivotY(this RectTransform target, float endValue, float duration)",
                          "{",
                          "TweenerCore<Vector2, Vector2, VectorOptions> t = DOTween.To(() => target.pivot, x => target.pivot = x, new Vector2(0, endValue), duration);",
                          "t.SetOptions(AxisConstraint.Y).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a RectTransform's sizeDelta to the given value.",
                          "/// Also stores the RectTransform as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector2, Vector2, VectorOptions> DOSizeDelta(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<Vector2, Vector2, VectorOptions> t = DOTween.To(() => target.sizeDelta, x => target.sizeDelta = x, endValue, duration);",
                          "t.SetOptions(snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Punches a RectTransform's anchoredPosition towards the given direction and then back to the starting one",
                          "/// as if it was connected to the starting position via an elastic.",
                          "/// Also stores the RectTransform as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"punch\\">The direction and strength of the punch (added to the RectTransform's current position)</param>",
                          "/// <param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"vibrato\\">Indicates how much will the punch vibrate</param>",
                          "/// <param name=\\"elasticity\\">Represents how much (0 to 1) the vector will go beyond the starting position when bouncing backwards.",
                          "/// 1 creates a full oscillation between the punch direction and the opposite direction,",
                          "/// while 0 oscillates only between the punch and the start position</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static Tweener DOPunchAnchorPos(this RectTransform target, Vector2 punch, float duration, int vibrato = 10, float elasticity = 1, bool snapping = false)",
                          "{",
                          "return DOTween.Punch(() => target.anchoredPosition, x => target.anchoredPosition = x, punch, duration, vibrato, elasticity)",
                          ".SetTarget(target).SetOptions(snapping);",
                          "}",
                          "/// <summary>Shakes a RectTransform's anchoredPosition with the given values.",
                          "/// Also stores the RectTransform as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"strength\\">The shake strength</param>",
                          "/// <param name=\\"vibrato\\">Indicates how much will the shake vibrate</param>",
                          "/// <param name=\\"randomness\\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware).",
                          "/// Setting it to 0 will shake along a single direction.</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "/// <param name=\\"fadeOut\\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>",
                          "/// <param name=\\"randomnessMode\\">Randomness mode</param>",
                          "public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, float strength = 100, int vibrato = 10, float randomness = 90, bool snapping = false, bool fadeOut = true, ShakeRandomnessMode randomnessMode = ShakeRandomnessMode.Full)",
                          "{",
                          "return DOTween.Shake(() => target.anchoredPosition, x => target.anchoredPosition = x, duration, strength, vibrato, randomness, true, fadeOut, randomnessMode)",
                          ".SetTarget(target).SetSpecialStartupMode(SpecialStartupMode.SetShake).SetOptions(snapping);",
                          "}",
                          "/// <summary>Shakes a RectTransform's anchoredPosition with the given values.",
                          "/// Also stores the RectTransform as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"strength\\">The shake strength on each axis</param>",
                          "/// <param name=\\"vibrato\\">Indicates how much will the shake vibrate</param>",
                          "/// <param name=\\"randomness\\">Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware).",
                          "/// Setting it to 0 will shake along a single direction.</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "/// <param name=\\"fadeOut\\">If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not</param>",
                          "/// <param name=\\"randomnessMode\\">Randomness mode</param>",
                          "public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, Vector2 strength, int vibrato = 10, float randomness = 90, bool snapping = false, bool fadeOut = true, ShakeRandomnessMode randomnessMode = ShakeRandomnessMode.Full)",
                          "{",
                          "return DOTween.Shake(() => target.anchoredPosition, x => target.anchoredPosition = x, duration, strength, vibrato, randomness, fadeOut, randomnessMode)",
                          ".SetTarget(target).SetSpecialStartupMode(SpecialStartupMode.SetShake).SetOptions(snapping);",
                          "}",
                          "#region Special",
                          "/// <summary>Tweens a RectTransform's anchoredPosition to the given value, while also applying a jump effect along the Y axis.",
                          "/// Returns a Sequence instead of a Tweener.",
                          "/// Also stores the RectTransform as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param>",
                          "/// <param name=\\"jumpPower\\">Power of the jump (the max height of the jump is represented by this plus the final Y offset)</param>",
                          "/// <param name=\\"numJumps\\">Total number of jumps</param>",
                          "/// <param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static Sequence DOJumpAnchorPos(this RectTransform target, Vector2 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)",
                          "{",
                          "if (numJumps < 1) numJumps = 1;",
                          "float startPosY = 0;",
                          "float offsetY = -1;",
                          "bool offsetYSet = false;",
                          "// Separate Y Tween so we can elaborate elapsedPercentage on that insted of on the Sequence",
                          "// (in case users add a delay or other elements to the Sequence)",
                          "Sequence s = DOTween.Sequence();",
                          "Tween yTween = DOTween.To(() => target.anchoredPosition, x => target.anchoredPosition = x, new Vector2(0, jumpPower), duration / (numJumps * 2))",
                          ".SetOptions(AxisConstraint.Y, snapping).SetEase(Ease.OutQuad).SetRelative()",
                          ".SetLoops(numJumps * 2, LoopType.Yoyo)",
                          ".OnStart(()=> startPosY = target.anchoredPosition.y);",
                          "s.Append(DOTween.To(() => target.anchoredPosition, x => target.anchoredPosition = x, new Vector2(endValue.x, 0), duration)",
                          ".SetOptions(AxisConstraint.X, snapping).SetEase(Ease.Linear)",
                          ").Join(yTween)",
                          ".SetTarget(target).SetEase(DOTween.defaultEaseType);",
                          "s.OnUpdate(() => {",
                          "if (!offsetYSet) {",
                          "offsetYSet = true;",
                          "offsetY = s.isRelative ? endValue.y : endValue.y - startPosY;",
                          "}",
                          "Vector2 pos = target.anchoredPosition;",
                          "pos.y += DOVirtual.EasedValue(0, offsetY, s.ElapsedDirectionalPercentage(), Ease.OutQuad);",
                          "target.anchoredPosition = pos;",
                          "});",
                          "return s;",
                          "}",
                          "#endregion",
                          "#endregion",
                          "#region ScrollRect",
                          "/// <summary>Tweens a ScrollRect's horizontal/verticalNormalizedPosition to the given value.",
                          "/// Also stores the ScrollRect as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static Tweener DONormalizedPos(this ScrollRect target, Vector2 endValue, float duration, bool snapping = false)",
                          "{",
                          "return DOTween.To(() => new Vector2(target.horizontalNormalizedPosition, target.verticalNormalizedPosition),",
                          "x => {",
                          "target.horizontalNormalizedPosition = x.x;",
                          "target.verticalNormalizedPosition = x.y;",
                          "}, endValue, duration)",
                          ".SetOptions(snapping).SetTarget(target);",
                          "}",
                          "/// <summary>Tweens a ScrollRect's horizontalNormalizedPosition to the given value.",
                          "/// Also stores the ScrollRect as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static Tweener DOHorizontalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false)",
                          "{",
                          "return DOTween.To(() => target.horizontalNormalizedPosition, x => target.horizontalNormalizedPosition = x, endValue, duration)",
                          ".SetOptions(snapping).SetTarget(target);",
                          "}",
                          "/// <summary>Tweens a ScrollRect's verticalNormalizedPosition to the given value.",
                          "/// Also stores the ScrollRect as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static Tweener DOVerticalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false)",
                          "{",
                          "return DOTween.To(() => target.verticalNormalizedPosition, x => target.verticalNormalizedPosition = x, endValue, duration)",
                          ".SetOptions(snapping).SetTarget(target);",
                          "}",
                          "#endregion",
                          "#region Slider",
                          "/// <summary>Tweens a Slider's value to the given value.",
                          "/// Also stores the Slider as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<float, float, FloatOptions> DOValue(this Slider target, float endValue, float duration, bool snapping = false)",
                          "{",
                          "TweenerCore<float, float, FloatOptions> t = DOTween.To(() => target.value, x => target.value = x, endValue, duration);",
                          "t.SetOptions(snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "#endregion",
                          "#region Text",
                          "/// <summary>Tweens a Text's color to the given value.",
                          "/// Also stores the Text as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<Color, Color, ColorOptions> DOColor(this Text target, Color endValue, float duration)",
                          "{",
                          "TweenerCore<Color, Color, ColorOptions> t = DOTween.To(() => target.color, x => target.color = x, endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>",
                          "/// Tweens a Text's text from one integer to another, with options for thousands separators",
                          "/// </summary>",
                          "/// <param name=\\"fromValue\\">The value to start from</param>",
                          "/// <param name=\\"endValue\\">The end value to reach</param>",
                          "/// <param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"addThousandsSeparator\\">If TRUE (default) also adds thousands separators</param>",
                          "/// <param name=\\"culture\\">The <see cref=\\"CultureInfo\\"/> to use (InvariantCulture if NULL)</param>",
                          "public static TweenerCore<int, int, NoOptions> DOCounter(",
                          "this Text target, int fromValue, int endValue, float duration, bool addThousandsSeparator = true, CultureInfo culture = null",
                          "){",
                          "int v = fromValue;",
                          "CultureInfo cInfo = !addThousandsSeparator ? null : culture ?? CultureInfo.InvariantCulture;",
                          "TweenerCore<int, int, NoOptions> t = DOTween.To(() => v, x => {",
                          "v = x;",
                          "target.text = addThousandsSeparator",
                          "? v.ToString(\\"N0\\", cInfo)",
                          ": v.ToString();",
                          "}, endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a Text's alpha color to the given value.",
                          "/// Also stores the Text as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<Color, Color, ColorOptions> DOFade(this Text target, float endValue, float duration)",
                          "{",
                          "TweenerCore<Color, Color, ColorOptions> t = DOTween.ToAlpha(() => target.color, x => target.color = x, endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a Text's text to the given value.",
                          "/// Also stores the Text as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end string to tween to</param><param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"richTextEnabled\\">If TRUE (default), rich text will be interpreted correctly while animated,",
                          "/// otherwise all tags will be considered as normal text</param>",
                          "/// <param name=\\"scrambleMode\\">The type of scramble mode to use, if any</param>",
                          "/// <param name=\\"scrambleChars\\">A string containing the characters to use for scrambling.",
                          "/// Use as many characters as possible (minimum 10) because DOTween uses a fast scramble mode which gives better results with more characters.",
                          "/// Leave it to NULL (default) to use default ones</param>",
                          "public static TweenerCore<string, string, StringOptions> DOText(this Text target, string endValue, float duration, bool richTextEnabled = true, ScrambleMode scrambleMode = ScrambleMode.None, string scrambleChars = null)",
                          "{",
                          "if (endValue == null) {",
                          "if (Debugger.logPriority > 0) Debugger.LogWarning(\\"You can't pass a NULL string to DOText: an empty string will be used instead to avoid errors\\");",
                          "endValue = \\"\\";",
                          "}",
                          "TweenerCore<string, string, StringOptions> t = DOTween.To(() => target.text, x => target.text = x, endValue, duration);",
                          "t.SetOptions(richTextEnabled, scrambleMode, scrambleChars)",
                          ".SetTarget(target);",
                          "return t;",
                          "}",
                          "#endregion",
                          "#region Blendables",
                          "#region Graphic",
                          "/// <summary>Tweens a Graphic's color to the given value,",
                          "/// in a way that allows other DOBlendableColor tweens to work together on the same target,",
                          "/// instead than fight each other as multiple DOColor would do.",
                          "/// Also stores the Graphic as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The value to tween to</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static Tweener DOBlendableColor(this Graphic target, Color endValue, float duration)",
                          "{",
                          "endValue = endValue - target.color;",
                          "Color to = new Color(0, 0, 0, 0);",
                          "return DOTween.To(() => to, x => {",
                          "Color diff = x - to;",
                          "to = x;",
                          "target.color += diff;",
                          "}, endValue, duration)",
                          ".Blendable().SetTarget(target);",
                          "}",
                          "#endregion",
                          "#region Image",
                          "/// <summary>Tweens a Image's color to the given value,",
                          "/// in a way that allows other DOBlendableColor tweens to work together on the same target,",
                          "/// instead than fight each other as multiple DOColor would do.",
                          "/// Also stores the Image as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The value to tween to</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static Tweener DOBlendableColor(this Image target, Color endValue, float duration)",
                          "{",
                          "endValue = endValue - target.color;",
                          "Color to = new Color(0, 0, 0, 0);",
                          "return DOTween.To(() => to, x => {",
                          "Color diff = x - to;",
                          "to = x;",
                          "target.color += diff;",
                          "}, endValue, duration)",
                          ".Blendable().SetTarget(target);",
                          "}",
                          "#endregion",
                          "#region Text",
                          "/// <summary>Tweens a Text's color BY the given value,",
                          "/// in a way that allows other DOBlendableColor tweens to work together on the same target,",
                          "/// instead than fight each other as multiple DOColor would do.",
                          "/// Also stores the Text as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The value to tween to</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static Tweener DOBlendableColor(this Text target, Color endValue, float duration)",
                          "{",
                          "endValue = endValue - target.color;",
                          "Color to = new Color(0, 0, 0, 0);",
                          "return DOTween.To(() => to, x => {",
                          "Color diff = x - to;",
                          "to = x;",
                          "target.color += diff;",
                          "}, endValue, duration)",
                          ".Blendable().SetTarget(target);",
                          "}",
                          "#endregion",
                          "#endregion",
                          "#region Shapes",
                          "/// <summary>Tweens a RectTransform's anchoredPosition so that it draws a circle around the given center.",
                          "/// Also stores the RectTransform as the tween's target so it can be used for filtered operations.<para/>",
                          "/// IMPORTANT: SetFrom(value) requires a <see cref=\\"Vector2\\"/> instead of a float, where the X property represents the \\"from degrees value\\"</summary>",
                          "/// <param name=\\"center\\">Circle-center/pivot around which to rotate (in UI anchoredPosition coordinates)</param>",
                          "/// <param name=\\"endValueDegrees\\">The end value degrees to reach (to rotate counter-clockwise pass a negative value)</param>",
                          "/// <param name=\\"duration\\">The duration of the tween</param>",
                          "/// <param name=\\"relativeCenter\\">If TRUE the <see cref=\\"center\\"/> coordinates will be considered as relative to the target's current anchoredPosition</param>",
                          "/// <param name=\\"snapping\\">If TRUE the tween will smoothly snap all values to integers</param>",
                          "public static TweenerCore<Vector2, Vector2, CircleOptions> DOShapeCircle(",
                          "this RectTransform target, Vector2 center, float endValueDegrees, float duration, bool relativeCenter = false, bool snapping = false",
                          ")",
                          "{",
                          "TweenerCore<Vector2, Vector2, CircleOptions> t = DOTween.To(",
                          "CirclePlugin.Get(), () => target.anchoredPosition, x => target.anchoredPosition = x, center, duration",
                          ");",
                          "t.SetOptions(endValueDegrees, relativeCenter, snapping).SetTarget(target);",
                          "return t;",
                          "}",
                          "#endregion",
                          "#endregion",
                          "// █████████████████████████████████████████████████████████████████████████████████████████████████████████████████████",
                          "// ███ INTERNAL CLASSES ████████████████████████████████████████████████████████████████████████████████████████████████",
                          "// █████████████████████████████████████████████████████████████████████████████████████████████████████████████████████",
                          "public static class Utils",
                          "{",
                          "/// <summary>",
                          "/// Converts the anchoredPosition of the first RectTransform to the second RectTransform,",
                          "/// taking into consideration offset, anchors and pivot, and returns the new anchoredPosition",
                          "/// </summary>",
                          "public static Vector2 SwitchToRectTransform(RectTransform from, RectTransform to)",
                          "{",
                          "Vector2 localPoint;",
                          "Vector2 fromPivotDerivedOffset = new Vector2(from.rect.width * 0.5f + from.rect.xMin, from.rect.height * 0.5f + from.rect.yMin);",
                          "Vector2 screenP = RectTransformUtility.WorldToScreenPoint(null, from.position);",
                          "screenP += fromPivotDerivedOffset;",
                          "RectTransformUtility.ScreenPointToLocalPointInRectangle(to, screenP, null, out localPoint);",
                          "Vector2 pivotDerivedOffset = new Vector2(to.rect.width * 0.5f + to.rect.xMin, to.rect.height * 0.5f + to.rect.yMin);",
                          "return to.anchoredPosition + localPoint - pivotDerivedOffset;",
                          "}",
                          "}",
                          "}",
                          "}",
                          "#endif"
                        ]
                      },
                      "DOTweenModuleUI.cs.meta": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Modules/DOTweenModuleUI.cs.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "DOTweenModuleUnityVersion.cs": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Modules/DOTweenModuleUnityVersion.cs",
                        "isBinary": false,
                        "content": [
                          "// Author: Daniele Giardini - http://www.demigiant.com",
                          "// Created: 2018/07/13",
                          "using System;",
                          "using UnityEngine;",
                          "using DG.Tweening.Core;",
                          "using DG.Tweening.Plugins.Options;",
                          "//#if UNITY_2018_1_OR_NEWER && (NET_4_6 || NET_STANDARD_2_0)",
                          "//using Task = System.Threading.Tasks.Task;",
                          "//#endif",
                          "#pragma warning disable 1591",
                          "namespace DG.Tweening",
                          "{",
                          "/// <summary>",
                          "/// Shortcuts/functions that are not strictly related to specific Modules",
                          "/// but are available only on some Unity versions",
                          "/// </summary>",
                          "public static class DOTweenModuleUnityVersion",
                          "{",
                          "#region Material",
                          "/// <summary>Tweens a Material's color using the given gradient",
                          "/// (NOTE 1: only uses the colors of the gradient, not the alphas - NOTE 2: creates a Sequence, not a Tweener).",
                          "/// Also stores the image as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"gradient\\">The gradient to use</param><param name=\\"duration\\">The duration of the tween</param>",
                          "public static Sequence DOGradientColor(this Material target, Gradient gradient, float duration)",
                          "{",
                          "Sequence s = DOTween.Sequence();",
                          "GradientColorKey[] colors = gradient.colorKeys;",
                          "int len = colors.Length;",
                          "for (int i = 0; i < len; ++i) {",
                          "GradientColorKey c = colors[i];",
                          "if (i == 0 && c.time <= 0) {",
                          "target.color = c.color;",
                          "continue;",
                          "}",
                          "float colorDuration = i == len - 1",
                          "? duration - s.Duration(false) // Verifies that total duration is correct",
                          ": duration * (i == 0 ? c.time : c.time - colors[i - 1].time);",
                          "s.Append(target.DOColor(c.color, colorDuration).SetEase(Ease.Linear));",
                          "}",
                          "s.SetTarget(target);",
                          "return s;",
                          "}",
                          "/// <summary>Tweens a Material's named color property using the given gradient",
                          "/// (NOTE 1: only uses the colors of the gradient, not the alphas - NOTE 2: creates a Sequence, not a Tweener).",
                          "/// Also stores the image as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"gradient\\">The gradient to use</param>",
                          "/// <param name=\\"property\\">The name of the material property to tween (like _Tint or _SpecColor)</param>",
                          "/// <param name=\\"duration\\">The duration of the tween</param>",
                          "public static Sequence DOGradientColor(this Material target, Gradient gradient, string property, float duration)",
                          "{",
                          "Sequence s = DOTween.Sequence();",
                          "GradientColorKey[] colors = gradient.colorKeys;",
                          "int len = colors.Length;",
                          "for (int i = 0; i < len; ++i) {",
                          "GradientColorKey c = colors[i];",
                          "if (i == 0 && c.time <= 0) {",
                          "target.SetColor(property, c.color);",
                          "continue;",
                          "}",
                          "float colorDuration = i == len - 1",
                          "? duration - s.Duration(false) // Verifies that total duration is correct",
                          ": duration * (i == 0 ? c.time : c.time - colors[i - 1].time);",
                          "s.Append(target.DOColor(c.color, property, colorDuration).SetEase(Ease.Linear));",
                          "}",
                          "s.SetTarget(target);",
                          "return s;",
                          "}",
                          "#endregion",
                          "#region CustomYieldInstructions",
                          "/// <summary>",
                          "/// Returns a <see cref=\\"CustomYieldInstruction\\"/> that waits until the tween is killed or complete.",
                          "/// It can be used inside a coroutine as a yield.",
                          "/// <para>Example usage:</para><code>yield return myTween.WaitForCompletion(true);</code>",
                          "/// </summary>",
                          "public static CustomYieldInstruction WaitForCompletion(this Tween t, bool returnCustomYieldInstruction)",
                          "{",
                          "if (!t.active) {",
                          "if (Debugger.logPriority > 0) Debugger.LogInvalidTween(t);",
                          "return null;",
                          "}",
                          "return new DOTweenCYInstruction.WaitForCompletion(t);",
                          "}",
                          "/// <summary>",
                          "/// Returns a <see cref=\\"CustomYieldInstruction\\"/> that waits until the tween is killed or rewinded.",
                          "/// It can be used inside a coroutine as a yield.",
                          "/// <para>Example usage:</para><code>yield return myTween.WaitForRewind();</code>",
                          "/// </summary>",
                          "public static CustomYieldInstruction WaitForRewind(this Tween t, bool returnCustomYieldInstruction)",
                          "{",
                          "if (!t.active) {",
                          "if (Debugger.logPriority > 0) Debugger.LogInvalidTween(t);",
                          "return null;",
                          "}",
                          "return new DOTweenCYInstruction.WaitForRewind(t);",
                          "}",
                          "/// <summary>",
                          "/// Returns a <see cref=\\"CustomYieldInstruction\\"/> that waits until the tween is killed.",
                          "/// It can be used inside a coroutine as a yield.",
                          "/// <para>Example usage:</para><code>yield return myTween.WaitForKill();</code>",
                          "/// </summary>",
                          "public static CustomYieldInstruction WaitForKill(this Tween t, bool returnCustomYieldInstruction)",
                          "{",
                          "if (!t.active) {",
                          "if (Debugger.logPriority > 0) Debugger.LogInvalidTween(t);",
                          "return null;",
                          "}",
                          "return new DOTweenCYInstruction.WaitForKill(t);",
                          "}",
                          "/// <summary>",
                          "/// Returns a <see cref=\\"CustomYieldInstruction\\"/> that waits until the tween is killed or has gone through the given amount of loops.",
                          "/// It can be used inside a coroutine as a yield.",
                          "/// <para>Example usage:</para><code>yield return myTween.WaitForElapsedLoops(2);</code>",
                          "/// </summary>",
                          "/// <param name=\\"elapsedLoops\\">Elapsed loops to wait for</param>",
                          "public static CustomYieldInstruction WaitForElapsedLoops(this Tween t, int elapsedLoops, bool returnCustomYieldInstruction)",
                          "{",
                          "if (!t.active) {",
                          "if (Debugger.logPriority > 0) Debugger.LogInvalidTween(t);",
                          "return null;",
                          "}",
                          "return new DOTweenCYInstruction.WaitForElapsedLoops(t, elapsedLoops);",
                          "}",
                          "/// <summary>",
                          "/// Returns a <see cref=\\"CustomYieldInstruction\\"/> that waits until the tween is killed",
                          "/// or has reached the given time position (loops included, delays excluded).",
                          "/// It can be used inside a coroutine as a yield.",
                          "/// <para>Example usage:</para><code>yield return myTween.WaitForPosition(2.5f);</code>",
                          "/// </summary>",
                          "/// <param name=\\"position\\">Position (loops included, delays excluded) to wait for</param>",
                          "public static CustomYieldInstruction WaitForPosition(this Tween t, float position, bool returnCustomYieldInstruction)",
                          "{",
                          "if (!t.active) {",
                          "if (Debugger.logPriority > 0) Debugger.LogInvalidTween(t);",
                          "return null;",
                          "}",
                          "return new DOTweenCYInstruction.WaitForPosition(t, position);",
                          "}",
                          "/// <summary>",
                          "/// Returns a <see cref=\\"CustomYieldInstruction\\"/> that waits until the tween is killed or started",
                          "/// (meaning when the tween is set in a playing state the first time, after any eventual delay).",
                          "/// It can be used inside a coroutine as a yield.",
                          "/// <para>Example usage:</para><code>yield return myTween.WaitForStart();</code>",
                          "/// </summary>",
                          "public static CustomYieldInstruction WaitForStart(this Tween t, bool returnCustomYieldInstruction)",
                          "{",
                          "if (!t.active) {",
                          "if (Debugger.logPriority > 0) Debugger.LogInvalidTween(t);",
                          "return null;",
                          "}",
                          "return new DOTweenCYInstruction.WaitForStart(t);",
                          "}",
                          "#endregion",
                          "#if UNITY_2018_1_OR_NEWER",
                          "#region Unity 2018.1 or Newer",
                          "#region Material",
                          "/// <summary>Tweens a Material's named texture offset property with the given ID to the given value.",
                          "/// Also stores the material as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param>",
                          "/// <param name=\\"propertyID\\">The ID of the material property to tween (also called nameID in Unity's manual)</param>",
                          "/// <param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<Vector2, Vector2, VectorOptions> DOOffset(this Material target, Vector2 endValue, int propertyID, float duration)",
                          "{",
                          "if (!target.HasProperty(propertyID)) {",
                          "if (Debugger.logPriority > 0) Debugger.LogMissingMaterialProperty(propertyID);",
                          "return null;",
                          "}",
                          "TweenerCore<Vector2, Vector2, VectorOptions> t = DOTween.To(() => target.GetTextureOffset(propertyID), x => target.SetTextureOffset(propertyID, x), endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "/// <summary>Tweens a Material's named texture scale property with the given ID to the given value.",
                          "/// Also stores the material as the tween's target so it can be used for filtered operations</summary>",
                          "/// <param name=\\"endValue\\">The end value to reach</param>",
                          "/// <param name=\\"propertyID\\">The ID of the material property to tween (also called nameID in Unity's manual)</param>",
                          "/// <param name=\\"duration\\">The duration of the tween</param>",
                          "public static TweenerCore<Vector2, Vector2, VectorOptions> DOTiling(this Material target, Vector2 endValue, int propertyID, float duration)",
                          "{",
                          "if (!target.HasProperty(propertyID)) {",
                          "if (Debugger.logPriority > 0) Debugger.LogMissingMaterialProperty(propertyID);",
                          "return null;",
                          "}",
                          "TweenerCore<Vector2, Vector2, VectorOptions> t = DOTween.To(() => target.GetTextureScale(propertyID), x => target.SetTextureScale(propertyID, x), endValue, duration);",
                          "t.SetTarget(target);",
                          "return t;",
                          "}",
                          "#endregion",
                          "#region .NET 4.6 or Newer",
                          "#if UNITY_2018_1_OR_NEWER && (NET_4_6 || NET_STANDARD_2_0)",
                          "#region Async Instructions",
                          "/// <summary>",
                          "/// Returns an async <see cref=\\"System.Threading.Tasks.Task\\"/> that waits until the tween is killed or complete.",
                          "/// It can be used inside an async operation.",
                          "/// <para>Example usage:</para><code>await myTween.WaitForCompletion();</code>",
                          "/// </summary>",
                          "public static async System.Threading.Tasks.Task AsyncWaitForCompletion(this Tween t)",
                          "{",
                          "if (!t.active) {",
                          "if (Debugger.logPriority > 0) Debugger.LogInvalidTween(t);",
                          "return;",
                          "}",
                          "while (t.active && !t.IsComplete()) await System.Threading.Tasks.Task.Yield();",
                          "}",
                          "/// <summary>",
                          "/// Returns an async <see cref=\\"System.Threading.Tasks.Task\\"/> that waits until the tween is killed or rewinded.",
                          "/// It can be used inside an async operation.",
                          "/// <para>Example usage:</para><code>await myTween.AsyncWaitForRewind();</code>",
                          "/// </summary>",
                          "public static async System.Threading.Tasks.Task AsyncWaitForRewind(this Tween t)",
                          "{",
                          "if (!t.active) {",
                          "if (Debugger.logPriority > 0) Debugger.LogInvalidTween(t);",
                          "return;",
                          "}",
                          "while (t.active && (!t.playedOnce || t.position * (t.CompletedLoops() + 1) > 0)) await System.Threading.Tasks.Task.Yield();",
                          "}",
                          "/// <summary>",
                          "/// Returns an async <see cref=\\"System.Threading.Tasks.Task\\"/> that waits until the tween is killed.",
                          "/// It can be used inside an async operation.",
                          "/// <para>Example usage:</para><code>await myTween.AsyncWaitForKill();</code>",
                          "/// </summary>",
                          "public static async System.Threading.Tasks.Task AsyncWaitForKill(this Tween t)",
                          "{",
                          "if (!t.active) {",
                          "if (Debugger.logPriority > 0) Debugger.LogInvalidTween(t);",
                          "return;",
                          "}",
                          "while (t.active) await System.Threading.Tasks.Task.Yield();",
                          "}",
                          "/// <summary>",
                          "/// Returns an async <see cref=\\"System.Threading.Tasks.Task\\"/> that waits until the tween is killed or has gone through the given amount of loops.",
                          "/// It can be used inside an async operation.",
                          "/// <para>Example usage:</para><code>await myTween.AsyncWaitForElapsedLoops();</code>",
                          "/// </summary>",
                          "/// <param name=\\"elapsedLoops\\">Elapsed loops to wait for</param>",
                          "public static async System.Threading.Tasks.Task AsyncWaitForElapsedLoops(this Tween t, int elapsedLoops)",
                          "{",
                          "if (!t.active) {",
                          "if (Debugger.logPriority > 0) Debugger.LogInvalidTween(t);",
                          "return;",
                          "}",
                          "while (t.active && t.CompletedLoops() < elapsedLoops) await System.Threading.Tasks.Task.Yield();",
                          "}",
                          "/// <summary>",
                          "/// Returns an async <see cref=\\"System.Threading.Tasks.Task\\"/> that waits until the tween is killed or started",
                          "/// (meaning when the tween is set in a playing state the first time, after any eventual delay).",
                          "/// It can be used inside an async operation.",
                          "/// <para>Example usage:</para><code>await myTween.AsyncWaitForPosition();</code>",
                          "/// </summary>",
                          "/// <param name=\\"position\\">Position (loops included, delays excluded) to wait for</param>",
                          "public static async System.Threading.Tasks.Task AsyncWaitForPosition(this Tween t, float position)",
                          "{",
                          "if (!t.active) {",
                          "if (Debugger.logPriority > 0) Debugger.LogInvalidTween(t);",
                          "return;",
                          "}",
                          "while (t.active && t.position * (t.CompletedLoops() + 1) < position) await System.Threading.Tasks.Task.Yield();",
                          "}",
                          "/// <summary>",
                          "/// Returns an async <see cref=\\"System.Threading.Tasks.Task\\"/> that waits until the tween is killed.",
                          "/// It can be used inside an async operation.",
                          "/// <para>Example usage:</para><code>await myTween.AsyncWaitForKill();</code>",
                          "/// </summary>",
                          "public static async System.Threading.Tasks.Task AsyncWaitForStart(this Tween t)",
                          "{",
                          "if (!t.active) {",
                          "if (Debugger.logPriority > 0) Debugger.LogInvalidTween(t);",
                          "return;",
                          "}",
                          "while (t.active && !t.playedOnce) await System.Threading.Tasks.Task.Yield();",
                          "}",
                          "#endregion",
                          "#endif",
                          "#endregion",
                          "#endregion",
                          "#endif",
                          "}",
                          "// █████████████████████████████████████████████████████████████████████████████████████████████████████████████████████",
                          "// ███ CLASSES █████████████████████████████████████████████████████████████████████████████████████████████████████████",
                          "// █████████████████████████████████████████████████████████████████████████████████████████████████████████████████████",
                          "public static class DOTweenCYInstruction",
                          "{",
                          "public class WaitForCompletion : CustomYieldInstruction",
                          "{",
                          "public override bool keepWaiting { get {",
                          "return t.active && !t.IsComplete();",
                          "}}",
                          "readonly Tween t;",
                          "public WaitForCompletion(Tween tween)",
                          "{",
                          "t = tween;",
                          "}",
                          "}",
                          "public class WaitForRewind : CustomYieldInstruction",
                          "{",
                          "public override bool keepWaiting { get {",
                          "return t.active && (!t.playedOnce || t.position * (t.CompletedLoops() + 1) > 0);",
                          "}}",
                          "readonly Tween t;",
                          "public WaitForRewind(Tween tween)",
                          "{",
                          "t = tween;",
                          "}",
                          "}",
                          "public class WaitForKill : CustomYieldInstruction",
                          "{",
                          "public override bool keepWaiting { get {",
                          "return t.active;",
                          "}}",
                          "readonly Tween t;",
                          "public WaitForKill(Tween tween)",
                          "{",
                          "t = tween;",
                          "}",
                          "}",
                          "public class WaitForElapsedLoops : CustomYieldInstruction",
                          "{",
                          "public override bool keepWaiting { get {",
                          "return t.active && t.CompletedLoops() < elapsedLoops;",
                          "}}",
                          "readonly Tween t;",
                          "readonly int elapsedLoops;",
                          "public WaitForElapsedLoops(Tween tween, int elapsedLoops)",
                          "{",
                          "t = tween;",
                          "this.elapsedLoops = elapsedLoops;",
                          "}",
                          "}",
                          "public class WaitForPosition : CustomYieldInstruction",
                          "{",
                          "public override bool keepWaiting { get {",
                          "return t.active && t.position * (t.CompletedLoops() + 1) < position;",
                          "}}",
                          "readonly Tween t;",
                          "readonly float position;",
                          "public WaitForPosition(Tween tween, float position)",
                          "{",
                          "t = tween;",
                          "this.position = position;",
                          "}",
                          "}",
                          "public class WaitForStart : CustomYieldInstruction",
                          "{",
                          "public override bool keepWaiting { get {",
                          "return t.active && !t.playedOnce;",
                          "}}",
                          "readonly Tween t;",
                          "public WaitForStart(Tween tween)",
                          "{",
                          "t = tween;",
                          "}",
                          "}",
                          "}",
                          "}"
                        ]
                      },
                      "DOTweenModuleUnityVersion.cs.meta": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Modules/DOTweenModuleUnityVersion.cs.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "DOTweenModuleUtils.cs": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Modules/DOTweenModuleUtils.cs",
                        "isBinary": false,
                        "content": [
                          "// Author: Daniele Giardini - http://www.demigiant.com",
                          "// Created: 2018/07/13",
                          "using System;",
                          "using System.Reflection;",
                          "using UnityEngine;",
                          "using DG.Tweening.Core;",
                          "using DG.Tweening.Plugins.Core.PathCore;",
                          "using DG.Tweening.Plugins.Options;",
                          "#pragma warning disable 1591",
                          "namespace DG.Tweening",
                          "{",
                          "/// <summary>",
                          "/// Utility functions that deal with available Modules.",
                          "/// Modules defines:",
                          "/// - DOTAUDIO",
                          "/// - DOTPHYSICS",
                          "/// - DOTPHYSICS2D",
                          "/// - DOTSPRITE",
                          "/// - DOTUI",
                          "/// Extra defines set and used for implementation of external assets:",
                          "/// - DOTWEEN_TMP ► TextMesh Pro",
                          "/// - DOTWEEN_TK2D ► 2D Toolkit",
                          "/// </summary>",
                          "public static class DOTweenModuleUtils",
                          "{",
                          "static bool _initialized;",
                          "#region Reflection",
                          "/// <summary>",
                          "/// Called via Reflection by DOTweenComponent on Awake",
                          "/// </summary>",
                          "#if UNITY_2018_1_OR_NEWER",
                          "[UnityEngine.Scripting.Preserve]",
                          "#endif",
                          "public static void Init()",
                          "{",
                          "if (_initialized) return;",
                          "_initialized = true;",
                          "DOTweenExternalCommand.SetOrientationOnPath += Physics.SetOrientationOnPath;",
                          "#if UNITY_EDITOR",
                          "#if UNITY_4_3 || UNITY_4_4 || UNITY_4_5 || UNITY_4_6 || UNITY_5 || UNITY_2017_1",
                          "UnityEditor.EditorApplication.playmodeStateChanged += PlaymodeStateChanged;",
                          "#else",
                          "UnityEditor.EditorApplication.playModeStateChanged += PlaymodeStateChanged;",
                          "#endif",
                          "#endif",
                          "}",
                          "#if UNITY_2018_1_OR_NEWER",
                          "#pragma warning disable",
                          "[UnityEngine.Scripting.Preserve]",
                          "// Just used to preserve methods when building, never called",
                          "static void Preserver()",
                          "{",
                          "Assembly[] loadedAssemblies = AppDomain.CurrentDomain.GetAssemblies();",
                          "MethodInfo mi = typeof(MonoBehaviour).GetMethod(\\"Stub\\");",
                          "}",
                          "#pragma warning restore",
                          "#endif",
                          "#endregion",
                          "#if UNITY_EDITOR",
                          "// Fires OnApplicationPause in DOTweenComponent even when Editor is paused (otherwise it's only fired at runtime)",
                          "#if UNITY_4_3 || UNITY_4_4 || UNITY_4_5 || UNITY_4_6 || UNITY_5 || UNITY_2017_1",
                          "static void PlaymodeStateChanged()",
                          "#else",
                          "static void PlaymodeStateChanged(UnityEditor.PlayModeStateChange state)",
                          "#endif",
                          "{",
                          "if (DOTween.instance == null) return;",
                          "DOTween.instance.OnApplicationPause(UnityEditor.EditorApplication.isPaused);",
                          "}",
                          "#endif",
                          "// █████████████████████████████████████████████████████████████████████████████████████████████████████████████████████",
                          "// ███ INTERNAL CLASSES ████████████████████████████████████████████████████████████████████████████████████████████████",
                          "// █████████████████████████████████████████████████████████████████████████████████████████████████████████████████████",
                          "public static class Physics",
                          "{",
                          "// Called via DOTweenExternalCommand callback",
                          "public static void SetOrientationOnPath(PathOptions options, Tween t, Quaternion newRot, Transform trans)",
                          "{",
                          "#if true // PHYSICS_MARKER",
                          "if (options.isRigidbody) ((Rigidbody)t.target).rotation = newRot;",
                          "else trans.rotation = newRot;",
                          "#else",
                          "trans.rotation = newRot;",
                          "#endif",
                          "}",
                          "// Returns FALSE if the DOTween's Physics2D Module is disabled, or if there's no Rigidbody2D attached",
                          "public static bool HasRigidbody2D(Component target)",
                          "{",
                          "#if true // PHYSICS2D_MARKER",
                          "return target.GetComponent<Rigidbody2D>() != null;",
                          "#else",
                          "return false;",
                          "#endif",
                          "}",
                          "#region Called via Reflection",
                          "// Called via Reflection by DOTweenPathInspector",
                          "// Returns FALSE if the DOTween's Physics Module is disabled, or if there's no rigidbody attached",
                          "#if UNITY_2018_1_OR_NEWER",
                          "[UnityEngine.Scripting.Preserve]",
                          "#endif",
                          "public static bool HasRigidbody(Component target)",
                          "{",
                          "#if true // PHYSICS_MARKER",
                          "return target.GetComponent<Rigidbody>() != null;",
                          "#else",
                          "return false;",
                          "#endif",
                          "}",
                          "// Called via Reflection by DOTweenPath",
                          "#if UNITY_2018_1_OR_NEWER",
                          "[UnityEngine.Scripting.Preserve]",
                          "#endif",
                          "public static TweenerCore<Vector3, Path, PathOptions> CreateDOTweenPathTween(",
                          "MonoBehaviour target, bool tweenRigidbody, bool isLocal, Path path, float duration, PathMode pathMode",
                          "){",
                          "TweenerCore<Vector3, Path, PathOptions> t = null;",
                          "bool rBodyFoundAndTweened = false;",
                          "#if true // PHYSICS_MARKER",
                          "if (tweenRigidbody) {",
                          "Rigidbody rBody = target.GetComponent<Rigidbody>();",
                          "if (rBody != null) {",
                          "rBodyFoundAndTweened = true;",
                          "t = isLocal",
                          "? rBody.DOLocalPath(path, duration, pathMode)",
                          ": rBody.DOPath(path, duration, pathMode);",
                          "}",
                          "}",
                          "#endif",
                          "#if true // PHYSICS2D_MARKER",
                          "if (!rBodyFoundAndTweened && tweenRigidbody) {",
                          "Rigidbody2D rBody2D = target.GetComponent<Rigidbody2D>();",
                          "if (rBody2D != null) {",
                          "rBodyFoundAndTweened = true;",
                          "t = isLocal",
                          "? rBody2D.DOLocalPath(path, duration, pathMode)",
                          ": rBody2D.DOPath(path, duration, pathMode);",
                          "}",
                          "}",
                          "#endif",
                          "if (!rBodyFoundAndTweened) {",
                          "t = isLocal",
                          "? target.transform.DOLocalPath(path, duration, pathMode)",
                          ": target.transform.DOPath(path, duration, pathMode);",
                          "}",
                          "return t;",
                          "}",
                          "#endregion",
                          "}",
                          "}",
                          "}"
                        ]
                      },
                      "DOTweenModuleUtils.cs.meta": {
                        "path": "./unity/Lumberjack/Assets/DOTween 4/Modules/DOTweenModuleUtils.cs.meta",
                        "isBinary": true,
                        "content": null
                      }
                    }
                  },
                  "Modules.meta": {
                    "path": "./unity/Lumberjack/Assets/DOTween 4/Modules.meta",
                    "isBinary": true,
                    "content": null
                  },
                  "readme.txt": {
                    "path": "./unity/Lumberjack/Assets/DOTween 4/readme.txt",
                    "isBinary": false,
                    "content": [
                      "DOTween and DOTween Pro are copyright (c) 2014-2018 Daniele Giardini - Demigiant",
                      "// IMPORTANT!!! /////////////////////////////////////////////",
                      "// Upgrading DOTween from versions older than 1.2.000 ///////",
                      "// (or DOTween Pro older than 1.0.000) //////////////////////",
                      "-------------------------------------------------------------",
                      "If you're upgrading your project from a version of DOTween older than 1.2.000 (or DOTween Pro older than 1.0.000) please follow these instructions carefully.",
                      "1) Import the new version in the same folder as the previous one, overwriting old files. A lot of errors will appear but don't worry",
                      "2) Close and reopen Unity (and your project). This is fundamental: skipping this step will cause a bloodbath",
                      "3) Open DOTween's Utility Panel (Tools > Demigiant > DOTween Utility Panel) if it doesn't open automatically, then press \\"Setup DOTween...\\": this will run the upgrade setup",
                      "4) From the Add/Remove Modules panel that opens, activate/deactivate Modules for Unity systems and for external assets (Pro version only)",
                      "// GET STARTED //////////////////////////////////////////////",
                      "- After importing a new DOTween update, select DOTween's Utility Panel from the \\"Tools/Demigiant\\" menu (if it doesn't open automatically) and press the \\"Setup DOTween...\\" button to activate/deactivate Modules. You can also access a Preferences Tab from there to choose default settings for DOTween.",
                      "- In your code, add \\"using DG.Tweening\\" to each class where you want to use DOTween.",
                      "- You're ready to tween. Check out the links below for full documentation and license info.",
                      "// LINKS ///////////////////////////////////////////////////////",
                      "DOTween website (documentation, examples, etc): http://dotween.demigiant.com",
                      "DOTween license: http://dotween.demigiant.com/license.php",
                      "DOTween repository (Google Code): https://code.google.com/p/dotween/",
                      "Demigiant website (documentation, examples, etc): http://www.demigiant.com",
                      "// NOTES //////////////////////////////////////////////////////",
                      "- DOTween's Utility Panel can be found under \\"Tools > Demigiant > DOTween Utility Panel\\" and also contains other useful options, plus a tab to set DOTween's preferences"
                    ]
                  },
                  "readme.txt.meta": {
                    "path": "./unity/Lumberjack/Assets/DOTween 4/readme.txt.meta",
                    "isBinary": true,
                    "content": null
                  }
                }
              },
              "DOTween 4.meta": {
                "path": "./unity/Lumberjack/Assets/DOTween 4.meta",
                "isBinary": true,
                "content": null
              },
              "Frictionless": {
                "path": "./unity/Lumberjack/Assets/Frictionless",
                "children": {
                  "IMultiSceneSingleton.cs": {
                    "path": "./unity/Lumberjack/Assets/Frictionless/IMultiSceneSingleton.cs",
                    "isBinary": false,
                    "content": [
                      "using UnityEngine;",
                      "using System.Collections;",
                      "namespace Frictionless",
                      "{",
                      "public interface IMultiSceneSingleton",
                      "{",
                      "IEnumerator HandleNewSceneLoaded();",
                      "}",
                      "}"
                    ]
                  },
                  "IMultiSceneSingleton.cs.meta": {
                    "path": "./unity/Lumberjack/Assets/Frictionless/IMultiSceneSingleton.cs.meta",
                    "isBinary": true,
                    "content": null
                  },
                  "IReinitializingMultiSceneSingleton.cs": {
                    "path": "./unity/Lumberjack/Assets/Frictionless/IReinitializingMultiSceneSingleton.cs",
                    "isBinary": false,
                    "content": [
                      "namespace Frictionless",
                      "{",
                      "public interface IReinitializingMultiSceneSingleton : IMultiSceneSingleton",
                      "{",
                      "void ReinitializeAfterSceneLoad();",
                      "}",
                      "}"
                    ]
                  },
                  "IReinitializingMultiSceneSingleton.cs.meta": {
                    "path": "./unity/Lumberjack/Assets/Frictionless/IReinitializingMultiSceneSingleton.cs.meta",
                    "isBinary": true,
                    "content": null
                  },
                  "MessageRouter.cs": {
                    "path": "./unity/Lumberjack/Assets/Frictionless/MessageRouter.cs",
                    "isBinary": false,
                    "content": [
                      "using System;",
                      "using System.Collections.Generic;",
                      "namespace Frictionless",
                      "{",
                      "public static class MessageRouter",
                      "{",
                      "private static readonly Dictionary<Type,List<MessageHandler>> Handlers = new Dictionary<Type, List<MessageHandler>>();",
                      "private static readonly List<Delegate> PendingRemovals = new List<Delegate>();",
                      "private static bool _isRaisingMessage;",
                      "public static void AddHandler<T>(Action<T> handler)",
                      "{",
                      "if (!Handlers.TryGetValue(typeof(T), out var delegates))",
                      "{",
                      "delegates = new List<MessageHandler>();",
                      "Handlers[typeof(T)] = delegates;",
                      "}",
                      "if (delegates.Find(x => x.Delegate == (Delegate) handler) == null)",
                      "delegates.Add(new MessageHandler() { Target = handler.Target, Delegate = handler });",
                      "}",
                      "public static void RemoveHandler<T>(Action<T> handler)",
                      "{",
                      "if (Handlers.TryGetValue(typeof(T), out var delegates))",
                      "{",
                      "MessageHandler existingHandler = delegates.Find(x => x.Delegate == (Delegate) handler);",
                      "if (existingHandler != null)",
                      "{",
                      "if (_isRaisingMessage)",
                      "PendingRemovals.Add(handler);",
                      "else",
                      "delegates.Remove(existingHandler);",
                      "}",
                      "}",
                      "}",
                      "public static void Reset()",
                      "{",
                      "Handlers.Clear();",
                      "}",
                      "public static void RaiseMessage(object msg)",
                      "{",
                      "try",
                      "{",
                      "if (Handlers.TryGetValue(msg.GetType(), out var delegates))",
                      "{",
                      "_isRaisingMessage = true;",
                      "try",
                      "{",
                      "foreach (MessageHandler h in delegates)",
                      "{",
                      "#if NETFX_CORE",
                      "h.Delegate.DynamicInvoke(msg);",
                      "#else",
                      "h.Delegate.Method.Invoke(h.Target, new object[] { msg });",
                      "#endif",
                      "}",
                      "}",
                      "finally",
                      "{",
                      "_isRaisingMessage = false;",
                      "}",
                      "foreach (Delegate d in PendingRemovals)",
                      "{",
                      "MessageHandler existingHandler = delegates.Find(x => x.Delegate == d);",
                      "if (existingHandler != null)",
                      "delegates.Remove(existingHandler);",
                      "}",
                      "PendingRemovals.Clear();",
                      "}",
                      "}",
                      "catch(Exception ex)",
                      "{",
                      "UnityEngine.Debug.LogError(\\"Exception while raising message \\" + msg + \\": \\" + ex);",
                      "}",
                      "}",
                      "public class MessageHandler",
                      "{",
                      "public object Target { get; set; }",
                      "public Delegate Delegate { get; set; }",
                      "}",
                      "}",
                      "}"
                    ]
                  },
                  "MessageRouter.cs.meta": {
                    "path": "./unity/Lumberjack/Assets/Frictionless/MessageRouter.cs.meta",
                    "isBinary": true,
                    "content": null
                  },
                  "ServiceFactory.cs": {
                    "path": "./unity/Lumberjack/Assets/Frictionless/ServiceFactory.cs",
                    "isBinary": false,
                    "content": [
                      "using System;",
                      "using System.Collections;",
                      "using System.Collections.Generic;",
                      "using UnityEngine;",
                      "/// <summary>",
                      "/// A simple, *single-threaded*, service locator appropriate for use with Unity.",
                      "/// </summary>",
                      "namespace Frictionless",
                      "{",
                      "public static class ServiceFactory",
                      "{",
                      "private static readonly Dictionary<Type,Type> singletons = new Dictionary<Type, Type>();",
                      "private static readonly Dictionary<Type,Type> transients = new Dictionary<Type, Type>();",
                      "private static readonly Dictionary<Type,object> singletonInstances = new Dictionary<Type, object>();",
                      "public static bool IsEmpty",
                      "{",
                      "get { return singletons.Count == 0 && transients.Count == 0; }",
                      "}",
                      "public static void Reset()",
                      "{",
                      "List<Type> survivorRegisteredTypes = new List<Type>();",
                      "List<object> survivors = new List<object>();",
                      "foreach(KeyValuePair<Type,object> pair in singletonInstances)",
                      "{",
                      "if (pair.Value is IMultiSceneSingleton)",
                      "{",
                      "survivors.Add(pair.Value);",
                      "survivorRegisteredTypes.Add(pair.Key);",
                      "}",
                      "}",
                      "singletons.Clear();",
                      "transients.Clear();",
                      "singletonInstances.Clear();",
                      "for (int i = 0; i < survivors.Count; i++)",
                      "{",
                      "singletonInstances[survivorRegisteredTypes[i]] = survivors[i];",
                      "singletons[survivorRegisteredTypes[i]] = survivors[i].GetType();",
                      "}",
                      "}",
                      "public static void RegisterSingleton<TConcrete>()",
                      "{",
                      "singletons[typeof(TConcrete)] = typeof(TConcrete);",
                      "}",
                      "public static void RegisterSingleton<TAbstract,TConcrete>()",
                      "{",
                      "singletons[typeof(TAbstract)] = typeof(TConcrete);",
                      "}",
                      "public static void RegisterSingleton<TConcrete>(TConcrete instance)",
                      "{",
                      "singletons[typeof(TConcrete)] = typeof(TConcrete);",
                      "singletonInstances[typeof(TConcrete)] = instance;",
                      "}",
                      "public static void RegisterTransient<TAbstract,TConcrete>()",
                      "{",
                      "transients[typeof(TAbstract)] = typeof(TConcrete);",
                      "}",
                      "public static T Resolve<T>() where T : class",
                      "{",
                      "return Resolve<T>(false);",
                      "}",
                      "public static T Resolve<T>(bool onlyExisting) where T : class",
                      "{",
                      "T result = default(T);",
                      "Type concreteType = null;",
                      "if (singletons.TryGetValue(typeof(T), out concreteType))",
                      "{",
                      "object r = null;",
                      "if (!singletonInstances.TryGetValue(typeof(T), out r) && !onlyExisting)",
                      "{",
                      "#if NETFX_CORE",
                      "if (concreteType.GetTypeInfo().IsSubclassOf(typeof(MonoBehaviour)))",
                      "#else",
                      "if (concreteType.IsSubclassOf(typeof(MonoBehaviour)))",
                      "#endif",
                      "{",
                      "GameObject singletonGameObject = new GameObject();",
                      "r = singletonGameObject.AddComponent(concreteType);",
                      "singletonGameObject.name = $\\"{typeof(T)} (singleton)\\";",
                      "}",
                      "else",
                      "r = Activator.CreateInstance(concreteType);",
                      "singletonInstances[typeof(T)] = r;",
                      "}",
                      "result = (T)r;",
                      "}",
                      "else if (transients.TryGetValue(typeof(T), out concreteType))",
                      "{",
                      "object r = Activator.CreateInstance(concreteType);",
                      "result = (T)r;",
                      "}",
                      "return result;",
                      "}",
                      "public static IEnumerator HandleSceneLoad(AsyncOperation sceneLoadOperation)",
                      "{",
                      "yield return sceneLoadOperation;",
                      "foreach(KeyValuePair<Type,object> pair in singletonInstances)",
                      "{",
                      "if (pair.Value is IReinitializingMultiSceneSingleton reinitializingMultiSceneSingleton)",
                      "{",
                      "reinitializingMultiSceneSingleton.ReinitializeAfterSceneLoad();",
                      "}",
                      "}",
                      "}",
                      "}",
                      "}"
                    ]
                  },
                  "ServiceFactory.cs.meta": {
                    "path": "./unity/Lumberjack/Assets/Frictionless/ServiceFactory.cs.meta",
                    "isBinary": true,
                    "content": null
                  }
                }
              },
              "Frictionless.meta": {
                "path": "./unity/Lumberjack/Assets/Frictionless.meta",
                "isBinary": true,
                "content": null
              },
              "Game": {
                "path": "./unity/Lumberjack/Assets/Game",
                "children": {
                  "Materials": {
                    "path": "./unity/Lumberjack/Assets/Game/Materials",
                    "children": {
                      "WoodParticles.mat": {
                        "path": "./unity/Lumberjack/Assets/Game/Materials/WoodParticles.mat",
                        "isBinary": true,
                        "content": null
                      },
                      "WoodParticles.mat.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Materials/WoodParticles.mat.meta",
                        "isBinary": true,
                        "content": null
                      }
                    }
                  },
                  "Materials.meta": {
                    "path": "./unity/Lumberjack/Assets/Game/Materials.meta",
                    "isBinary": true,
                    "content": null
                  },
                  "Prefabs": {
                    "path": "./unity/Lumberjack/Assets/Game/Prefabs",
                    "children": {
                      "DefaultButton.prefab": {
                        "path": "./unity/Lumberjack/Assets/Game/Prefabs/DefaultButton.prefab",
                        "isBinary": true,
                        "content": null
                      },
                      "DefaultButton.prefab.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Prefabs/DefaultButton.prefab.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "InteractionBlocker.prefab": {
                        "path": "./unity/Lumberjack/Assets/Game/Prefabs/InteractionBlocker.prefab",
                        "isBinary": true,
                        "content": null
                      },
                      "InteractionBlocker.prefab.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Prefabs/InteractionBlocker.prefab.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "NftItemView.prefab": {
                        "path": "./unity/Lumberjack/Assets/Game/Prefabs/NftItemView.prefab",
                        "isBinary": true,
                        "content": null
                      },
                      "NftItemView.prefab.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Prefabs/NftItemView.prefab.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "NftListPopup.prefab": {
                        "path": "./unity/Lumberjack/Assets/Game/Prefabs/NftListPopup.prefab",
                        "isBinary": true,
                        "content": null
                      },
                      "NftListPopup.prefab.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Prefabs/NftListPopup.prefab.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "SessionPopup.prefab": {
                        "path": "./unity/Lumberjack/Assets/Game/Prefabs/SessionPopup.prefab",
                        "isBinary": true,
                        "content": null
                      },
                      "SessionPopup.prefab.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Prefabs/SessionPopup.prefab.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "SolBalanceWidget.prefab": {
                        "path": "./unity/Lumberjack/Assets/Game/Prefabs/SolBalanceWidget.prefab",
                        "isBinary": true,
                        "content": null
                      },
                      "SolBalanceWidget.prefab.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Prefabs/SolBalanceWidget.prefab.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "TokenBalanceWidget.prefab": {
                        "path": "./unity/Lumberjack/Assets/Game/Prefabs/TokenBalanceWidget.prefab",
                        "isBinary": true,
                        "content": null
                      },
                      "TokenBalanceWidget.prefab.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Prefabs/TokenBalanceWidget.prefab.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "WoodParticles.prefab": {
                        "path": "./unity/Lumberjack/Assets/Game/Prefabs/WoodParticles.prefab",
                        "isBinary": true,
                        "content": null
                      },
                      "WoodParticles.prefab.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Prefabs/WoodParticles.prefab.meta",
                        "isBinary": true,
                        "content": null
                      }
                    }
                  },
                  "Prefabs.meta": {
                    "path": "./unity/Lumberjack/Assets/Game/Prefabs.meta",
                    "isBinary": true,
                    "content": null
                  },
                  "Scenes": {
                    "path": "./unity/Lumberjack/Assets/Game/Scenes",
                    "children": {
                      "GameScene.unity": {
                        "path": "./unity/Lumberjack/Assets/Game/Scenes/GameScene.unity",
                        "isBinary": false,
                        "content": [
                          "%YAML 1.1",
                          "%TAG !u! tag:unity3d.com,2011:",
                          "--- !u!29 &1",
                          "OcclusionCullingSettings:",
                          "m_ObjectHideFlags: 0",
                          "serializedVersion: 2",
                          "m_OcclusionBakeSettings:",
                          "smallestOccluder: 5",
                          "smallestHole: 0.25",
                          "backfaceThreshold: 100",
                          "m_SceneGUID: 00000000000000000000000000000000",
                          "m_OcclusionCullingData: {fileID: 0}",
                          "--- !u!104 &2",
                          "RenderSettings:",
                          "m_ObjectHideFlags: 0",
                          "serializedVersion: 9",
                          "m_Fog: 0",
                          "m_FogColor: {r: 0.5, g: 0.5, b: 0.5, a: 1}",
                          "m_FogMode: 3",
                          "m_FogDensity: 0.01",
                          "m_LinearFogStart: 0",
                          "m_LinearFogEnd: 300",
                          "m_AmbientSkyColor: {r: 0.212, g: 0.227, b: 0.259, a: 1}",
                          "m_AmbientEquatorColor: {r: 0.114, g: 0.125, b: 0.133, a: 1}",
                          "m_AmbientGroundColor: {r: 0.047, g: 0.043, b: 0.035, a: 1}",
                          "m_AmbientIntensity: 1",
                          "m_AmbientMode: 0",
                          "m_SubtractiveShadowColor: {r: 0.42, g: 0.478, b: 0.627, a: 1}",
                          "m_SkyboxMaterial: {fileID: 10304, guid: 0000000000000000f000000000000000, type: 0}",
                          "m_HaloStrength: 0.5",
                          "m_FlareStrength: 1",
                          "m_FlareFadeSpeed: 3",
                          "m_HaloTexture: {fileID: 0}",
                          "m_SpotCookie: {fileID: 10001, guid: 0000000000000000e000000000000000, type: 0}",
                          "m_DefaultReflectionMode: 0",
                          "m_DefaultReflectionResolution: 128",
                          "m_ReflectionBounces: 1",
                          "m_ReflectionIntensity: 1",
                          "m_CustomReflection: {fileID: 0}",
                          "m_Sun: {fileID: 0}",
                          "m_IndirectSpecularColor: {r: 0.4439372, g: 0.49315345, b: 0.5721989, a: 1}",
                          "m_UseRadianceAmbientProbe: 0",
                          "--- !u!157 &3",
                          "LightmapSettings:",
                          "m_ObjectHideFlags: 0",
                          "serializedVersion: 12",
                          "m_GIWorkflowMode: 1",
                          "m_GISettings:",
                          "serializedVersion: 2",
                          "m_BounceScale: 1",
                          "m_IndirectOutputScale: 1",
                          "m_AlbedoBoost: 1",
                          "m_EnvironmentLightingMode: 0",
                          "m_EnableBakedLightmaps: 1",
                          "m_EnableRealtimeLightmaps: 0",
                          "m_LightmapEditorSettings:",
                          "serializedVersion: 12",
                          "m_Resolution: 2",
                          "m_BakeResolution: 40",
                          "m_AtlasSize: 1024",
                          "m_AO: 0",
                          "m_AOMaxDistance: 1",
                          "m_CompAOExponent: 1",
                          "m_CompAOExponentDirect: 0",
                          "m_ExtractAmbientOcclusion: 0",
                          "m_Padding: 2",
                          "m_LightmapParameters: {fileID: 0}",
                          "m_LightmapsBakeMode: 1",
                          "m_TextureCompression: 1",
                          "m_FinalGather: 0",
                          "m_FinalGatherFiltering: 1",
                          "m_FinalGatherRayCount: 256",
                          "m_ReflectionCompression: 2",
                          "m_MixedBakeMode: 2",
                          "m_BakeBackend: 1",
                          "m_PVRSampling: 1",
                          "m_PVRDirectSampleCount: 32",
                          "m_PVRSampleCount: 512",
                          "m_PVRBounces: 2",
                          "m_PVREnvironmentSampleCount: 256",
                          "m_PVREnvironmentReferencePointCount: 2048",
                          "m_PVRFilteringMode: 1",
                          "m_PVRDenoiserTypeDirect: 1",
                          "m_PVRDenoiserTypeIndirect: 1",
                          "m_PVRDenoiserTypeAO: 1",
                          "m_PVRFilterTypeDirect: 0",
                          "m_PVRFilterTypeIndirect: 0",
                          "m_PVRFilterTypeAO: 0",
                          "m_PVREnvironmentMIS: 1",
                          "m_PVRCulling: 1",
                          "m_PVRFilteringGaussRadiusDirect: 1",
                          "m_PVRFilteringGaussRadiusIndirect: 5",
                          "m_PVRFilteringGaussRadiusAO: 2",
                          "m_PVRFilteringAtrousPositionSigmaDirect: 0.5",
                          "m_PVRFilteringAtrousPositionSigmaIndirect: 2",
                          "m_PVRFilteringAtrousPositionSigmaAO: 1",
                          "m_ExportTrainingData: 0",
                          "m_TrainingDataDestination: TrainingData",
                          "m_LightProbeSampleCountMultiplier: 4",
                          "m_LightingDataAsset: {fileID: 0}",
                          "m_LightingSettings: {fileID: 0}",
                          "--- !u!196 &4",
                          "NavMeshSettings:",
                          "serializedVersion: 2",
                          "m_ObjectHideFlags: 0",
                          "m_BuildSettings:",
                          "serializedVersion: 2",
                          "agentTypeID: 0",
                          "agentRadius: 0.5",
                          "agentHeight: 2",
                          "agentSlope: 45",
                          "agentClimb: 0.4",
                          "ledgeDropHeight: 0",
                          "maxJumpAcrossDistance: 0",
                          "minRegionArea: 2",
                          "manualCellSize: 0",
                          "cellSize: 0.16666667",
                          "manualTileSize: 0",
                          "tileSize: 256",
                          "accuratePlacement: 0",
                          "maxJobWorkers: 0",
                          "preserveTilesOutsideBounds: 0",
                          "debug:",
                          "m_Flags: 0",
                          "m_NavMeshData: {fileID: 0}",
                          "--- !u!1 &15026960",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 15026961}",
                          "- component: {fileID: 15026962}",
                          "m_Layer: 5",
                          "m_Name: SocketWidget",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!224 &15026961",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 15026960}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children:",
                          "- {fileID: 849951519}",
                          "- {fileID: 796718308}",
                          "m_Father: {fileID: 895286102}",
                          "m_RootOrder: 9",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 1, y: 0}",
                          "m_AnchorMax: {x: 1, y: 0}",
                          "m_AnchoredPosition: {x: -9.400024, y: 9.400024}",
                          "m_SizeDelta: {x: 253.613, y: 100}",
                          "m_Pivot: {x: 1, y: 0}",
                          "--- !u!114 &15026962",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 15026960}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: dbce47be4af1b404ab5d53d64d83a012, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "StatusText: {fileID: 796718309}",
                          "ReconnectButton: {fileID: 849951520}",
                          "--- !u!1001 &120311847",
                          "PrefabInstance:",
                          "m_ObjectHideFlags: 0",
                          "serializedVersion: 2",
                          "m_Modification:",
                          "m_TransformParent: {fileID: 361775995}",
                          "m_Modifications:",
                          "- target: {fileID: 8899174230227746436, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_AnchoredPosition.y",
                          "value: -101.70001",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_Pivot.x",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_Pivot.y",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_RootOrder",
                          "value: 2",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_AnchorMax.x",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_AnchorMax.y",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_AnchorMin.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_AnchorMin.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_SizeDelta.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_SizeDelta.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_LocalPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_LocalPosition.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_LocalPosition.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_LocalRotation.w",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_LocalRotation.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_LocalRotation.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_LocalRotation.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_AnchoredPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_AnchoredPosition.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247631, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_Name",
                          "value: InteractionBlocker",
                          "objectReference: {fileID: 0}",
                          "m_RemovedComponents: []",
                          "m_SourcePrefab: {fileID: 100100000, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "--- !u!1 &134336968",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 134336971}",
                          "- component: {fileID: 134336970}",
                          "- component: {fileID: 134336969}",
                          "m_Layer: 0",
                          "m_Name: EventSystem",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!114 &134336969",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 134336968}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: 4f231c4fb786f3946a6b90b886c48677, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_SendPointerHoverToParent: 1",
                          "m_HorizontalAxis: Horizontal",
                          "m_VerticalAxis: Vertical",
                          "m_SubmitButton: Submit",
                          "m_CancelButton: Cancel",
                          "m_InputActionsPerSecond: 10",
                          "m_RepeatDelay: 0.5",
                          "m_ForceModuleActive: 0",
                          "--- !u!114 &134336970",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 134336968}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: 76c392e42b5098c458856cdf6ecaaaa1, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_FirstSelected: {fileID: 0}",
                          "m_sendNavigationEvents: 1",
                          "m_DragThreshold: 10",
                          "--- !u!4 &134336971",
                          "Transform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 134336968}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 0}",
                          "m_RootOrder: 4",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "--- !u!1 &213723156",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 213723159}",
                          "- component: {fileID: 213723158}",
                          "- component: {fileID: 213723157}",
                          "m_Layer: 5",
                          "m_Name: NextEnergyText",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!114 &213723157",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 213723156}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: f4688fdb7df04437aeb418b961361dc5, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_Material: {fileID: 0}",
                          "m_Color: {r: 1, g: 1, b: 1, a: 1}",
                          "m_RaycastTarget: 1",
                          "m_RaycastPadding: {x: 0, y: 0, z: 0, w: 0}",
                          "m_Maskable: 1",
                          "m_OnCullStateChanged:",
                          "m_PersistentCalls:",
                          "m_Calls: []",
                          "m_text: 'Next Energy in: 10'",
                          "m_isRightToLeft: 0",
                          "m_fontAsset: {fileID: 11400000, guid: 8f586378b4e144a9851e7b34d9b748ee, type: 2}",
                          "m_sharedMaterial: {fileID: 2180264, guid: 8f586378b4e144a9851e7b34d9b748ee, type: 2}",
                          "m_fontSharedMaterials: []",
                          "m_fontMaterial: {fileID: 0}",
                          "m_fontMaterials: []",
                          "m_fontColor32:",
                          "serializedVersion: 2",
                          "rgba: 4294967295",
                          "m_fontColor: {r: 1, g: 1, b: 1, a: 1}",
                          "m_enableVertexGradient: 0",
                          "m_colorMode: 3",
                          "m_fontColorGradient:",
                          "topLeft: {r: 1, g: 1, b: 1, a: 1}",
                          "topRight: {r: 1, g: 1, b: 1, a: 1}",
                          "bottomLeft: {r: 1, g: 1, b: 1, a: 1}",
                          "bottomRight: {r: 1, g: 1, b: 1, a: 1}",
                          "m_fontColorGradientPreset: {fileID: 0}",
                          "m_spriteAsset: {fileID: 0}",
                          "m_tintAllSprites: 0",
                          "m_StyleSheet: {fileID: 0}",
                          "m_TextStyleHashCode: -1183493901",
                          "m_overrideHtmlColors: 0",
                          "m_faceColor:",
                          "serializedVersion: 2",
                          "rgba: 4294967295",
                          "m_fontSize: 26.05",
                          "m_fontSizeBase: 26.05",
                          "m_fontWeight: 400",
                          "m_enableAutoSizing: 0",
                          "m_fontSizeMin: 18",
                          "m_fontSizeMax: 72",
                          "m_fontStyle: 0",
                          "m_HorizontalAlignment: 4",
                          "m_VerticalAlignment: 256",
                          "m_textAlignment: 65535",
                          "m_characterSpacing: 0",
                          "m_wordSpacing: 0",
                          "m_lineSpacing: 0",
                          "m_lineSpacingMax: 0",
                          "m_paragraphSpacing: 0",
                          "m_charWidthMaxAdj: 0",
                          "m_enableWordWrapping: 1",
                          "m_wordWrappingRatios: 0.4",
                          "m_overflowMode: 0",
                          "m_linkedTextComponent: {fileID: 0}",
                          "parentLinkedComponent: {fileID: 0}",
                          "m_enableKerning: 1",
                          "m_enableExtraPadding: 0",
                          "checkPaddingRequired: 0",
                          "m_isRichText: 1",
                          "m_parseCtrlCharacters: 1",
                          "m_isOrthographic: 1",
                          "m_isCullingEnabled: 0",
                          "m_horizontalMapping: 0",
                          "m_verticalMapping: 0",
                          "m_uvLineOffset: 0",
                          "m_geometrySortingOrder: 0",
                          "m_IsTextObjectScaleStatic: 0",
                          "m_VertexBufferAutoSizeReduction: 0",
                          "m_useMaxVisibleDescender: 1",
                          "m_pageToDisplay: 1",
                          "m_margin: {x: 0, y: 0, z: 0, w: 0}",
                          "m_isUsingLegacyAnimationComponent: 0",
                          "m_isVolumetricText: 0",
                          "m_hasFontAssetChanged: 0",
                          "m_baseMaterial: {fileID: 0}",
                          "m_maskOffset: {x: 0, y: 0, z: 0, w: 0}",
                          "--- !u!222 &213723158",
                          "CanvasRenderer:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 213723156}",
                          "m_CullTransparentMesh: 1",
                          "--- !u!224 &213723159",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 213723156}",
                          "m_LocalRotation: {x: -0, y: -0, z: -0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 895286102}",
                          "m_RootOrder: 4",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 1, y: 1}",
                          "m_AnchorMax: {x: 1, y: 1}",
                          "m_AnchoredPosition: {x: -6, y: -182.5}",
                          "m_SizeDelta: {x: 419, y: 29.526596}",
                          "m_Pivot: {x: 1, y: 1}",
                          "--- !u!1001 &279988557",
                          "PrefabInstance:",
                          "m_ObjectHideFlags: 0",
                          "serializedVersion: 2",
                          "m_Modification:",
                          "m_TransformParent: {fileID: 734343833}",
                          "m_Modifications:",
                          "- target: {fileID: 946525032574983128, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_Name",
                          "value: TokenBalanceWidget",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983130, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: TokenMintAdress",
                          "value: CgPG8inVvG3S6BpP6CWN1XY2swMXU1iPqgfYNaSMp5dd",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_Pivot.x",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_Pivot.y",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_RootOrder",
                          "value: 3",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_AnchorMax.x",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_AnchorMax.y",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_AnchorMin.x",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_AnchorMin.y",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_SizeDelta.x",
                          "value: 262.43787",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_SizeDelta.y",
                          "value: 49.277588",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_LocalPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_LocalPosition.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_LocalPosition.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_LocalRotation.w",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_LocalRotation.x",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_LocalRotation.y",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_LocalRotation.z",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_AnchoredPosition.x",
                          "value: -140",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_AnchoredPosition.y",
                          "value: -55",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 946525032748819597, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_fontAsset",
                          "value:",
                          "objectReference: {fileID: 11400000, guid: 8f586378b4e144a9851e7b34d9b748ee, type: 2}",
                          "- target: {fileID: 946525032748819597, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "propertyPath: m_sharedMaterial",
                          "value:",
                          "objectReference: {fileID: 2180264, guid: 8f586378b4e144a9851e7b34d9b748ee, type: 2}",
                          "m_RemovedComponents: []",
                          "m_SourcePrefab: {fileID: 100100000, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "--- !u!224 &279988558 stripped",
                          "RectTransform:",
                          "m_CorrespondingSourceObject: {fileID: 946525032574983131, guid: 9983340f07aa240e7adad9f74350fcf4, type: 3}",
                          "m_PrefabInstance: {fileID: 279988557}",
                          "m_PrefabAsset: {fileID: 0}",
                          "--- !u!1 &327582528",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 327582529}",
                          "- component: {fileID: 327582530}",
                          "m_Layer: 5",
                          "m_Name: SelectedNft",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!224 &327582529",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 327582528}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children:",
                          "- {fileID: 1957529230}",
                          "m_Father: {fileID: 895286102}",
                          "m_RootOrder: 5",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 0, y: 1}",
                          "m_AnchorMax: {x: 0, y: 1}",
                          "m_AnchoredPosition: {x: 59.900024, y: -120.28003}",
                          "m_SizeDelta: {x: 100, y: 100}",
                          "m_Pivot: {x: 0.5, y: 0.5}",
                          "--- !u!114 &327582530",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 327582528}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: c2741eec8497b40ad885aeebd3b801fb, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "NftItemView: {fileID: 1957529231}",
                          "--- !u!1 &361775991",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 361775995}",
                          "- component: {fileID: 361775994}",
                          "- component: {fileID: 361775993}",
                          "- component: {fileID: 361775992}",
                          "m_Layer: 5",
                          "m_Name: Canvas",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!114 &361775992",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 361775991}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: dc42784cf147c0c48a680349fa168899, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_IgnoreReversedGraphics: 1",
                          "m_BlockingObjects: 0",
                          "m_BlockingMask:",
                          "serializedVersion: 2",
                          "m_Bits: 4294967295",
                          "--- !u!114 &361775993",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 361775991}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: 0cd44c1031e13a943bb63640046fad76, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_UiScaleMode: 1",
                          "m_ReferencePixelsPerUnit: 100",
                          "m_ScaleFactor: 1",
                          "m_ReferenceResolution: {x: 1920, y: 1080}",
                          "m_ScreenMatchMode: 0",
                          "m_MatchWidthOrHeight: 0.5",
                          "m_PhysicalUnit: 3",
                          "m_FallbackScreenDPI: 96",
                          "m_DefaultSpriteDPI: 96",
                          "m_DynamicPixelsPerUnit: 1",
                          "m_PresetInfoIsWorld: 0",
                          "--- !u!223 &361775994",
                          "Canvas:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 361775991}",
                          "m_Enabled: 1",
                          "serializedVersion: 3",
                          "m_RenderMode: 1",
                          "m_Camera: {fileID: 2044713759}",
                          "m_PlaneDistance: 100",
                          "m_PixelPerfect: 0",
                          "m_ReceivesEvents: 1",
                          "m_OverrideSorting: 0",
                          "m_OverridePixelPerfect: 0",
                          "m_SortingBucketNormalizedSize: 0",
                          "m_AdditionalShaderChannelsFlag: 25",
                          "m_SortingLayerID: 0",
                          "m_SortingOrder: 0",
                          "m_TargetDisplay: 0",
                          "--- !u!224 &361775995",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 361775991}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 0, y: 0, z: 0}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children:",
                          "- {fileID: 402113352}",
                          "- {fileID: 734343833}",
                          "- {fileID: 1620928785}",
                          "m_Father: {fileID: 0}",
                          "m_RootOrder: 3",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 0, y: 0}",
                          "m_AnchorMax: {x: 0, y: 0}",
                          "m_AnchoredPosition: {x: 0, y: 0}",
                          "m_SizeDelta: {x: 0, y: 0}",
                          "m_Pivot: {x: 0, y: 0}",
                          "--- !u!1001 &395139614",
                          "PrefabInstance:",
                          "m_ObjectHideFlags: 0",
                          "serializedVersion: 2",
                          "m_Modification:",
                          "m_TransformParent: {fileID: 1648474101}",
                          "m_Modifications:",
                          "- target: {fileID: 4543230662287133981, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_text",
                          "value: Init Account",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662287133981, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_fontSize",
                          "value: 34.25",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_Pivot.x",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_Pivot.y",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_RootOrder",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMax.x",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMax.y",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMin.x",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMin.y",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_SizeDelta.x",
                          "value: 250",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_SizeDelta.y",
                          "value: 60",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalPosition.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalPosition.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.w",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.x",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.y",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.z",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchoredPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchoredPosition.y",
                          "value: 27.2",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328021, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_Name",
                          "value: InitButton",
                          "objectReference: {fileID: 0}",
                          "m_RemovedComponents: []",
                          "m_SourcePrefab: {fileID: 100100000, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "--- !u!224 &395139615 stripped",
                          "RectTransform:",
                          "m_CorrespondingSourceObject: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "m_PrefabInstance: {fileID: 395139614}",
                          "m_PrefabAsset: {fileID: 0}",
                          "--- !u!1 &402113351",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 402113352}",
                          "- component: {fileID: 402113354}",
                          "- component: {fileID: 402113353}",
                          "m_Layer: 5",
                          "m_Name: Bg",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!224 &402113352",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 402113351}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 361775995}",
                          "m_RootOrder: 0",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 0, y: 0}",
                          "m_AnchorMax: {x: 1, y: 1}",
                          "m_AnchoredPosition: {x: 0, y: 0}",
                          "m_SizeDelta: {x: 2146.366, y: 1498.71}",
                          "m_Pivot: {x: 0.5, y: 0.5}",
                          "--- !u!114 &402113353",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 402113351}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: fe87c0e1cc204ed48ad3b37840f39efc, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_Material: {fileID: 0}",
                          "m_Color: {r: 0.4433962, g: 0.4433962, b: 0.4433962, a: 1}",
                          "m_RaycastTarget: 1",
                          "m_RaycastPadding: {x: 0, y: 0, z: 0, w: 0}",
                          "m_Maskable: 1",
                          "m_OnCullStateChanged:",
                          "m_PersistentCalls:",
                          "m_Calls: []",
                          "m_Sprite: {fileID: 21300000, guid: a22cfbcc8ebee4c669dd592fe09975b2, type: 3}",
                          "m_Type: 0",
                          "m_PreserveAspect: 1",
                          "m_FillCenter: 1",
                          "m_FillMethod: 4",
                          "m_FillAmount: 1",
                          "m_FillClockwise: 1",
                          "m_FillOrigin: 0",
                          "m_UseSpriteMesh: 0",
                          "m_PixelsPerUnitMultiplier: 1",
                          "--- !u!222 &402113354",
                          "CanvasRenderer:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 402113351}",
                          "m_CullTransparentMesh: 1",
                          "--- !u!1 &455991733",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 455991737}",
                          "- component: {fileID: 455991736}",
                          "- component: {fileID: 455991735}",
                          "- component: {fileID: 455991734}",
                          "m_Layer: 5",
                          "m_Name: ChopSession",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!114 &455991734",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 455991733}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: 4e29b1a8efbd4b44bb3f3716e73f07ff, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_Navigation:",
                          "m_Mode: 3",
                          "m_WrapAround: 0",
                          "m_SelectOnUp: {fileID: 0}",
                          "m_SelectOnDown: {fileID: 0}",
                          "m_SelectOnLeft: {fileID: 0}",
                          "m_SelectOnRight: {fileID: 0}",
                          "m_Transition: 1",
                          "m_Colors:",
                          "m_NormalColor: {r: 1, g: 1, b: 1, a: 1}",
                          "m_HighlightedColor: {r: 0.9607843, g: 0.9607843, b: 0.9607843, a: 1}",
                          "m_PressedColor: {r: 0.78431374, g: 0.78431374, b: 0.78431374, a: 1}",
                          "m_SelectedColor: {r: 0.9607843, g: 0.9607843, b: 0.9607843, a: 1}",
                          "m_DisabledColor: {r: 0.78431374, g: 0.78431374, b: 0.78431374, a: 0.5019608}",
                          "m_ColorMultiplier: 1",
                          "m_FadeDuration: 0.1",
                          "m_SpriteState:",
                          "m_HighlightedSprite: {fileID: 0}",
                          "m_PressedSprite: {fileID: 0}",
                          "m_SelectedSprite: {fileID: 0}",
                          "m_DisabledSprite: {fileID: 0}",
                          "m_AnimationTriggers:",
                          "m_NormalTrigger: Normal",
                          "m_HighlightedTrigger: Highlighted",
                          "m_PressedTrigger: Pressed",
                          "m_SelectedTrigger: Selected",
                          "m_DisabledTrigger: Disabled",
                          "m_Interactable: 1",
                          "m_TargetGraphic: {fileID: 455991735}",
                          "m_OnClick:",
                          "m_PersistentCalls:",
                          "m_Calls: []",
                          "--- !u!114 &455991735",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 455991733}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: fe87c0e1cc204ed48ad3b37840f39efc, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_Material: {fileID: 0}",
                          "m_Color: {r: 1, g: 1, b: 1, a: 1}",
                          "m_RaycastTarget: 1",
                          "m_RaycastPadding: {x: 0, y: 0, z: 0, w: 0}",
                          "m_Maskable: 1",
                          "m_OnCullStateChanged:",
                          "m_PersistentCalls:",
                          "m_Calls: []",
                          "m_Sprite: {fileID: 21300000, guid: 88879cf224ccd439294f8383e553d13f, type: 3}",
                          "m_Type: 0",
                          "m_PreserveAspect: 1",
                          "m_FillCenter: 1",
                          "m_FillMethod: 4",
                          "m_FillAmount: 1",
                          "m_FillClockwise: 1",
                          "m_FillOrigin: 0",
                          "m_UseSpriteMesh: 0",
                          "m_PixelsPerUnitMultiplier: 1",
                          "--- !u!222 &455991736",
                          "CanvasRenderer:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 455991733}",
                          "m_CullTransparentMesh: 1",
                          "--- !u!224 &455991737",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 455991733}",
                          "m_LocalRotation: {x: -0, y: -0, z: -0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children:",
                          "- {fileID: 1337673075}",
                          "m_Father: {fileID: 895286102}",
                          "m_RootOrder: 0",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 0.5, y: 0.5}",
                          "m_AnchorMax: {x: 0.5, y: 0.5}",
                          "m_AnchoredPosition: {x: 0, y: 0}",
                          "m_SizeDelta: {x: 160, y: 100.0274}",
                          "m_Pivot: {x: 0.5, y: 0.5}",
                          "--- !u!114 &491985597 stripped",
                          "MonoBehaviour:",
                          "m_CorrespondingSourceObject: {fileID: 4543230662569328023, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "m_PrefabInstance: {fileID: 395139614}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 0}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: 4e29b1a8efbd4b44bb3f3716e73f07ff, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "--- !u!1 &505201858",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 505201859}",
                          "- component: {fileID: 505201861}",
                          "- component: {fileID: 505201860}",
                          "m_Layer: 5",
                          "m_Name: WoodCount",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!224 &505201859",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 505201858}",
                          "m_LocalRotation: {x: -0, y: -0, z: -0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children:",
                          "- {fileID: 2026945622}",
                          "m_Father: {fileID: 895286102}",
                          "m_RootOrder: 3",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 1, y: 1}",
                          "m_AnchorMax: {x: 1, y: 1}",
                          "m_AnchoredPosition: {x: -6, y: -104.5}",
                          "m_SizeDelta: {x: 33.0737, y: 33.0737}",
                          "m_Pivot: {x: 1, y: 1}",
                          "--- !u!114 &505201860",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 505201858}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: fe87c0e1cc204ed48ad3b37840f39efc, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_Material: {fileID: 0}",
                          "m_Color: {r: 1, g: 1, b: 1, a: 1}",
                          "m_RaycastTarget: 1",
                          "m_RaycastPadding: {x: 0, y: 0, z: 0, w: 0}",
                          "m_Maskable: 1",
                          "m_OnCullStateChanged:",
                          "m_PersistentCalls:",
                          "m_Calls: []",
                          "m_Sprite: {fileID: 21300000, guid: b96f00b241a5646b281bed9ba703b7e1, type: 3}",
                          "m_Type: 0",
                          "m_PreserveAspect: 0",
                          "m_FillCenter: 1",
                          "m_FillMethod: 4",
                          "m_FillAmount: 1",
                          "m_FillClockwise: 1",
                          "m_FillOrigin: 0",
                          "m_UseSpriteMesh: 0",
                          "m_PixelsPerUnitMultiplier: 1",
                          "--- !u!222 &505201861",
                          "CanvasRenderer:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 505201858}",
                          "m_CullTransparentMesh: 1",
                          "--- !u!1 &652250375",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 652250378}",
                          "- component: {fileID: 652250377}",
                          "- component: {fileID: 652250376}",
                          "m_Layer: 0",
                          "m_Name: Main Camera",
                          "m_TagString: MainCamera",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!81 &652250376",
                          "AudioListener:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 652250375}",
                          "m_Enabled: 1",
                          "--- !u!20 &652250377",
                          "Camera:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 652250375}",
                          "m_Enabled: 1",
                          "serializedVersion: 2",
                          "m_ClearFlags: 1",
                          "m_BackGroundColor: {r: 0.19215687, g: 0.3019608, b: 0.4745098, a: 0}",
                          "m_projectionMatrixMode: 1",
                          "m_GateFitMode: 2",
                          "m_FOVAxisMode: 0",
                          "m_SensorSize: {x: 36, y: 24}",
                          "m_LensShift: {x: 0, y: 0}",
                          "m_FocalLength: 50",
                          "m_NormalizedViewPortRect:",
                          "serializedVersion: 2",
                          "x: 0",
                          "y: 0",
                          "width: 1",
                          "height: 1",
                          "near clip plane: 0.3",
                          "far clip plane: 1000",
                          "field of view: 60",
                          "orthographic: 0",
                          "orthographic size: 5",
                          "m_Depth: -1",
                          "m_CullingMask:",
                          "serializedVersion: 2",
                          "m_Bits: 4294967295",
                          "m_RenderingPath: -1",
                          "m_TargetTexture: {fileID: 0}",
                          "m_TargetDisplay: 0",
                          "m_TargetEye: 3",
                          "m_HDR: 1",
                          "m_AllowMSAA: 1",
                          "m_AllowDynamicResolution: 0",
                          "m_ForceIntoRT: 0",
                          "m_OcclusionCulling: 1",
                          "m_StereoConvergence: 10",
                          "m_StereoSeparation: 0.022",
                          "--- !u!4 &652250378",
                          "Transform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 652250375}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 1, z: -10}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 0}",
                          "m_RootOrder: 0",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "--- !u!1 &725905470",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 725905471}",
                          "- component: {fileID: 725905473}",
                          "- component: {fileID: 725905472}",
                          "m_Layer: 5",
                          "m_Name: Tree",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!224 &725905471",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 725905470}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 895286102}",
                          "m_RootOrder: 7",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 0.5, y: 0.5}",
                          "m_AnchorMax: {x: 0.5, y: 0.5}",
                          "m_AnchoredPosition: {x: 0, y: 193}",
                          "m_SizeDelta: {x: 274.7514, y: 274.753}",
                          "m_Pivot: {x: 0.5, y: 0.5}",
                          "--- !u!114 &725905472",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 725905470}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: fe87c0e1cc204ed48ad3b37840f39efc, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_Material: {fileID: 0}",
                          "m_Color: {r: 1, g: 1, b: 1, a: 1}",
                          "m_RaycastTarget: 1",
                          "m_RaycastPadding: {x: 0, y: 0, z: 0, w: 0}",
                          "m_Maskable: 1",
                          "m_OnCullStateChanged:",
                          "m_PersistentCalls:",
                          "m_Calls: []",
                          "m_Sprite: {fileID: 21300000, guid: 0fbc895afb90b46aab630472c0d20ca7, type: 3}",
                          "m_Type: 0",
                          "m_PreserveAspect: 0",
                          "m_FillCenter: 1",
                          "m_FillMethod: 4",
                          "m_FillAmount: 1",
                          "m_FillClockwise: 1",
                          "m_FillOrigin: 0",
                          "m_UseSpriteMesh: 0",
                          "m_PixelsPerUnitMultiplier: 1",
                          "--- !u!222 &725905473",
                          "CanvasRenderer:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 725905470}",
                          "m_CullTransparentMesh: 1",
                          "--- !u!1 &734343832",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 734343833}",
                          "- component: {fileID: 734343834}",
                          "m_Layer: 5",
                          "m_Name: GameScreen",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!224 &734343833",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 734343832}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children:",
                          "- {fileID: 895286102}",
                          "- {fileID: 1648474101}",
                          "- {fileID: 1215065034387861979}",
                          "- {fileID: 279988558}",
                          "m_Father: {fileID: 361775995}",
                          "m_RootOrder: 1",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 0, y: 0}",
                          "m_AnchorMax: {x: 1, y: 1}",
                          "m_AnchoredPosition: {x: 0, y: 0}",
                          "m_SizeDelta: {x: 0, y: 0}",
                          "m_Pivot: {x: 0.5, y: 0.5}",
                          "--- !u!114 &734343834",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 734343832}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: d1ce5defdf314eb0b303658fa3c1f425, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "ChuckWoodSessionButton: {fileID: 455991734}",
                          "NftsButton: {fileID: 1207030472}",
                          "InitGameDataButton: {fileID: 491985597}",
                          "EnergyAmountText: {fileID: 1280851060}",
                          "WoodAmountText: {fileID: 2026945620}",
                          "NextEnergyInText: {fileID: 213723157}",
                          "TotalLogAvailableText: {fileID: 856746744}",
                          "NotInitializedRoot: {fileID: 1648474100}",
                          "InitializedRoot: {fileID: 895286101}",
                          "ActionFx: {fileID: 5819385565371132728, guid: f2e6a0e3392df424da6890df0b132ae0, type: 3}",
                          "ActionFxPosition: {fileID: 1076814521}",
                          "Tree: {fileID: 725905470}",
                          "--- !u!1 &744192316",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 744192317}",
                          "- component: {fileID: 744192319}",
                          "- component: {fileID: 744192318}",
                          "m_Layer: 5",
                          "m_Name: Publickey",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!224 &744192317",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 744192316}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 1648474101}",
                          "m_RootOrder: 0",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 0.5, y: 0.5}",
                          "m_AnchorMax: {x: 0.5, y: 0.5}",
                          "m_AnchoredPosition: {x: 0, y: -38.201}",
                          "m_SizeDelta: {x: 1080.549, y: 54.771}",
                          "m_Pivot: {x: 0.5, y: 0.5}",
                          "--- !u!114 &744192318",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 744192316}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: f4688fdb7df04437aeb418b961361dc5, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_Material: {fileID: 0}",
                          "m_Color: {r: 1, g: 1, b: 1, a: 1}",
                          "m_RaycastTarget: 1",
                          "m_RaycastPadding: {x: 0, y: 0, z: 0, w: 0}",
                          "m_Maskable: 1",
                          "m_OnCullStateChanged:",
                          "m_PersistentCalls:",
                          "m_Calls: []",
                          "m_text: 'PubKey: 222222222222222'",
                          "m_isRightToLeft: 0",
                          "m_fontAsset: {fileID: 11400000, guid: 8f586378b4e144a9851e7b34d9b748ee, type: 2}",
                          "m_sharedMaterial: {fileID: 2180264, guid: 8f586378b4e144a9851e7b34d9b748ee, type: 2}",
                          "m_fontSharedMaterials: []",
                          "m_fontMaterial: {fileID: 0}",
                          "m_fontMaterials: []",
                          "m_fontColor32:",
                          "serializedVersion: 2",
                          "rgba: 4294967295",
                          "m_fontColor: {r: 1, g: 1, b: 1, a: 1}",
                          "m_enableVertexGradient: 0",
                          "m_colorMode: 3",
                          "m_fontColorGradient:",
                          "topLeft: {r: 1, g: 1, b: 1, a: 1}",
                          "topRight: {r: 1, g: 1, b: 1, a: 1}",
                          "bottomLeft: {r: 1, g: 1, b: 1, a: 1}",
                          "bottomRight: {r: 1, g: 1, b: 1, a: 1}",
                          "m_fontColorGradientPreset: {fileID: 0}",
                          "m_spriteAsset: {fileID: 0}",
                          "m_tintAllSprites: 0",
                          "m_StyleSheet: {fileID: 0}",
                          "m_TextStyleHashCode: -1183493901",
                          "m_overrideHtmlColors: 0",
                          "m_faceColor:",
                          "serializedVersion: 2",
                          "rgba: 4294967295",
                          "m_fontSize: 36",
                          "m_fontSizeBase: 36",
                          "m_fontWeight: 400",
                          "m_enableAutoSizing: 0",
                          "m_fontSizeMin: 18",
                          "m_fontSizeMax: 72",
                          "m_fontStyle: 0",
                          "m_HorizontalAlignment: 2",
                          "m_VerticalAlignment: 512",
                          "m_textAlignment: 65535",
                          "m_characterSpacing: 0",
                          "m_wordSpacing: 0",
                          "m_lineSpacing: 0",
                          "m_lineSpacingMax: 0",
                          "m_paragraphSpacing: 0",
                          "m_charWidthMaxAdj: 0",
                          "m_enableWordWrapping: 1",
                          "m_wordWrappingRatios: 0.4",
                          "m_overflowMode: 0",
                          "m_linkedTextComponent: {fileID: 0}",
                          "parentLinkedComponent: {fileID: 0}",
                          "m_enableKerning: 1",
                          "m_enableExtraPadding: 0",
                          "checkPaddingRequired: 0",
                          "m_isRichText: 1",
                          "m_parseCtrlCharacters: 1",
                          "m_isOrthographic: 1",
                          "m_isCullingEnabled: 0",
                          "m_horizontalMapping: 0",
                          "m_verticalMapping: 0",
                          "m_uvLineOffset: 0",
                          "m_geometrySortingOrder: 0",
                          "m_IsTextObjectScaleStatic: 0",
                          "m_VertexBufferAutoSizeReduction: 0",
                          "m_useMaxVisibleDescender: 1",
                          "m_pageToDisplay: 1",
                          "m_margin: {x: 0, y: 0, z: 0, w: 0}",
                          "m_isUsingLegacyAnimationComponent: 0",
                          "m_isVolumetricText: 0",
                          "m_hasFontAssetChanged: 0",
                          "m_baseMaterial: {fileID: 0}",
                          "m_maskOffset: {x: 0, y: 0, z: 0, w: 0}",
                          "--- !u!222 &744192319",
                          "CanvasRenderer:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 744192316}",
                          "m_CullTransparentMesh: 1",
                          "--- !u!1 &796718307",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 796718308}",
                          "- component: {fileID: 796718310}",
                          "- component: {fileID: 796718309}",
                          "m_Layer: 5",
                          "m_Name: Text (TMP)",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!224 &796718308",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 796718307}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 15026961}",
                          "m_RootOrder: 1",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 0.5, y: 0.5}",
                          "m_AnchorMax: {x: 0.5, y: 0.5}",
                          "m_AnchoredPosition: {x: 0, y: -35}",
                          "m_SizeDelta: {x: 361.662, y: 50}",
                          "m_Pivot: {x: 0.5, y: 0.5}",
                          "--- !u!114 &796718309",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 796718307}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: f4688fdb7df04437aeb418b961361dc5, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_Material: {fileID: 0}",
                          "m_Color: {r: 1, g: 1, b: 1, a: 1}",
                          "m_RaycastTarget: 1",
                          "m_RaycastPadding: {x: 0, y: 0, z: 0, w: 0}",
                          "m_Maskable: 1",
                          "m_OnCullStateChanged:",
                          "m_PersistentCalls:",
                          "m_Calls: []",
                          "m_text: Connected",
                          "m_isRightToLeft: 0",
                          "m_fontAsset: {fileID: 11400000, guid: 8f586378b4e144a9851e7b34d9b748ee, type: 2}",
                          "m_sharedMaterial: {fileID: 2180264, guid: 8f586378b4e144a9851e7b34d9b748ee, type: 2}",
                          "m_fontSharedMaterials: []",
                          "m_fontMaterial: {fileID: 0}",
                          "m_fontMaterials: []",
                          "m_fontColor32:",
                          "serializedVersion: 2",
                          "rgba: 4294967295",
                          "m_fontColor: {r: 1, g: 1, b: 1, a: 1}",
                          "m_enableVertexGradient: 0",
                          "m_colorMode: 3",
                          "m_fontColorGradient:",
                          "topLeft: {r: 1, g: 1, b: 1, a: 1}",
                          "topRight: {r: 1, g: 1, b: 1, a: 1}",
                          "bottomLeft: {r: 1, g: 1, b: 1, a: 1}",
                          "bottomRight: {r: 1, g: 1, b: 1, a: 1}",
                          "m_fontColorGradientPreset: {fileID: 0}",
                          "m_spriteAsset: {fileID: 0}",
                          "m_tintAllSprites: 0",
                          "m_StyleSheet: {fileID: 0}",
                          "m_TextStyleHashCode: -1183493901",
                          "m_overrideHtmlColors: 0",
                          "m_faceColor:",
                          "serializedVersion: 2",
                          "rgba: 4294967295",
                          "m_fontSize: 36",
                          "m_fontSizeBase: 36",
                          "m_fontWeight: 400",
                          "m_enableAutoSizing: 0",
                          "m_fontSizeMin: 18",
                          "m_fontSizeMax: 72",
                          "m_fontStyle: 0",
                          "m_HorizontalAlignment: 2",
                          "m_VerticalAlignment: 512",
                          "m_textAlignment: 65535",
                          "m_characterSpacing: 0",
                          "m_wordSpacing: 0",
                          "m_lineSpacing: 0",
                          "m_lineSpacingMax: 0",
                          "m_paragraphSpacing: 0",
                          "m_charWidthMaxAdj: 0",
                          "m_enableWordWrapping: 1",
                          "m_wordWrappingRatios: 0.4",
                          "m_overflowMode: 0",
                          "m_linkedTextComponent: {fileID: 0}",
                          "parentLinkedComponent: {fileID: 0}",
                          "m_enableKerning: 1",
                          "m_enableExtraPadding: 0",
                          "checkPaddingRequired: 0",
                          "m_isRichText: 1",
                          "m_parseCtrlCharacters: 1",
                          "m_isOrthographic: 1",
                          "m_isCullingEnabled: 0",
                          "m_horizontalMapping: 0",
                          "m_verticalMapping: 0",
                          "m_uvLineOffset: 0",
                          "m_geometrySortingOrder: 0",
                          "m_IsTextObjectScaleStatic: 0",
                          "m_VertexBufferAutoSizeReduction: 0",
                          "m_useMaxVisibleDescender: 1",
                          "m_pageToDisplay: 1",
                          "m_margin: {x: 0, y: 0, z: 0, w: 0}",
                          "m_isUsingLegacyAnimationComponent: 0",
                          "m_isVolumetricText: 0",
                          "m_hasFontAssetChanged: 0",
                          "m_baseMaterial: {fileID: 0}",
                          "m_maskOffset: {x: 0, y: 0, z: 0, w: 0}",
                          "--- !u!222 &796718310",
                          "CanvasRenderer:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 796718307}",
                          "m_CullTransparentMesh: 1",
                          "--- !u!224 &849951519 stripped",
                          "RectTransform:",
                          "m_CorrespondingSourceObject: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "m_PrefabInstance: {fileID: 1995997379}",
                          "m_PrefabAsset: {fileID: 0}",
                          "--- !u!114 &849951520 stripped",
                          "MonoBehaviour:",
                          "m_CorrespondingSourceObject: {fileID: 4543230662569328023, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "m_PrefabInstance: {fileID: 1995997379}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 0}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: 4e29b1a8efbd4b44bb3f3716e73f07ff, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "--- !u!1 &856746742",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 856746743}",
                          "- component: {fileID: 856746745}",
                          "- component: {fileID: 856746744}",
                          "m_Layer: 5",
                          "m_Name: TotalWoodText",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!224 &856746743",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 856746742}",
                          "m_LocalRotation: {x: -0, y: -0, z: -0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 895286102}",
                          "m_RootOrder: 6",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 0.5, y: 0.5}",
                          "m_AnchorMax: {x: 0.5, y: 0.5}",
                          "m_AnchoredPosition: {x: 0, y: 60}",
                          "m_SizeDelta: {x: 419, y: 29.526611}",
                          "m_Pivot: {x: 0.5, y: 0.5}",
                          "--- !u!114 &856746744",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 856746742}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: f4688fdb7df04437aeb418b961361dc5, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_Material: {fileID: 0}",
                          "m_Color: {r: 1, g: 1, b: 1, a: 1}",
                          "m_RaycastTarget: 1",
                          "m_RaycastPadding: {x: 0, y: 0, z: 0, w: 0}",
                          "m_Maskable: 1",
                          "m_OnCullStateChanged:",
                          "m_PersistentCalls:",
                          "m_Calls: []",
                          "m_text:",
                          "m_isRightToLeft: 0",
                          "m_fontAsset: {fileID: 11400000, guid: 8f586378b4e144a9851e7b34d9b748ee, type: 2}",
                          "m_sharedMaterial: {fileID: 2180264, guid: 8f586378b4e144a9851e7b34d9b748ee, type: 2}",
                          "m_fontSharedMaterials: []",
                          "m_fontMaterial: {fileID: 0}",
                          "m_fontMaterials: []",
                          "m_fontColor32:",
                          "serializedVersion: 2",
                          "rgba: 4294967295",
                          "m_fontColor: {r: 1, g: 1, b: 1, a: 1}",
                          "m_enableVertexGradient: 0",
                          "m_colorMode: 3",
                          "m_fontColorGradient:",
                          "topLeft: {r: 1, g: 1, b: 1, a: 1}",
                          "topRight: {r: 1, g: 1, b: 1, a: 1}",
                          "bottomLeft: {r: 1, g: 1, b: 1, a: 1}",
                          "bottomRight: {r: 1, g: 1, b: 1, a: 1}",
                          "m_fontColorGradientPreset: {fileID: 0}",
                          "m_spriteAsset: {fileID: 0}",
                          "m_tintAllSprites: 0",
                          "m_StyleSheet: {fileID: 0}",
                          "m_TextStyleHashCode: -1183493901",
                          "m_overrideHtmlColors: 0",
                          "m_faceColor:",
                          "serializedVersion: 2",
                          "rgba: 4294967295",
                          "m_fontSize: 26.05",
                          "m_fontSizeBase: 26.05",
                          "m_fontWeight: 400",
                          "m_enableAutoSizing: 0",
                          "m_fontSizeMin: 18",
                          "m_fontSizeMax: 72",
                          "m_fontStyle: 0",
                          "m_HorizontalAlignment: 2",
                          "m_VerticalAlignment: 256",
                          "m_textAlignment: 65535",
                          "m_characterSpacing: 0",
                          "m_wordSpacing: 0",
                          "m_lineSpacing: 0",
                          "m_lineSpacingMax: 0",
                          "m_paragraphSpacing: 0",
                          "m_charWidthMaxAdj: 0",
                          "m_enableWordWrapping: 1",
                          "m_wordWrappingRatios: 0.4",
                          "m_overflowMode: 0",
                          "m_linkedTextComponent: {fileID: 0}",
                          "parentLinkedComponent: {fileID: 0}",
                          "m_enableKerning: 1",
                          "m_enableExtraPadding: 0",
                          "checkPaddingRequired: 0",
                          "m_isRichText: 1",
                          "m_parseCtrlCharacters: 1",
                          "m_isOrthographic: 1",
                          "m_isCullingEnabled: 0",
                          "m_horizontalMapping: 0",
                          "m_verticalMapping: 0",
                          "m_uvLineOffset: 0",
                          "m_geometrySortingOrder: 0",
                          "m_IsTextObjectScaleStatic: 0",
                          "m_VertexBufferAutoSizeReduction: 0",
                          "m_useMaxVisibleDescender: 1",
                          "m_pageToDisplay: 1",
                          "m_margin: {x: 0, y: 0, z: 0, w: 0}",
                          "m_isUsingLegacyAnimationComponent: 0",
                          "m_isVolumetricText: 0",
                          "m_hasFontAssetChanged: 0",
                          "m_baseMaterial: {fileID: 0}",
                          "m_maskOffset: {x: 0, y: 0, z: 0, w: 0}",
                          "--- !u!222 &856746745",
                          "CanvasRenderer:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 856746742}",
                          "m_CullTransparentMesh: 1",
                          "--- !u!1 &895286101",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 895286102}",
                          "m_Layer: 5",
                          "m_Name: InitializedRoot",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!224 &895286102",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 895286101}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children:",
                          "- {fileID: 455991737}",
                          "- {fileID: 1207030471}",
                          "- {fileID: 1265213257}",
                          "- {fileID: 505201859}",
                          "- {fileID: 213723159}",
                          "- {fileID: 327582529}",
                          "- {fileID: 856746743}",
                          "- {fileID: 725905471}",
                          "- {fileID: 1076814523}",
                          "- {fileID: 15026961}",
                          "m_Father: {fileID: 734343833}",
                          "m_RootOrder: 0",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 0, y: 0}",
                          "m_AnchorMax: {x: 1, y: 1}",
                          "m_AnchoredPosition: {x: 0, y: 0}",
                          "m_SizeDelta: {x: 0, y: 0}",
                          "m_Pivot: {x: 0.5, y: 0.5}",
                          "--- !u!1 &1076814521",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 1076814523}",
                          "- component: {fileID: 1076814522}",
                          "m_Layer: 5",
                          "m_Name: FxPosition",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!222 &1076814522",
                          "CanvasRenderer:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 1076814521}",
                          "m_CullTransparentMesh: 1",
                          "--- !u!224 &1076814523",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 1076814521}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: -180}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 895286102}",
                          "m_RootOrder: 8",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 0.5, y: 0.5}",
                          "m_AnchorMax: {x: 0.5, y: 0.5}",
                          "m_AnchoredPosition: {x: 5, y: 95}",
                          "m_SizeDelta: {x: 43.308, y: 43.308}",
                          "m_Pivot: {x: 0.5, y: 0.5}",
                          "--- !u!224 &1207030471 stripped",
                          "RectTransform:",
                          "m_CorrespondingSourceObject: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "m_PrefabInstance: {fileID: 1915280246}",
                          "m_PrefabAsset: {fileID: 0}",
                          "--- !u!114 &1207030472 stripped",
                          "MonoBehaviour:",
                          "m_CorrespondingSourceObject: {fileID: 4543230662569328023, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "m_PrefabInstance: {fileID: 1915280246}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 0}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: 4e29b1a8efbd4b44bb3f3716e73f07ff, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "--- !u!1 &1265213256",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 1265213257}",
                          "- component: {fileID: 1265213259}",
                          "- component: {fileID: 1265213258}",
                          "m_Layer: 5",
                          "m_Name: EnergyCount",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!224 &1265213257",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 1265213256}",
                          "m_LocalRotation: {x: -0, y: -0, z: -0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children:",
                          "- {fileID: 1280851062}",
                          "m_Father: {fileID: 895286102}",
                          "m_RootOrder: 2",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 1, y: 1}",
                          "m_AnchorMax: {x: 1, y: 1}",
                          "m_AnchoredPosition: {x: -6, y: -144.5}",
                          "m_SizeDelta: {x: 28.429596, y: 28.429596}",
                          "m_Pivot: {x: 1, y: 1}",
                          "--- !u!114 &1265213258",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 1265213256}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: fe87c0e1cc204ed48ad3b37840f39efc, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_Material: {fileID: 0}",
                          "m_Color: {r: 1, g: 1, b: 1, a: 1}",
                          "m_RaycastTarget: 1",
                          "m_RaycastPadding: {x: 0, y: 0, z: 0, w: 0}",
                          "m_Maskable: 1",
                          "m_OnCullStateChanged:",
                          "m_PersistentCalls:",
                          "m_Calls: []",
                          "m_Sprite: {fileID: 21300000, guid: 9c8ed927acedb446ca8c86e896384617, type: 3}",
                          "m_Type: 0",
                          "m_PreserveAspect: 0",
                          "m_FillCenter: 1",
                          "m_FillMethod: 4",
                          "m_FillAmount: 1",
                          "m_FillClockwise: 1",
                          "m_FillOrigin: 0",
                          "m_UseSpriteMesh: 0",
                          "m_PixelsPerUnitMultiplier: 1",
                          "--- !u!222 &1265213259",
                          "CanvasRenderer:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 1265213256}",
                          "m_CullTransparentMesh: 1",
                          "--- !u!1 &1280851059",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 1280851062}",
                          "- component: {fileID: 1280851061}",
                          "- component: {fileID: 1280851060}",
                          "m_Layer: 5",
                          "m_Name: EnergyTextCount",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!114 &1280851060",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 1280851059}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: f4688fdb7df04437aeb418b961361dc5, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_Material: {fileID: 0}",
                          "m_Color: {r: 1, g: 1, b: 1, a: 1}",
                          "m_RaycastTarget: 1",
                          "m_RaycastPadding: {x: 0, y: 0, z: 0, w: 0}",
                          "m_Maskable: 1",
                          "m_OnCullStateChanged:",
                          "m_PersistentCalls:",
                          "m_Calls: []",
                          "m_text: 0",
                          "m_isRightToLeft: 0",
                          "m_fontAsset: {fileID: 11400000, guid: 8f586378b4e144a9851e7b34d9b748ee, type: 2}",
                          "m_sharedMaterial: {fileID: 2180264, guid: 8f586378b4e144a9851e7b34d9b748ee, type: 2}",
                          "m_fontSharedMaterials: []",
                          "m_fontMaterial: {fileID: 0}",
                          "m_fontMaterials: []",
                          "m_fontColor32:",
                          "serializedVersion: 2",
                          "rgba: 4294967295",
                          "m_fontColor: {r: 1, g: 1, b: 1, a: 1}",
                          "m_enableVertexGradient: 0",
                          "m_colorMode: 3",
                          "m_fontColorGradient:",
                          "topLeft: {r: 1, g: 1, b: 1, a: 1}",
                          "topRight: {r: 1, g: 1, b: 1, a: 1}",
                          "bottomLeft: {r: 1, g: 1, b: 1, a: 1}",
                          "bottomRight: {r: 1, g: 1, b: 1, a: 1}",
                          "m_fontColorGradientPreset: {fileID: 0}",
                          "m_spriteAsset: {fileID: 0}",
                          "m_tintAllSprites: 0",
                          "m_StyleSheet: {fileID: 0}",
                          "m_TextStyleHashCode: -1183493901",
                          "m_overrideHtmlColors: 0",
                          "m_faceColor:",
                          "serializedVersion: 2",
                          "rgba: 4294967295",
                          "m_fontSize: 36",
                          "m_fontSizeBase: 36",
                          "m_fontWeight: 400",
                          "m_enableAutoSizing: 0",
                          "m_fontSizeMin: 18",
                          "m_fontSizeMax: 72",
                          "m_fontStyle: 0",
                          "m_HorizontalAlignment: 4",
                          "m_VerticalAlignment: 512",
                          "m_textAlignment: 65535",
                          "m_characterSpacing: 0",
                          "m_wordSpacing: 0",
                          "m_lineSpacing: 0",
                          "m_lineSpacingMax: 0",
                          "m_paragraphSpacing: 0",
                          "m_charWidthMaxAdj: 0",
                          "m_enableWordWrapping: 1",
                          "m_wordWrappingRatios: 0.4",
                          "m_overflowMode: 0",
                          "m_linkedTextComponent: {fileID: 0}",
                          "parentLinkedComponent: {fileID: 0}",
                          "m_enableKerning: 1",
                          "m_enableExtraPadding: 0",
                          "checkPaddingRequired: 0",
                          "m_isRichText: 1",
                          "m_parseCtrlCharacters: 1",
                          "m_isOrthographic: 1",
                          "m_isCullingEnabled: 0",
                          "m_horizontalMapping: 0",
                          "m_verticalMapping: 0",
                          "m_uvLineOffset: 0",
                          "m_geometrySortingOrder: 0",
                          "m_IsTextObjectScaleStatic: 0",
                          "m_VertexBufferAutoSizeReduction: 0",
                          "m_useMaxVisibleDescender: 1",
                          "m_pageToDisplay: 1",
                          "m_margin: {x: 0, y: 0, z: 0, w: 0}",
                          "m_isUsingLegacyAnimationComponent: 0",
                          "m_isVolumetricText: 0",
                          "m_hasFontAssetChanged: 0",
                          "m_baseMaterial: {fileID: 0}",
                          "m_maskOffset: {x: 0, y: 0, z: 0, w: 0}",
                          "--- !u!222 &1280851061",
                          "CanvasRenderer:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 1280851059}",
                          "m_CullTransparentMesh: 1",
                          "--- !u!224 &1280851062",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 1280851059}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 1265213257}",
                          "m_RootOrder: 0",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 0.5, y: 0.5}",
                          "m_AnchorMax: {x: 0.5, y: 0.5}",
                          "m_AnchoredPosition: {x: -121.59999, y: 0}",
                          "m_SizeDelta: {x: 200, y: 50}",
                          "m_Pivot: {x: 0.5, y: 0.5}",
                          "--- !u!1 &1337673074",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 1337673075}",
                          "- component: {fileID: 1337673077}",
                          "- component: {fileID: 1337673076}",
                          "m_Layer: 5",
                          "m_Name: Text (TMP)",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!224 &1337673075",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 1337673074}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 455991737}",
                          "m_RootOrder: 0",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 0, y: 0}",
                          "m_AnchorMax: {x: 1, y: 1}",
                          "m_AnchoredPosition: {x: 0, y: -50.000004}",
                          "m_SizeDelta: {x: 0, y: 0}",
                          "m_Pivot: {x: 0.5, y: 0.5}",
                          "--- !u!114 &1337673076",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 1337673074}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: f4688fdb7df04437aeb418b961361dc5, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_Material: {fileID: 0}",
                          "m_Color: {r: 1, g: 1, b: 1, a: 1}",
                          "m_RaycastTarget: 1",
                          "m_RaycastPadding: {x: 0, y: 0, z: 0, w: 0}",
                          "m_Maskable: 1",
                          "m_OnCullStateChanged:",
                          "m_PersistentCalls:",
                          "m_Calls: []",
                          "m_text: 'Chop Tree",
                          "'",
                          "m_isRightToLeft: 0",
                          "m_fontAsset: {fileID: 11400000, guid: 8f586378b4e144a9851e7b34d9b748ee, type: 2}",
                          "m_sharedMaterial: {fileID: 2180264, guid: 8f586378b4e144a9851e7b34d9b748ee, type: 2}",
                          "m_fontSharedMaterials: []",
                          "m_fontMaterial: {fileID: 0}",
                          "m_fontMaterials: []",
                          "m_fontColor32:",
                          "serializedVersion: 2",
                          "rgba: 4294967295",
                          "m_fontColor: {r: 1, g: 1, b: 1, a: 1}",
                          "m_enableVertexGradient: 0",
                          "m_colorMode: 3",
                          "m_fontColorGradient:",
                          "topLeft: {r: 1, g: 1, b: 1, a: 1}",
                          "topRight: {r: 1, g: 1, b: 1, a: 1}",
                          "bottomLeft: {r: 1, g: 1, b: 1, a: 1}",
                          "bottomRight: {r: 1, g: 1, b: 1, a: 1}",
                          "m_fontColorGradientPreset: {fileID: 0}",
                          "m_spriteAsset: {fileID: 0}",
                          "m_tintAllSprites: 0",
                          "m_StyleSheet: {fileID: 0}",
                          "m_TextStyleHashCode: -1183493901",
                          "m_overrideHtmlColors: 0",
                          "m_faceColor:",
                          "serializedVersion: 2",
                          "rgba: 4294967295",
                          "m_fontSize: 24",
                          "m_fontSizeBase: 24",
                          "m_fontWeight: 400",
                          "m_enableAutoSizing: 0",
                          "m_fontSizeMin: 18",
                          "m_fontSizeMax: 72",
                          "m_fontStyle: 0",
                          "m_HorizontalAlignment: 2",
                          "m_VerticalAlignment: 512",
                          "m_textAlignment: 65535",
                          "m_characterSpacing: 0",
                          "m_wordSpacing: 0",
                          "m_lineSpacing: 0",
                          "m_lineSpacingMax: 0",
                          "m_paragraphSpacing: 0",
                          "m_charWidthMaxAdj: 0",
                          "m_enableWordWrapping: 1",
                          "m_wordWrappingRatios: 0.4",
                          "m_overflowMode: 0",
                          "m_linkedTextComponent: {fileID: 0}",
                          "parentLinkedComponent: {fileID: 0}",
                          "m_enableKerning: 1",
                          "m_enableExtraPadding: 0",
                          "checkPaddingRequired: 0",
                          "m_isRichText: 1",
                          "m_parseCtrlCharacters: 1",
                          "m_isOrthographic: 1",
                          "m_isCullingEnabled: 0",
                          "m_horizontalMapping: 0",
                          "m_verticalMapping: 0",
                          "m_uvLineOffset: 0",
                          "m_geometrySortingOrder: 0",
                          "m_IsTextObjectScaleStatic: 0",
                          "m_VertexBufferAutoSizeReduction: 0",
                          "m_useMaxVisibleDescender: 1",
                          "m_pageToDisplay: 1",
                          "m_margin: {x: 0, y: 0, z: 0, w: 0}",
                          "m_isUsingLegacyAnimationComponent: 0",
                          "m_isVolumetricText: 0",
                          "m_hasFontAssetChanged: 0",
                          "m_baseMaterial: {fileID: 0}",
                          "m_maskOffset: {x: 0, y: 0, z: 0, w: 0}",
                          "--- !u!222 &1337673077",
                          "CanvasRenderer:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 1337673074}",
                          "m_CullTransparentMesh: 1",
                          "--- !u!1 &1594189845",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 1594189847}",
                          "- component: {fileID: 1594189846}",
                          "m_Layer: 0",
                          "m_Name: Directional Light",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!108 &1594189846",
                          "Light:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 1594189845}",
                          "m_Enabled: 1",
                          "serializedVersion: 10",
                          "m_Type: 1",
                          "m_Shape: 0",
                          "m_Color: {r: 1, g: 0.95686275, b: 0.8392157, a: 1}",
                          "m_Intensity: 1",
                          "m_Range: 10",
                          "m_SpotAngle: 30",
                          "m_InnerSpotAngle: 21.80208",
                          "m_CookieSize: 10",
                          "m_Shadows:",
                          "m_Type: 2",
                          "m_Resolution: -1",
                          "m_CustomResolution: -1",
                          "m_Strength: 1",
                          "m_Bias: 0.05",
                          "m_NormalBias: 0.4",
                          "m_NearPlane: 0.2",
                          "m_CullingMatrixOverride:",
                          "e00: 1",
                          "e01: 0",
                          "e02: 0",
                          "e03: 0",
                          "e10: 0",
                          "e11: 1",
                          "e12: 0",
                          "e13: 0",
                          "e20: 0",
                          "e21: 0",
                          "e22: 1",
                          "e23: 0",
                          "e30: 0",
                          "e31: 0",
                          "e32: 0",
                          "e33: 1",
                          "m_UseCullingMatrixOverride: 0",
                          "m_Cookie: {fileID: 0}",
                          "m_DrawHalo: 0",
                          "m_Flare: {fileID: 0}",
                          "m_RenderMode: 0",
                          "m_CullingMask:",
                          "serializedVersion: 2",
                          "m_Bits: 4294967295",
                          "m_RenderingLayerMask: 1",
                          "m_Lightmapping: 4",
                          "m_LightShadowCasterMode: 0",
                          "m_AreaSize: {x: 1, y: 1}",
                          "m_BounceIntensity: 1",
                          "m_ColorTemperature: 6570",
                          "m_UseColorTemperature: 0",
                          "m_BoundingSphereOverride: {x: 0, y: 0, z: 0, w: 0}",
                          "m_UseBoundingSphereOverride: 0",
                          "m_UseViewFrustumForShadowCasterCull: 1",
                          "m_ShadowRadius: 0",
                          "m_ShadowAngle: 0",
                          "--- !u!4 &1594189847",
                          "Transform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 1594189845}",
                          "m_LocalRotation: {x: 0.40821788, y: -0.23456968, z: 0.10938163, w: 0.8754261}",
                          "m_LocalPosition: {x: 0, y: 3, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 0}",
                          "m_RootOrder: 1",
                          "m_LocalEulerAnglesHint: {x: 50, y: -30, z: 0}",
                          "--- !u!224 &1620928785 stripped",
                          "RectTransform:",
                          "m_CorrespondingSourceObject: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "m_PrefabInstance: {fileID: 120311847}",
                          "m_PrefabAsset: {fileID: 0}",
                          "--- !u!1 &1648474100",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 1648474101}",
                          "m_Layer: 5",
                          "m_Name: NotInitializedRoot",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 0",
                          "--- !u!224 &1648474101",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 1648474100}",
                          "m_LocalRotation: {x: -0, y: -0, z: -0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children:",
                          "- {fileID: 744192317}",
                          "- {fileID: 395139615}",
                          "m_Father: {fileID: 734343833}",
                          "m_RootOrder: 1",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 0, y: 0}",
                          "m_AnchorMax: {x: 1, y: 1}",
                          "m_AnchoredPosition: {x: 0, y: 0}",
                          "m_SizeDelta: {x: 0, y: 0}",
                          "m_Pivot: {x: 0.5, y: 0.5}",
                          "--- !u!1001 &1915280246",
                          "PrefabInstance:",
                          "m_ObjectHideFlags: 0",
                          "serializedVersion: 2",
                          "m_Modification:",
                          "m_TransformParent: {fileID: 895286102}",
                          "m_Modifications:",
                          "- target: {fileID: 4543230662287133981, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_text",
                          "value: 'Nfts",
                          "'",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662287133981, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_fontSize",
                          "value: 22.8",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_Pivot.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_Pivot.y",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_RootOrder",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMax.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMax.y",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMin.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMin.y",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_SizeDelta.x",
                          "value: 89.9495",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_SizeDelta.y",
                          "value: 49.376",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalPosition.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalPosition.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.w",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.x",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.y",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.z",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchoredPosition.x",
                          "value: 10",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchoredPosition.y",
                          "value: -12",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328021, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_Name",
                          "value: NftsButton",
                          "objectReference: {fileID: 0}",
                          "m_RemovedComponents: []",
                          "m_SourcePrefab: {fileID: 100100000, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "--- !u!1001 &1957529229",
                          "PrefabInstance:",
                          "m_ObjectHideFlags: 0",
                          "serializedVersion: 2",
                          "m_Modification:",
                          "m_TransformParent: {fileID: 327582529}",
                          "m_Modifications:",
                          "- target: {fileID: 415523156119037907, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_Name",
                          "value: NftItemView",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 1493499295021181564, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchorMax.x",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 1493499295021181564, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchorMax.y",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 1493499295021181564, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchorMin.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 1493499295021181564, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchorMin.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 1493499295021181564, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_SizeDelta.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 1493499295021181564, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_SizeDelta.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 1493499295021181564, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchoredPosition.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 1829557217775940697, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchorMax.x",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 1829557217775940697, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchorMax.y",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 1829557217775940697, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchorMin.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 1829557217775940697, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchorMin.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 1829557217775940697, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_SizeDelta.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 1829557217775940697, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_SizeDelta.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 1829557217775940697, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchoredPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_Pivot.x",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_Pivot.y",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_RootOrder",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchorMax.x",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchorMax.y",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchorMin.x",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchorMin.y",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_SizeDelta.x",
                          "value: 46.7678",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_SizeDelta.y",
                          "value: 46.906097",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_LocalPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_LocalPosition.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_LocalPosition.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_LocalRotation.w",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_LocalRotation.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_LocalRotation.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_LocalRotation.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchoredPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchoredPosition.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 3594398769220831853, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_PreserveAspect",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7672187865763580141, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_IsActive",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8241538192372364119, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchorMax.x",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8241538192372364119, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchorMax.y",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8241538192372364119, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchorMin.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8241538192372364119, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchorMin.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8241538192372364119, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_SizeDelta.x",
                          "value: -31.77",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8241538192372364119, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_SizeDelta.y",
                          "value: -27.8245",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8241538192372364119, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "propertyPath: m_AnchoredPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "m_RemovedComponents: []",
                          "m_SourcePrefab: {fileID: 100100000, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "--- !u!224 &1957529230 stripped",
                          "RectTransform:",
                          "m_CorrespondingSourceObject: {fileID: 3223544420668776170, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "m_PrefabInstance: {fileID: 1957529229}",
                          "m_PrefabAsset: {fileID: 0}",
                          "--- !u!114 &1957529231 stripped",
                          "MonoBehaviour:",
                          "m_CorrespondingSourceObject: {fileID: 910753438568561636, guid: 5038eeda347fc47caa6a0b71b70ee381, type: 3}",
                          "m_PrefabInstance: {fileID: 1957529229}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 0}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: 4c804afde22164dbf8f244573e9ac776, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "--- !u!1001 &1995997379",
                          "PrefabInstance:",
                          "m_ObjectHideFlags: 0",
                          "serializedVersion: 2",
                          "m_Modification:",
                          "m_TransformParent: {fileID: 15026961}",
                          "m_Modifications:",
                          "- target: {fileID: 4543230662287133970, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_SizeDelta.x",
                          "value: -45.1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662287133981, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_text",
                          "value: Reconnect Socket",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662287133981, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_fontSize",
                          "value: 21.3",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_Pivot.x",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_Pivot.y",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_RootOrder",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMax.x",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMax.y",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMin.x",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMin.y",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalPosition.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalPosition.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.w",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.x",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.y",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.z",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchoredPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchoredPosition.y",
                          "value: 17",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328021, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_Name",
                          "value: DefaultButton",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328021, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_IsActive",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "m_RemovedComponents: []",
                          "m_SourcePrefab: {fileID: 100100000, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "--- !u!1 &2026945619",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 2026945622}",
                          "- component: {fileID: 2026945621}",
                          "- component: {fileID: 2026945620}",
                          "m_Layer: 5",
                          "m_Name: WoodCountText",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!114 &2026945620",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 2026945619}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: f4688fdb7df04437aeb418b961361dc5, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_Material: {fileID: 0}",
                          "m_Color: {r: 1, g: 1, b: 1, a: 1}",
                          "m_RaycastTarget: 1",
                          "m_RaycastPadding: {x: 0, y: 0, z: 0, w: 0}",
                          "m_Maskable: 1",
                          "m_OnCullStateChanged:",
                          "m_PersistentCalls:",
                          "m_Calls: []",
                          "m_text: 0",
                          "m_isRightToLeft: 0",
                          "m_fontAsset: {fileID: 11400000, guid: 8f586378b4e144a9851e7b34d9b748ee, type: 2}",
                          "m_sharedMaterial: {fileID: 2180264, guid: 8f586378b4e144a9851e7b34d9b748ee, type: 2}",
                          "m_fontSharedMaterials: []",
                          "m_fontMaterial: {fileID: 0}",
                          "m_fontMaterials: []",
                          "m_fontColor32:",
                          "serializedVersion: 2",
                          "rgba: 4294967295",
                          "m_fontColor: {r: 1, g: 1, b: 1, a: 1}",
                          "m_enableVertexGradient: 0",
                          "m_colorMode: 3",
                          "m_fontColorGradient:",
                          "topLeft: {r: 1, g: 1, b: 1, a: 1}",
                          "topRight: {r: 1, g: 1, b: 1, a: 1}",
                          "bottomLeft: {r: 1, g: 1, b: 1, a: 1}",
                          "bottomRight: {r: 1, g: 1, b: 1, a: 1}",
                          "m_fontColorGradientPreset: {fileID: 0}",
                          "m_spriteAsset: {fileID: 0}",
                          "m_tintAllSprites: 0",
                          "m_StyleSheet: {fileID: 0}",
                          "m_TextStyleHashCode: -1183493901",
                          "m_overrideHtmlColors: 0",
                          "m_faceColor:",
                          "serializedVersion: 2",
                          "rgba: 4294967295",
                          "m_fontSize: 36",
                          "m_fontSizeBase: 36",
                          "m_fontWeight: 400",
                          "m_enableAutoSizing: 0",
                          "m_fontSizeMin: 18",
                          "m_fontSizeMax: 72",
                          "m_fontStyle: 0",
                          "m_HorizontalAlignment: 4",
                          "m_VerticalAlignment: 512",
                          "m_textAlignment: 65535",
                          "m_characterSpacing: 0",
                          "m_wordSpacing: 0",
                          "m_lineSpacing: 0",
                          "m_lineSpacingMax: 0",
                          "m_paragraphSpacing: 0",
                          "m_charWidthMaxAdj: 0",
                          "m_enableWordWrapping: 1",
                          "m_wordWrappingRatios: 0.4",
                          "m_overflowMode: 0",
                          "m_linkedTextComponent: {fileID: 0}",
                          "parentLinkedComponent: {fileID: 0}",
                          "m_enableKerning: 1",
                          "m_enableExtraPadding: 0",
                          "checkPaddingRequired: 0",
                          "m_isRichText: 1",
                          "m_parseCtrlCharacters: 1",
                          "m_isOrthographic: 1",
                          "m_isCullingEnabled: 0",
                          "m_horizontalMapping: 0",
                          "m_verticalMapping: 0",
                          "m_uvLineOffset: 0",
                          "m_geometrySortingOrder: 0",
                          "m_IsTextObjectScaleStatic: 0",
                          "m_VertexBufferAutoSizeReduction: 0",
                          "m_useMaxVisibleDescender: 1",
                          "m_pageToDisplay: 1",
                          "m_margin: {x: 0, y: 0, z: 0, w: 0}",
                          "m_isUsingLegacyAnimationComponent: 0",
                          "m_isVolumetricText: 0",
                          "m_hasFontAssetChanged: 0",
                          "m_baseMaterial: {fileID: 0}",
                          "m_maskOffset: {x: 0, y: 0, z: 0, w: 0}",
                          "--- !u!222 &2026945621",
                          "CanvasRenderer:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 2026945619}",
                          "m_CullTransparentMesh: 1",
                          "--- !u!224 &2026945622",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 2026945619}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 505201859}",
                          "m_RootOrder: 0",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 0.5, y: 0.5}",
                          "m_AnchorMax: {x: 0.5, y: 0.5}",
                          "m_AnchoredPosition: {x: -121.90001, y: 0}",
                          "m_SizeDelta: {x: 200, y: 50}",
                          "m_Pivot: {x: 0.5, y: 0.5}",
                          "--- !u!1 &2044713757",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 2044713760}",
                          "- component: {fileID: 2044713759}",
                          "m_Layer: 0",
                          "m_Name: UiCamera",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!20 &2044713759",
                          "Camera:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 2044713757}",
                          "m_Enabled: 1",
                          "serializedVersion: 2",
                          "m_ClearFlags: 1",
                          "m_BackGroundColor: {r: 0.19215687, g: 0.3019608, b: 0.4745098, a: 0}",
                          "m_projectionMatrixMode: 1",
                          "m_GateFitMode: 2",
                          "m_FOVAxisMode: 0",
                          "m_SensorSize: {x: 36, y: 24}",
                          "m_LensShift: {x: 0, y: 0}",
                          "m_FocalLength: 50",
                          "m_NormalizedViewPortRect:",
                          "serializedVersion: 2",
                          "x: 0",
                          "y: 0",
                          "width: 1",
                          "height: 1",
                          "near clip plane: 0.3",
                          "far clip plane: 1000",
                          "field of view: 60",
                          "orthographic: 0",
                          "orthographic size: 5",
                          "m_Depth: 0",
                          "m_CullingMask:",
                          "serializedVersion: 2",
                          "m_Bits: 4294967295",
                          "m_RenderingPath: -1",
                          "m_TargetTexture: {fileID: 0}",
                          "m_TargetDisplay: 0",
                          "m_TargetEye: 3",
                          "m_HDR: 1",
                          "m_AllowMSAA: 1",
                          "m_AllowDynamicResolution: 0",
                          "m_ForceIntoRT: 0",
                          "m_OcclusionCulling: 1",
                          "m_StereoConvergence: 10",
                          "m_StereoSeparation: 0.022",
                          "--- !u!4 &2044713760",
                          "Transform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 2044713757}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 404.80722, y: 442.85068, z: 6.672183}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 0}",
                          "m_RootOrder: 2",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "--- !u!1001 &1215065034387861978",
                          "PrefabInstance:",
                          "m_ObjectHideFlags: 0",
                          "serializedVersion: 2",
                          "m_Modification:",
                          "m_TransformParent: {fileID: 734343833}",
                          "m_Modifications:",
                          "- target: {fileID: 1274442948750222487, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_SizeDelta.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 1274442948750222487, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_AnchoredPosition.x",
                          "value: -48",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 1274442948750222487, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_AnchoredPosition.y",
                          "value: 0.000061035156",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 5385680881672711665, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_fontSize",
                          "value: 38.9",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_Pivot.x",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_Pivot.y",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_RootOrder",
                          "value: 2",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_AnchorMax.x",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_AnchorMax.y",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_AnchorMin.x",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_AnchorMin.y",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_SizeDelta.x",
                          "value: 500",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_SizeDelta.y",
                          "value: 43.483612",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_LocalPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_LocalPosition.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_LocalPosition.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_LocalRotation.w",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_LocalRotation.x",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_LocalRotation.y",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_LocalRotation.z",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_AnchoredPosition.x",
                          "value: -259",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_AnchoredPosition.y",
                          "value: -7",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359611, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_Name",
                          "value: SolBalanceWidget",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992220359613, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: PublicKey",
                          "value:",
                          "objectReference: {fileID: 744192318}",
                          "- target: {fileID: 7768150992304558030, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_AnchorMax.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992304558030, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_AnchorMin.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992304558030, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_SizeDelta.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992304558030, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_SizeDelta.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992304558030, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_AnchoredPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992304558030, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_AnchoredPosition.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150992304558032, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_fontSize",
                          "value: 38.9",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 7768150993078504033, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_SizeDelta.x",
                          "value: 45.0102",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8172624838168562768, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_AnchorMax.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8172624838168562768, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_AnchorMin.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8172624838168562768, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_SizeDelta.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8172624838168562768, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_SizeDelta.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8172624838168562768, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_AnchoredPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8172624838168562768, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "propertyPath: m_AnchoredPosition.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "m_RemovedComponents: []",
                          "m_SourcePrefab: {fileID: 100100000, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "--- !u!224 &1215065034387861979 stripped",
                          "RectTransform:",
                          "m_CorrespondingSourceObject: {fileID: 7768150992220359610, guid: 932385457eb6e48999e46c08f0039d6c, type: 3}",
                          "m_PrefabInstance: {fileID: 1215065034387861978}",
                          "m_PrefabAsset: {fileID: 0}"
                        ]
                      },
                      "GameScene.unity.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Scenes/GameScene.unity.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "LoginScene.unity": {
                        "path": "./unity/Lumberjack/Assets/Game/Scenes/LoginScene.unity",
                        "isBinary": false,
                        "content": [
                          "%YAML 1.1",
                          "%TAG !u! tag:unity3d.com,2011:",
                          "--- !u!29 &1",
                          "OcclusionCullingSettings:",
                          "m_ObjectHideFlags: 0",
                          "serializedVersion: 2",
                          "m_OcclusionBakeSettings:",
                          "smallestOccluder: 5",
                          "smallestHole: 0.25",
                          "backfaceThreshold: 100",
                          "m_SceneGUID: 00000000000000000000000000000000",
                          "m_OcclusionCullingData: {fileID: 0}",
                          "--- !u!104 &2",
                          "RenderSettings:",
                          "m_ObjectHideFlags: 0",
                          "serializedVersion: 9",
                          "m_Fog: 0",
                          "m_FogColor: {r: 0.5, g: 0.5, b: 0.5, a: 1}",
                          "m_FogMode: 3",
                          "m_FogDensity: 0.01",
                          "m_LinearFogStart: 0",
                          "m_LinearFogEnd: 300",
                          "m_AmbientSkyColor: {r: 0.212, g: 0.227, b: 0.259, a: 1}",
                          "m_AmbientEquatorColor: {r: 0.114, g: 0.125, b: 0.133, a: 1}",
                          "m_AmbientGroundColor: {r: 0.047, g: 0.043, b: 0.035, a: 1}",
                          "m_AmbientIntensity: 1",
                          "m_AmbientMode: 0",
                          "m_SubtractiveShadowColor: {r: 0.42, g: 0.478, b: 0.627, a: 1}",
                          "m_SkyboxMaterial: {fileID: 10304, guid: 0000000000000000f000000000000000, type: 0}",
                          "m_HaloStrength: 0.5",
                          "m_FlareStrength: 1",
                          "m_FlareFadeSpeed: 3",
                          "m_HaloTexture: {fileID: 0}",
                          "m_SpotCookie: {fileID: 10001, guid: 0000000000000000e000000000000000, type: 0}",
                          "m_DefaultReflectionMode: 0",
                          "m_DefaultReflectionResolution: 128",
                          "m_ReflectionBounces: 1",
                          "m_ReflectionIntensity: 1",
                          "m_CustomReflection: {fileID: 0}",
                          "m_Sun: {fileID: 0}",
                          "m_IndirectSpecularColor: {r: 0.4439372, g: 0.49315345, b: 0.5721989, a: 1}",
                          "m_UseRadianceAmbientProbe: 0",
                          "--- !u!157 &3",
                          "LightmapSettings:",
                          "m_ObjectHideFlags: 0",
                          "serializedVersion: 12",
                          "m_GIWorkflowMode: 1",
                          "m_GISettings:",
                          "serializedVersion: 2",
                          "m_BounceScale: 1",
                          "m_IndirectOutputScale: 1",
                          "m_AlbedoBoost: 1",
                          "m_EnvironmentLightingMode: 0",
                          "m_EnableBakedLightmaps: 1",
                          "m_EnableRealtimeLightmaps: 0",
                          "m_LightmapEditorSettings:",
                          "serializedVersion: 12",
                          "m_Resolution: 2",
                          "m_BakeResolution: 40",
                          "m_AtlasSize: 1024",
                          "m_AO: 0",
                          "m_AOMaxDistance: 1",
                          "m_CompAOExponent: 1",
                          "m_CompAOExponentDirect: 0",
                          "m_ExtractAmbientOcclusion: 0",
                          "m_Padding: 2",
                          "m_LightmapParameters: {fileID: 0}",
                          "m_LightmapsBakeMode: 1",
                          "m_TextureCompression: 1",
                          "m_FinalGather: 0",
                          "m_FinalGatherFiltering: 1",
                          "m_FinalGatherRayCount: 256",
                          "m_ReflectionCompression: 2",
                          "m_MixedBakeMode: 2",
                          "m_BakeBackend: 1",
                          "m_PVRSampling: 1",
                          "m_PVRDirectSampleCount: 32",
                          "m_PVRSampleCount: 512",
                          "m_PVRBounces: 2",
                          "m_PVREnvironmentSampleCount: 256",
                          "m_PVREnvironmentReferencePointCount: 2048",
                          "m_PVRFilteringMode: 1",
                          "m_PVRDenoiserTypeDirect: 1",
                          "m_PVRDenoiserTypeIndirect: 1",
                          "m_PVRDenoiserTypeAO: 1",
                          "m_PVRFilterTypeDirect: 0",
                          "m_PVRFilterTypeIndirect: 0",
                          "m_PVRFilterTypeAO: 0",
                          "m_PVREnvironmentMIS: 1",
                          "m_PVRCulling: 1",
                          "m_PVRFilteringGaussRadiusDirect: 1",
                          "m_PVRFilteringGaussRadiusIndirect: 5",
                          "m_PVRFilteringGaussRadiusAO: 2",
                          "m_PVRFilteringAtrousPositionSigmaDirect: 0.5",
                          "m_PVRFilteringAtrousPositionSigmaIndirect: 2",
                          "m_PVRFilteringAtrousPositionSigmaAO: 1",
                          "m_ExportTrainingData: 0",
                          "m_TrainingDataDestination: TrainingData",
                          "m_LightProbeSampleCountMultiplier: 4",
                          "m_LightingDataAsset: {fileID: 0}",
                          "m_LightingSettings: {fileID: 0}",
                          "--- !u!196 &4",
                          "NavMeshSettings:",
                          "serializedVersion: 2",
                          "m_ObjectHideFlags: 0",
                          "m_BuildSettings:",
                          "serializedVersion: 2",
                          "agentTypeID: 0",
                          "agentRadius: 0.5",
                          "agentHeight: 2",
                          "agentSlope: 45",
                          "agentClimb: 0.4",
                          "ledgeDropHeight: 0",
                          "maxJumpAcrossDistance: 0",
                          "minRegionArea: 2",
                          "manualCellSize: 0",
                          "cellSize: 0.16666667",
                          "manualTileSize: 0",
                          "tileSize: 256",
                          "accuratePlacement: 0",
                          "maxJobWorkers: 0",
                          "preserveTilesOutsideBounds: 0",
                          "debug:",
                          "m_Flags: 0",
                          "m_NavMeshData: {fileID: 0}",
                          "--- !u!1001 &44570558",
                          "PrefabInstance:",
                          "m_ObjectHideFlags: 0",
                          "serializedVersion: 2",
                          "m_Modification:",
                          "m_TransformParent: {fileID: 772684577}",
                          "m_Modifications:",
                          "- target: {fileID: 4543230662287133981, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_text",
                          "value: Dev net",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662287133981, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_fontSize",
                          "value: 41.1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_Pivot.x",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_Pivot.y",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_RootOrder",
                          "value: 3",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMax.x",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMax.y",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMin.x",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMin.y",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_SizeDelta.x",
                          "value: 250",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_SizeDelta.y",
                          "value: 60",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalPosition.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalPosition.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.w",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.x",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.y",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.z",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchoredPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchoredPosition.y",
                          "value: -93.8",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328021, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_Name",
                          "value: LoginWalletAdatperDevnet",
                          "objectReference: {fileID: 0}",
                          "m_RemovedComponents: []",
                          "m_SourcePrefab: {fileID: 100100000, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "--- !u!224 &44570559 stripped",
                          "RectTransform:",
                          "m_CorrespondingSourceObject: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "m_PrefabInstance: {fileID: 44570558}",
                          "m_PrefabAsset: {fileID: 0}",
                          "--- !u!114 &44570560 stripped",
                          "MonoBehaviour:",
                          "m_CorrespondingSourceObject: {fileID: 4543230662569328023, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "m_PrefabInstance: {fileID: 44570558}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 0}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: 4e29b1a8efbd4b44bb3f3716e73f07ff, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "--- !u!1 &134336968",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 134336971}",
                          "- component: {fileID: 134336970}",
                          "- component: {fileID: 134336969}",
                          "m_Layer: 0",
                          "m_Name: EventSystem",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!114 &134336969",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 134336968}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: 4f231c4fb786f3946a6b90b886c48677, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_SendPointerHoverToParent: 1",
                          "m_HorizontalAxis: Horizontal",
                          "m_VerticalAxis: Vertical",
                          "m_SubmitButton: Submit",
                          "m_CancelButton: Cancel",
                          "m_InputActionsPerSecond: 10",
                          "m_RepeatDelay: 0.5",
                          "m_ForceModuleActive: 0",
                          "--- !u!114 &134336970",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 134336968}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: 76c392e42b5098c458856cdf6ecaaaa1, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_FirstSelected: {fileID: 0}",
                          "m_sendNavigationEvents: 1",
                          "m_DragThreshold: 10",
                          "--- !u!4 &134336971",
                          "Transform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 134336968}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 0}",
                          "m_RootOrder: 4",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "--- !u!1 &361775991",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 361775995}",
                          "- component: {fileID: 361775994}",
                          "- component: {fileID: 361775993}",
                          "- component: {fileID: 361775992}",
                          "m_Layer: 5",
                          "m_Name: Canvas",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!114 &361775992",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 361775991}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: dc42784cf147c0c48a680349fa168899, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_IgnoreReversedGraphics: 1",
                          "m_BlockingObjects: 0",
                          "m_BlockingMask:",
                          "serializedVersion: 2",
                          "m_Bits: 4294967295",
                          "--- !u!114 &361775993",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 361775991}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: 0cd44c1031e13a943bb63640046fad76, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_UiScaleMode: 1",
                          "m_ReferencePixelsPerUnit: 100",
                          "m_ScaleFactor: 1",
                          "m_ReferenceResolution: {x: 1920, y: 1080}",
                          "m_ScreenMatchMode: 0",
                          "m_MatchWidthOrHeight: 0.5",
                          "m_PhysicalUnit: 3",
                          "m_FallbackScreenDPI: 96",
                          "m_DefaultSpriteDPI: 96",
                          "m_DynamicPixelsPerUnit: 1",
                          "m_PresetInfoIsWorld: 0",
                          "--- !u!223 &361775994",
                          "Canvas:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 361775991}",
                          "m_Enabled: 1",
                          "serializedVersion: 3",
                          "m_RenderMode: 1",
                          "m_Camera: {fileID: 2044713759}",
                          "m_PlaneDistance: 100",
                          "m_PixelPerfect: 0",
                          "m_ReceivesEvents: 1",
                          "m_OverrideSorting: 0",
                          "m_OverridePixelPerfect: 0",
                          "m_SortingBucketNormalizedSize: 0",
                          "m_AdditionalShaderChannelsFlag: 25",
                          "m_SortingLayerID: 0",
                          "m_SortingOrder: 0",
                          "m_TargetDisplay: 0",
                          "--- !u!224 &361775995",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 361775991}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 0, y: 0, z: 0}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children:",
                          "- {fileID: 402113352}",
                          "- {fileID: 772684577}",
                          "- {fileID: 1166865667}",
                          "m_Father: {fileID: 0}",
                          "m_RootOrder: 3",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 0, y: 0}",
                          "m_AnchorMax: {x: 0, y: 0}",
                          "m_AnchoredPosition: {x: 0, y: 0}",
                          "m_SizeDelta: {x: 0, y: 0}",
                          "m_Pivot: {x: 0, y: 0}",
                          "--- !u!1 &402113351",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 402113352}",
                          "- component: {fileID: 402113354}",
                          "- component: {fileID: 402113353}",
                          "m_Layer: 5",
                          "m_Name: Bg",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!224 &402113352",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 402113351}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 361775995}",
                          "m_RootOrder: 0",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 0, y: 0}",
                          "m_AnchorMax: {x: 1, y: 1}",
                          "m_AnchoredPosition: {x: 0, y: 0}",
                          "m_SizeDelta: {x: 2146.366, y: 1498.71}",
                          "m_Pivot: {x: 0.5, y: 0.5}",
                          "--- !u!114 &402113353",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 402113351}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: fe87c0e1cc204ed48ad3b37840f39efc, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "m_Material: {fileID: 0}",
                          "m_Color: {r: 0.4433962, g: 0.4433962, b: 0.4433962, a: 1}",
                          "m_RaycastTarget: 1",
                          "m_RaycastPadding: {x: 0, y: 0, z: 0, w: 0}",
                          "m_Maskable: 1",
                          "m_OnCullStateChanged:",
                          "m_PersistentCalls:",
                          "m_Calls: []",
                          "m_Sprite: {fileID: 21300000, guid: a22cfbcc8ebee4c669dd592fe09975b2, type: 3}",
                          "m_Type: 0",
                          "m_PreserveAspect: 1",
                          "m_FillCenter: 1",
                          "m_FillMethod: 4",
                          "m_FillAmount: 1",
                          "m_FillClockwise: 1",
                          "m_FillOrigin: 0",
                          "m_UseSpriteMesh: 0",
                          "m_PixelsPerUnitMultiplier: 1",
                          "--- !u!222 &402113354",
                          "CanvasRenderer:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 402113351}",
                          "m_CullTransparentMesh: 1",
                          "--- !u!1 &652250375",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 652250378}",
                          "- component: {fileID: 652250377}",
                          "- component: {fileID: 652250376}",
                          "m_Layer: 0",
                          "m_Name: Main Camera",
                          "m_TagString: MainCamera",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!81 &652250376",
                          "AudioListener:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 652250375}",
                          "m_Enabled: 1",
                          "--- !u!20 &652250377",
                          "Camera:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 652250375}",
                          "m_Enabled: 1",
                          "serializedVersion: 2",
                          "m_ClearFlags: 1",
                          "m_BackGroundColor: {r: 0.19215687, g: 0.3019608, b: 0.4745098, a: 0}",
                          "m_projectionMatrixMode: 1",
                          "m_GateFitMode: 2",
                          "m_FOVAxisMode: 0",
                          "m_SensorSize: {x: 36, y: 24}",
                          "m_LensShift: {x: 0, y: 0}",
                          "m_FocalLength: 50",
                          "m_NormalizedViewPortRect:",
                          "serializedVersion: 2",
                          "x: 0",
                          "y: 0",
                          "width: 1",
                          "height: 1",
                          "near clip plane: 0.3",
                          "far clip plane: 1000",
                          "field of view: 60",
                          "orthographic: 0",
                          "orthographic size: 5",
                          "m_Depth: -1",
                          "m_CullingMask:",
                          "serializedVersion: 2",
                          "m_Bits: 4294967295",
                          "m_RenderingPath: -1",
                          "m_TargetTexture: {fileID: 0}",
                          "m_TargetDisplay: 0",
                          "m_TargetEye: 3",
                          "m_HDR: 1",
                          "m_AllowMSAA: 1",
                          "m_AllowDynamicResolution: 0",
                          "m_ForceIntoRT: 0",
                          "m_OcclusionCulling: 1",
                          "m_StereoConvergence: 10",
                          "m_StereoSeparation: 0.022",
                          "--- !u!4 &652250378",
                          "Transform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 652250375}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 1, z: -10}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 0}",
                          "m_RootOrder: 0",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "--- !u!1 &702304610",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 702304611}",
                          "- component: {fileID: 702304612}",
                          "m_Layer: 0",
                          "m_Name: AnchorService",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!4 &702304611",
                          "Transform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 702304610}",
                          "m_LocalRotation: {x: -0, y: -0, z: -0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 802737251}",
                          "m_RootOrder: 2",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "--- !u!114 &702304612",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 702304610}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: e361c4e484a844369b54c5fd3b90def7, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "--- !u!1001 &739974586",
                          "PrefabInstance:",
                          "m_ObjectHideFlags: 0",
                          "serializedVersion: 2",
                          "m_Modification:",
                          "m_TransformParent: {fileID: 772684577}",
                          "m_Modifications:",
                          "- target: {fileID: 4543230662287133981, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_text",
                          "value: Main Net",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662287133981, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_fontSize",
                          "value: 39.2",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_Pivot.x",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_Pivot.y",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_RootOrder",
                          "value: 4",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMax.x",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMax.y",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMin.x",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMin.y",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_SizeDelta.x",
                          "value: 250",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_SizeDelta.y",
                          "value: 60",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalPosition.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalPosition.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.w",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.x",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.y",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.z",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchoredPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchoredPosition.y",
                          "value: -166.2",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328021, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_Name",
                          "value: LoginWalletAdatperMainnet",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328023, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_Interactable",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "m_RemovedComponents: []",
                          "m_SourcePrefab: {fileID: 100100000, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "--- !u!224 &739974587 stripped",
                          "RectTransform:",
                          "m_CorrespondingSourceObject: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "m_PrefabInstance: {fileID: 739974586}",
                          "m_PrefabAsset: {fileID: 0}",
                          "--- !u!1 &772684576",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 772684577}",
                          "- component: {fileID: 772684578}",
                          "m_Layer: 5",
                          "m_Name: LoginScreen",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!224 &772684577",
                          "RectTransform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 772684576}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children:",
                          "- {fileID: 1801157335}",
                          "- {fileID: 44570559}",
                          "- {fileID: 739974587}",
                          "m_Father: {fileID: 361775995}",
                          "m_RootOrder: 1",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "m_AnchorMin: {x: 0, y: 0}",
                          "m_AnchorMax: {x: 1, y: 1}",
                          "m_AnchoredPosition: {x: 0, y: 0}",
                          "m_SizeDelta: {x: 0, y: 0}",
                          "m_Pivot: {x: 0.5, y: 0.5}",
                          "--- !u!114 &772684578",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 772684576}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: d5c4b524c3ae4c5fb001afc6bfe2162a, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "LoginButton: {fileID: 1801157336}",
                          "LoginWalletAdapterButton: {fileID: 44570560}",
                          "--- !u!1 &782480197",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 782480198}",
                          "- component: {fileID: 782480200}",
                          "- component: {fileID: 782480199}",
                          "m_Layer: 0",
                          "m_Name: NftService",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!4 &782480198",
                          "Transform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 782480197}",
                          "m_LocalRotation: {x: -0, y: -0, z: -0, w: 1}",
                          "m_LocalPosition: {x: 293.87027, y: 287.18182, z: 23.641981}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 802737251}",
                          "m_RootOrder: 0",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "--- !u!114 &782480199",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 782480197}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: 7200cbf09ed7438eb4005bbcf351e7f7, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "--- !u!114 &782480200",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 782480197}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: 99c40baead10843899efb994349f11cd, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "LoadedNfts: []",
                          "LocalDummyNft: {fileID: 2800000, guid: c8663869476f9414a94374f096f61c57, type: 3}",
                          "LoadNftsOnStartUp: 1",
                          "AddDummyNft: 1",
                          "--- !u!1 &802737248",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 802737251}",
                          "- component: {fileID: 802737250}",
                          "- component: {fileID: 802737249}",
                          "m_Layer: 0",
                          "m_Name: WalletHolder",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!114 &802737249",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 802737248}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: b75a4e92c14884ea6bf3e46d07a33eb0, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "rpcCluster: 1",
                          "customRpc: https://rpc.magicblock.app/devnet",
                          "webSocketsRpc: wss://rpc.magicblock.app/devnet",
                          "autoConnectOnStartup: 0",
                          "web3AuthWalletOptions:",
                          "appName: Web3Auth Sample App",
                          "logoLight:",
                          "logoDark:",
                          "defaultLanguage: 0",
                          "mode: 2",
                          "themeName: primary",
                          "themeColor: '#123456'",
                          "redirectUrl: torusapp://com.torus.Web3AuthUnity/auth",
                          "clientId: BAwFgL-r7wzQKmtcdiz2uHJKNZdK7gzEf2q-m55xfzSZOw8jLOyIi4AVvvzaEQO5nv2dFLEmf9LBkF8kaq3aErg",
                          "network: 1",
                          "loginConfig: []",
                          "solanaWalletAdapterOptions:",
                          "solanaMobileWalletAdapterOptions:",
                          "identityUri: https://solana.unity-sdk.gg/",
                          "iconUri: /favicon.ico",
                          "name: Solana.Unity-SDK",
                          "keepConnectionAlive: 1",
                          "solanaWalletAdapterWebGLOptions:",
                          "walletAdapterButtonPrefab: {fileID: 2788795083137714619, guid: f6f9ab42f789a4ec4baa484a9f1d0f97, type: 3}",
                          "walletAdapterUIPrefab: {fileID: 8029027132386834937, guid: 256e92be2288f4b68b207a43c304ee22, type: 3}",
                          "phantomWalletOptions:",
                          "apiVersion: v1",
                          "appMetaDataUrl: https://github.com/garbles-labs/Solana.Unity-SDK",
                          "deeplinkUrlScheme: unitydl",
                          "sessionEncryptionPassword: use a strong password",
                          "baseUrl: https://phantom.app",
                          "walletName: phantom",
                          "--- !u!114 &802737250",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 802737248}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: fbd7daddfbeaa44729a122a269ac8fb5, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "--- !u!4 &802737251",
                          "Transform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 802737248}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 0, y: 0, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children:",
                          "- {fileID: 782480198}",
                          "- {fileID: 1198640136}",
                          "- {fileID: 702304611}",
                          "m_Father: {fileID: 0}",
                          "m_RootOrder: 5",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "--- !u!224 &1166865667 stripped",
                          "RectTransform:",
                          "m_CorrespondingSourceObject: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "m_PrefabInstance: {fileID: 8899174232108091725}",
                          "m_PrefabAsset: {fileID: 0}",
                          "--- !u!1 &1198640135",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 1198640136}",
                          "- component: {fileID: 1198640137}",
                          "m_Layer: 0",
                          "m_Name: UiService",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!4 &1198640136",
                          "Transform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 1198640135}",
                          "m_LocalRotation: {x: -0, y: -0, z: -0, w: 1}",
                          "m_LocalPosition: {x: 406.25, y: 243.25, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 802737251}",
                          "m_RootOrder: 1",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "--- !u!114 &1198640137",
                          "MonoBehaviour:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 1198640135}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: 97c3b89c03d0642b4ba9d5d17d794ee1, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "UiRegistrations:",
                          "- PopupPrefab: {fileID: 7569996858213119434, guid: a8a0086df8f89450eacfeeb2e744ab73, type: 3}",
                          "ScreenType: 1",
                          "- PopupPrefab: {fileID: 4166324357920013829, guid: 23ef3ee2e766b4691a392f01d949e157, type: 3}",
                          "ScreenType: 2",
                          "--- !u!1 &1594189845",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 1594189847}",
                          "- component: {fileID: 1594189846}",
                          "m_Layer: 0",
                          "m_Name: Directional Light",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!108 &1594189846",
                          "Light:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 1594189845}",
                          "m_Enabled: 1",
                          "serializedVersion: 10",
                          "m_Type: 1",
                          "m_Shape: 0",
                          "m_Color: {r: 1, g: 0.95686275, b: 0.8392157, a: 1}",
                          "m_Intensity: 1",
                          "m_Range: 10",
                          "m_SpotAngle: 30",
                          "m_InnerSpotAngle: 21.80208",
                          "m_CookieSize: 10",
                          "m_Shadows:",
                          "m_Type: 2",
                          "m_Resolution: -1",
                          "m_CustomResolution: -1",
                          "m_Strength: 1",
                          "m_Bias: 0.05",
                          "m_NormalBias: 0.4",
                          "m_NearPlane: 0.2",
                          "m_CullingMatrixOverride:",
                          "e00: 1",
                          "e01: 0",
                          "e02: 0",
                          "e03: 0",
                          "e10: 0",
                          "e11: 1",
                          "e12: 0",
                          "e13: 0",
                          "e20: 0",
                          "e21: 0",
                          "e22: 1",
                          "e23: 0",
                          "e30: 0",
                          "e31: 0",
                          "e32: 0",
                          "e33: 1",
                          "m_UseCullingMatrixOverride: 0",
                          "m_Cookie: {fileID: 0}",
                          "m_DrawHalo: 0",
                          "m_Flare: {fileID: 0}",
                          "m_RenderMode: 0",
                          "m_CullingMask:",
                          "serializedVersion: 2",
                          "m_Bits: 4294967295",
                          "m_RenderingLayerMask: 1",
                          "m_Lightmapping: 4",
                          "m_LightShadowCasterMode: 0",
                          "m_AreaSize: {x: 1, y: 1}",
                          "m_BounceIntensity: 1",
                          "m_ColorTemperature: 6570",
                          "m_UseColorTemperature: 0",
                          "m_BoundingSphereOverride: {x: 0, y: 0, z: 0, w: 0}",
                          "m_UseBoundingSphereOverride: 0",
                          "m_UseViewFrustumForShadowCasterCull: 1",
                          "m_ShadowRadius: 0",
                          "m_ShadowAngle: 0",
                          "--- !u!4 &1594189847",
                          "Transform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 1594189845}",
                          "m_LocalRotation: {x: 0.40821788, y: -0.23456968, z: 0.10938163, w: 0.8754261}",
                          "m_LocalPosition: {x: 0, y: 3, z: 0}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 0}",
                          "m_RootOrder: 1",
                          "m_LocalEulerAnglesHint: {x: 50, y: -30, z: 0}",
                          "--- !u!1001 &1801157334",
                          "PrefabInstance:",
                          "m_ObjectHideFlags: 0",
                          "serializedVersion: 2",
                          "m_Modification:",
                          "m_TransformParent: {fileID: 772684577}",
                          "m_Modifications:",
                          "- target: {fileID: 4543230662287133981, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_text",
                          "value: Editor Login",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662287133981, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_fontSize",
                          "value: 25.9",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_Pivot.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_Pivot.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_RootOrder",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMax.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMax.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMin.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchorMin.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_SizeDelta.x",
                          "value: 250",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_SizeDelta.y",
                          "value: 60",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalPosition.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalPosition.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.w",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.x",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.y",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalRotation.z",
                          "value: -0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchoredPosition.x",
                          "value: 10",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_AnchoredPosition.y",
                          "value: 9",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 4543230662569328021, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "propertyPath: m_Name",
                          "value: EditorLoginButton",
                          "objectReference: {fileID: 0}",
                          "m_RemovedComponents: []",
                          "m_SourcePrefab: {fileID: 100100000, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "--- !u!224 &1801157335 stripped",
                          "RectTransform:",
                          "m_CorrespondingSourceObject: {fileID: 4543230662569328020, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "m_PrefabInstance: {fileID: 1801157334}",
                          "m_PrefabAsset: {fileID: 0}",
                          "--- !u!114 &1801157336 stripped",
                          "MonoBehaviour:",
                          "m_CorrespondingSourceObject: {fileID: 4543230662569328023, guid: c27ebc42ed62d4f528778183ed634846, type: 3}",
                          "m_PrefabInstance: {fileID: 1801157334}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 0}",
                          "m_Enabled: 1",
                          "m_EditorHideFlags: 0",
                          "m_Script: {fileID: 11500000, guid: 4e29b1a8efbd4b44bb3f3716e73f07ff, type: 3}",
                          "m_Name:",
                          "m_EditorClassIdentifier:",
                          "--- !u!1 &2044713757",
                          "GameObject:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "serializedVersion: 6",
                          "m_Component:",
                          "- component: {fileID: 2044713760}",
                          "- component: {fileID: 2044713759}",
                          "m_Layer: 0",
                          "m_Name: UiCamera",
                          "m_TagString: Untagged",
                          "m_Icon: {fileID: 0}",
                          "m_NavMeshLayer: 0",
                          "m_StaticEditorFlags: 0",
                          "m_IsActive: 1",
                          "--- !u!20 &2044713759",
                          "Camera:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 2044713757}",
                          "m_Enabled: 1",
                          "serializedVersion: 2",
                          "m_ClearFlags: 1",
                          "m_BackGroundColor: {r: 0.19215687, g: 0.3019608, b: 0.4745098, a: 0}",
                          "m_projectionMatrixMode: 1",
                          "m_GateFitMode: 2",
                          "m_FOVAxisMode: 0",
                          "m_SensorSize: {x: 36, y: 24}",
                          "m_LensShift: {x: 0, y: 0}",
                          "m_FocalLength: 50",
                          "m_NormalizedViewPortRect:",
                          "serializedVersion: 2",
                          "x: 0",
                          "y: 0",
                          "width: 1",
                          "height: 1",
                          "near clip plane: 0.3",
                          "far clip plane: 1000",
                          "field of view: 60",
                          "orthographic: 0",
                          "orthographic size: 5",
                          "m_Depth: 0",
                          "m_CullingMask:",
                          "serializedVersion: 2",
                          "m_Bits: 4294967295",
                          "m_RenderingPath: -1",
                          "m_TargetTexture: {fileID: 0}",
                          "m_TargetDisplay: 0",
                          "m_TargetEye: 3",
                          "m_HDR: 1",
                          "m_AllowMSAA: 1",
                          "m_AllowDynamicResolution: 0",
                          "m_ForceIntoRT: 0",
                          "m_OcclusionCulling: 1",
                          "m_StereoConvergence: 10",
                          "m_StereoSeparation: 0.022",
                          "--- !u!4 &2044713760",
                          "Transform:",
                          "m_ObjectHideFlags: 0",
                          "m_CorrespondingSourceObject: {fileID: 0}",
                          "m_PrefabInstance: {fileID: 0}",
                          "m_PrefabAsset: {fileID: 0}",
                          "m_GameObject: {fileID: 2044713757}",
                          "m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}",
                          "m_LocalPosition: {x: 404.80722, y: 442.85068, z: 6.672183}",
                          "m_LocalScale: {x: 1, y: 1, z: 1}",
                          "m_ConstrainProportionsScale: 0",
                          "m_Children: []",
                          "m_Father: {fileID: 0}",
                          "m_RootOrder: 2",
                          "m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}",
                          "--- !u!1001 &8899174232108091725",
                          "PrefabInstance:",
                          "m_ObjectHideFlags: 0",
                          "serializedVersion: 2",
                          "m_Modification:",
                          "m_TransformParent: {fileID: 361775995}",
                          "m_Modifications:",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_Pivot.x",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_Pivot.y",
                          "value: 0.5",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_RootOrder",
                          "value: 2",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_AnchorMax.x",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_AnchorMax.y",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_AnchorMin.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_AnchorMin.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_SizeDelta.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_SizeDelta.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_LocalPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_LocalPosition.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_LocalPosition.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_LocalRotation.w",
                          "value: 1",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_LocalRotation.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_LocalRotation.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_LocalRotation.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_AnchoredPosition.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_AnchoredPosition.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.x",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.y",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247630, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_LocalEulerAnglesHint.z",
                          "value: 0",
                          "objectReference: {fileID: 0}",
                          "- target: {fileID: 8899174231092247631, guid: ba000cab565a44c178af503c10992f7e, type: 3}",
                          "propertyPath: m_Name",
                          "value: InteractionBlocker",
                          "objectReference: {fileID: 0}",
                          "m_RemovedComponents: []",
                          "m_SourcePrefab: {fileID: 100100000, guid: ba000cab565a44c178af503c10992f7e, type: 3}"
                        ]
                      },
                      "LoginScene.unity.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Scenes/LoginScene.unity.meta",
                        "isBinary": true,
                        "content": null
                      }
                    }
                  },
                  "Scenes.meta": {
                    "path": "./unity/Lumberjack/Assets/Game/Scenes.meta",
                    "isBinary": true,
                    "content": null
                  },
                  "Scripts": {
                    "path": "./unity/Lumberjack/Assets/Game/Scripts",
                    "children": {
                      "SimpleRotate.cs": {
                        "path": "./unity/Lumberjack/Assets/Game/Scripts/SimpleRotate.cs",
                        "isBinary": false,
                        "content": [
                          "using UnityEngine;",
                          "namespace Game.Scripts",
                          "{",
                          "public class SimpleRotate : MonoBehaviour",
                          "{",
                          "public enum Axis",
                          "{",
                          "x,",
                          "y,",
                          "z",
                          "}",
                          "public float speed = 0.1f;",
                          "public Axis RotationAxis = Axis.x;",
                          "void Update()",
                          "{",
                          "var rotationAxis = Vector3.zero;",
                          "switch (RotationAxis)",
                          "{",
                          "case Axis.x:",
                          "rotationAxis = Vector3.forward;",
                          "break;",
                          "case Axis.y:",
                          "rotationAxis = Vector3.up;",
                          "break;",
                          "case Axis.z:",
                          "rotationAxis = Vector3.right;",
                          "break;",
                          "}",
                          "transform.Rotate(rotationAxis * Time.deltaTime, speed);",
                          "}",
                          "}",
                          "}"
                        ]
                      },
                      "SimpleRotate.cs.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Scripts/SimpleRotate.cs.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "Solana": {
                        "path": "./unity/Lumberjack/Assets/Game/Scripts/Solana",
                        "children": {
                          "AnchorService.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Solana/AnchorService.cs",
                            "isBinary": false,
                            "content": [
                              "using System;",
                              "using System.Collections.Generic;",
                              "using System.Diagnostics;",
                              "using System.Text;",
                              "using System.Threading.Tasks;",
                              "using Cysharp.Threading.Tasks;",
                              "using Frictionless;",
                              "using Game.Scripts.Ui;",
                              "using Lumberjack;",
                              "using Lumberjack.Accounts;",
                              "using Lumberjack.Program;",
                              "using Solana.Unity.Programs;",
                              "using Solana.Unity.Programs.Models;",
                              "using Solana.Unity.Rpc.Core.Http;",
                              "using Solana.Unity.Rpc.Messages;",
                              "using Solana.Unity.Rpc.Models;",
                              "using Solana.Unity.Rpc.Types;",
                              "using Solana.Unity.SDK;",
                              "using Solana.Unity.SessionKeys.GplSession.Accounts;",
                              "using Solana.Unity.Wallet;",
                              "using Services;",
                              "using UnityEngine;",
                              "using Debug = UnityEngine.Debug;",
                              "public class AnchorService : MonoBehaviour",
                              "{",
                              "public PublicKey AnchorProgramIdPubKey = new(\\"MkabCfyUD6rBTaYHpgKBBpBo5qzWA2pK2hrGGKMurJt\\");",
                              "// Needs to be the same constants as in the anchor program",
                              "public const int TIME_TO_REFILL_ENERGY = 60;",
                              "public const int MAX_ENERGY = 100;",
                              "public const int MAX_WOOD_PER_TREE = 100000;",
                              "public static AnchorService Instance { get; private set; }",
                              "public static Action<PlayerData> OnPlayerDataChanged;",
                              "public static Action<GameData> OnGameDataChanged;",
                              "public static Action OnInitialDataLoaded;",
                              "public bool IsAnyBlockingTransactionInProgress => blockingTransactionsInProgress > 0;",
                              "public bool IsAnyNonBlockingTransactionInProgress => nonBlockingTransactionsInProgress > 0;",
                              "public PlayerData CurrentPlayerData { get; private set; }",
                              "public GameData CurrentGameData { get; private set; }",
                              "public int BlockingTransactionsInProgress => blockingTransactionsInProgress;",
                              "public int NonBlockingTransactionsInProgress => nonBlockingTransactionsInProgress;",
                              "public long LastTransactionTimeInMs => lastTransactionTimeInMs;",
                              "public string LastError { get; set; }",
                              "private SessionWallet sessionWallet;",
                              "private PublicKey PlayerDataPDA;",
                              "private PublicKey GameDataPDA;",
                              "private bool _isInitialized;",
                              "private LumberjackClient anchorClient;",
                              "private int blockingTransactionsInProgress;",
                              "private int nonBlockingTransactionsInProgress;",
                              "private long? sessionValidUntil;",
                              "private string sessionKeyPassword = \\"inGame\\"; // Would be better to generate and save in playerprefs",
                              "private string levelSeed = \\"level_2\\";",
                              "private ushort transactionCounter = 0;",
                              "// Only used to show transaction speed. Feel free to remove",
                              "private Dictionary<ushort, Stopwatch> stopWatches = new ();",
                              "private long lastTransactionTimeInMs;",
                              "private void Awake()",
                              "{",
                              "if (Instance != null && Instance != this)",
                              "{",
                              "Destroy(this);",
                              "}",
                              "else",
                              "{",
                              "Instance = this;",
                              "}",
                              "Web3.OnLogin += OnLogin;",
                              "}",
                              "private void OnDestroy()",
                              "{",
                              "Web3.OnLogin -= OnLogin;",
                              "}",
                              "private async void OnLogin(Account account)",
                              "{",
                              "Debug.Log(\\"Logged in with pubkey: \\" + account.PublicKey);",
                              "await RequestAirdropIfSolValueIsLow();",
                              "sessionWallet = await SessionWallet.GetSessionWallet(AnchorProgramIdPubKey, sessionKeyPassword);",
                              "await UpdateSessionValid();",
                              "FindPDAs(account);",
                              "anchorClient = new LumberjackClient(Web3.Rpc, Web3.WsRpc, AnchorProgramIdPubKey);",
                              "await SubscribeToPlayerDataUpdates();",
                              "await SubscribeToGameDataUpdates();",
                              "OnInitialDataLoaded?.Invoke();",
                              "}",
                              "private void FindPDAs(Account account)",
                              "{",
                              "PublicKey.TryFindProgramAddress(new[]",
                              "{Encoding.UTF8.GetBytes(\\"player\\"), account.PublicKey.KeyBytes},",
                              "AnchorProgramIdPubKey, out PlayerDataPDA, out byte bump);",
                              "PublicKey.TryFindProgramAddress(new[]",
                              "{Encoding.UTF8.GetBytes(levelSeed)},",
                              "AnchorProgramIdPubKey, out GameDataPDA, out byte bump2);",
                              "}",
                              "private static async Task RequestAirdropIfSolValueIsLow()",
                              "{",
                              "var solBalance = await Web3.Instance.WalletBase.GetBalance();",
                              "if (solBalance < 0.8f)",
                              "{",
                              "Debug.Log(\\"Not enough sol. Requesting airdrop\\");",
                              "var result = await Web3.Instance.WalletBase.RequestAirdrop(commitment: Commitment.Confirmed);",
                              "if (!result.WasSuccessful)",
                              "{",
                              "Debug.Log(\\"Airdrop failed. You can go to faucet.solana.com and request sol for this key: \\" + Web3.Instance.WalletBase.Account.PublicKey);",
                              "}",
                              "}",
                              "}",
                              "public bool IsInitialized()",
                              "{",
                              "return _isInitialized;",
                              "}",
                              "private long GetSessionKeysEndTime()",
                              "{",
                              "return DateTimeOffset.UtcNow.AddDays(6).ToUnixTimeSeconds();",
                              "}",
                              "private async Task SubscribeToPlayerDataUpdates()",
                              "{",
                              "AccountResultWrapper<PlayerData> playerData = null;",
                              "try",
                              "{",
                              "playerData = await anchorClient.GetPlayerDataAsync(PlayerDataPDA, Commitment.Confirmed);",
                              "if (playerData.ParsedResult != null)",
                              "{",
                              "CurrentPlayerData = playerData.ParsedResult;",
                              "OnPlayerDataChanged?.Invoke(playerData.ParsedResult);",
                              "_isInitialized = true;",
                              "}",
                              "}",
                              "catch (Exception e)",
                              "{",
                              "Debug.Log(\\"Probably playerData not available \\" + e.Message);",
                              "}",
                              "if (playerData != null)",
                              "{",
                              "await anchorClient.SubscribePlayerDataAsync(PlayerDataPDA, (state, value, playerData) =>",
                              "{",
                              "OnReceivedPlayerDataUpdate(playerData);",
                              "}, Commitment.Processed);",
                              "}",
                              "}",
                              "private void OnReceivedPlayerDataUpdate(PlayerData playerData)",
                              "{",
                              "Debug.Log($\\"Socket Message: Player has {playerData.Wood} wood now.\\");",
                              "stopWatches[playerData.LastId].Stop();",
                              "lastTransactionTimeInMs = stopWatches[playerData.LastId].ElapsedMilliseconds;",
                              "CurrentPlayerData = playerData;",
                              "OnPlayerDataChanged?.Invoke(playerData);",
                              "}",
                              "private async Task SubscribeToGameDataUpdates()",
                              "{",
                              "AccountResultWrapper<GameData> gameData = null;",
                              "try",
                              "{",
                              "gameData = await anchorClient.GetGameDataAsync(GameDataPDA, Commitment.Confirmed);",
                              "if (gameData.ParsedResult != null)",
                              "{",
                              "CurrentGameData = gameData.ParsedResult;",
                              "OnGameDataChanged?.Invoke(gameData.ParsedResult);",
                              "}",
                              "}",
                              "catch (Exception e)",
                              "{",
                              "Debug.Log(\\"Probably game data not available \\" + e.Message);",
                              "}",
                              "if (gameData != null)",
                              "{",
                              "await anchorClient.SubscribeGameDataAsync(GameDataPDA, (state, value, gameData) =>",
                              "{",
                              "OnRecievedGameDataUpdate(gameData);",
                              "}, Commitment.Processed);",
                              "}",
                              "}",
                              "private void OnRecievedGameDataUpdate(GameData gameData)",
                              "{",
                              "Debug.Log($\\"Socket Message: Total log chopped  {gameData.TotalWoodCollected}.\\");",
                              "CurrentGameData = gameData;",
                              "OnGameDataChanged?.Invoke(gameData);",
                              "}",
                              "public async Task InitAccounts(bool useSession)",
                              "{",
                              "var tx = new Transaction()",
                              "{",
                              "FeePayer = Web3.Account,",
                              "Instructions = new List<TransactionInstruction>(),",
                              "RecentBlockHash = await Web3.BlockHash()",
                              "};",
                              "InitPlayerAccounts accounts = new InitPlayerAccounts();",
                              "accounts.Player = PlayerDataPDA;",
                              "accounts.GameData = GameDataPDA;",
                              "accounts.Signer = Web3.Account;",
                              "accounts.SystemProgram = SystemProgram.ProgramIdKey;",
                              "var initTx = LumberjackProgram.InitPlayer(accounts, levelSeed, AnchorProgramIdPubKey);",
                              "tx.Add(initTx);",
                              "if (true)",
                              "{",
                              "if (!(await IsSessionTokenInitialized()))",
                              "{",
                              "var topUp = true;",
                              "var validity = GetSessionKeysEndTime();",
                              "var createSessionIX = sessionWallet.CreateSessionIX(topUp, validity);",
                              "accounts.Signer = Web3.Account.PublicKey;",
                              "tx.Add(createSessionIX);",
                              "Debug.Log(\\"Has no session -> partial sign\\");",
                              "tx.PartialSign(new[] {Web3.Account, sessionWallet.Account});",
                              "}",
                              "}",
                              "bool success = await SendAndConfirmTransaction(Web3.Wallet, tx, \\"initialize\\",",
                              "() => { Debug.Log(\\"Init account was successful\\"); }, s => { Debug.LogError(\\"Init was not successful\\"); });",
                              "await UpdateSessionValid();",
                              "await SubscribeToPlayerDataUpdates();",
                              "await SubscribeToGameDataUpdates();",
                              "}",
                              "private async Task<bool> SendAndConfirmTransaction(WalletBase wallet, Transaction transaction, string label = \\"\\",",
                              "Action onSucccess = null, Action<string> onError = null, bool isBlocking = true)",
                              "{",
                              "(isBlocking ? ref blockingTransactionsInProgress : ref nonBlockingTransactionsInProgress)++;",
                              "LastError = String.Empty;",
                              "Debug.Log(\\"Sending and confirming transaction: \\" + label);",
                              "RequestResult<string> res;",
                              "try",
                              "{",
                              "res = await wallet.SignAndSendTransaction(transaction, commitment: Commitment.Confirmed);",
                              "}",
                              "catch (Exception e)",
                              "{",
                              "Debug.Log(\\"Transaction exception \\" + e);",
                              "blockingTransactionsInProgress--;",
                              "(isBlocking ? ref blockingTransactionsInProgress : ref nonBlockingTransactionsInProgress)--;",
                              "LastError = e.Message;",
                              "onError?.Invoke(e.ToString());",
                              "return false;",
                              "}",
                              "if (res.WasSuccessful && res.Result != null)",
                              "{",
                              "Debug.Log($\\"Transaction sent: {res.RawRpcResponse } signature: {res.Result}\\" );",
                              "await Web3.Rpc.ConfirmTransaction(res.Result, Commitment.Confirmed);",
                              "}",
                              "else",
                              "{",
                              "Debug.LogError(\\"Transaction failed: \\" + res.RawRpcResponse);",
                              "if (res.RawRpcResponse.Contains(\\"InsufficientFundsForRent\\"))",
                              "{",
                              "Debug.Log(\\"Trigger session top up (Not implemented)\\");",
                              "// TODO: this can probably happen when the session key runs out of funds.",
                              "//TriggerTopUpTransaction();",
                              "}",
                              "LastError = res.RawRpcResponse;",
                              "(isBlocking ? ref blockingTransactionsInProgress : ref nonBlockingTransactionsInProgress)--;",
                              "onError?.Invoke(res.RawRpcResponse);",
                              "return false;",
                              "}",
                              "Debug.Log($\\"Send transaction {label} with response: {res.RawRpcResponse}\\");",
                              "(isBlocking ? ref blockingTransactionsInProgress : ref nonBlockingTransactionsInProgress)--;",
                              "onSucccess?.Invoke();",
                              "return true;",
                              "}",
                              "public async Task RevokeSession()",
                              "{",
                              "await sessionWallet.CloseSession();",
                              "Debug.Log(\\"Session closed\\");",
                              "}",
                              "public async void ChopTree(bool useSession, Action onSuccess)",
                              "{",
                              "if (!Instance.IsSessionValid())",
                              "{",
                              "await Instance.UpdateSessionValid();",
                              "ServiceFactory.Resolve<UiService>().OpenPopup(UiService.ScreenType.SessionPopup, new SessionPopupUiData());",
                              "return;",
                              "}",
                              "// only for time tracking feel free to remove",
                              "var stopWatch = new Stopwatch();",
                              "stopWatch.Start();",
                              "stopWatches[++transactionCounter] = stopWatch;",
                              "var transaction = new Transaction()",
                              "{",
                              "FeePayer = Web3.Account,",
                              "Instructions = new List<TransactionInstruction>(),",
                              "RecentBlockHash = await Web3.BlockHash(maxSeconds: 15)",
                              "};",
                              "ChopTreeAccounts chopTreeAccounts = new ChopTreeAccounts",
                              "{",
                              "Player = PlayerDataPDA,",
                              "GameData = GameDataPDA,",
                              "SystemProgram = SystemProgram.ProgramIdKey",
                              "};",
                              "if (useSession)",
                              "{",
                              "transaction.FeePayer = sessionWallet.Account.PublicKey;",
                              "chopTreeAccounts.Signer = sessionWallet.Account.PublicKey;",
                              "chopTreeAccounts.SessionToken = sessionWallet.SessionTokenPDA;",
                              "var chopInstruction = LumberjackProgram.ChopTree(chopTreeAccounts, levelSeed, transactionCounter, AnchorProgramIdPubKey);",
                              "transaction.Add(chopInstruction);",
                              "Debug.Log(\\"Sign and send chop tree with session\\");",
                              "await SendAndConfirmTransaction(sessionWallet, transaction, \\"Chop Tree with session.\\", isBlocking: false, onSucccess: onSuccess);",
                              "}",
                              "else",
                              "{",
                              "transaction.FeePayer = Web3.Account.PublicKey;",
                              "chopTreeAccounts.Signer = Web3.Account.PublicKey;",
                              "var chopInstruction = LumberjackProgram.ChopTree(chopTreeAccounts, levelSeed, transactionCounter, AnchorProgramIdPubKey);",
                              "transaction.Add(chopInstruction);",
                              "Debug.Log(\\"Sign and send init without session\\");",
                              "await SendAndConfirmTransaction(Web3.Wallet, transaction, \\"Chop Tree without session.\\", onSucccess: onSuccess);",
                              "}",
                              "if (CurrentGameData == null)",
                              "{",
                              "await SubscribeToGameDataUpdates();",
                              "}",
                              "}",
                              "public async Task<bool> IsSessionTokenInitialized()",
                              "{",
                              "var sessionTokenData = await Web3.Rpc.GetAccountInfoAsync(sessionWallet.SessionTokenPDA, Commitment.Confirmed);",
                              "if (sessionTokenData.Result != null && sessionTokenData.Result.Value != null)",
                              "{",
                              "return true;",
                              "}",
                              "return false;",
                              "}",
                              "public async Task<bool> UpdateSessionValid()",
                              "{",
                              "SessionToken sessionToken = await RequestSessionToken();",
                              "if (sessionToken == null) return false;",
                              "Debug.Log(\\"Session token valid until: \\" + (new DateTime(1970, 1, 1)).AddSeconds(sessionToken.ValidUntil) +",
                              "\\" Now: \\" + DateTimeOffset.UtcNow);",
                              "sessionValidUntil = sessionToken.ValidUntil;",
                              "return IsSessionValid();",
                              "}",
                              "public async Task<SessionToken> RequestSessionToken()",
                              "{",
                              "ResponseValue<AccountInfo> sessionTokenData =",
                              "(await Web3.Rpc.GetAccountInfoAsync(sessionWallet.SessionTokenPDA, Commitment.Confirmed)).Result;",
                              "if (sessionTokenData == null) return null;",
                              "if (sessionTokenData.Value == null || sessionTokenData.Value.Data[0] == null)",
                              "{",
                              "return null;",
                              "}",
                              "var sessionToken = SessionToken.Deserialize(Convert.FromBase64String(sessionTokenData.Value.Data[0]));",
                              "return sessionToken;",
                              "}",
                              "private bool IsSessionValid()",
                              "{",
                              "return sessionValidUntil != null && sessionValidUntil > DateTimeOffset.UtcNow.ToUnixTimeSeconds();",
                              "}",
                              "private async Task RefreshSessionWallet()",
                              "{",
                              "sessionWallet = await SessionWallet.GetSessionWallet(AnchorProgramIdPubKey, sessionKeyPassword,",
                              "Web3.Wallet);",
                              "}",
                              "public async Task CreateNewSession()",
                              "{",
                              "var sessionToken = await Instance.RequestSessionToken();",
                              "if (sessionToken != null)",
                              "{",
                              "await sessionWallet.CloseSession();",
                              "}",
                              "var transaction = new Transaction()",
                              "{",
                              "FeePayer = Web3.Account,",
                              "Instructions = new List<TransactionInstruction>(),",
                              "RecentBlockHash = await Web3.BlockHash(Commitment.Confirmed, false)",
                              "};",
                              "SessionWallet.Instance = null;",
                              "await RefreshSessionWallet();",
                              "var sessionIx = sessionWallet.CreateSessionIX(true, GetSessionKeysEndTime());",
                              "transaction.Add(sessionIx);",
                              "transaction.PartialSign(new[] {Web3.Account, sessionWallet.Account});",
                              "var res = await Web3.Wallet.SignAndSendTransaction(transaction, commitment: Commitment.Confirmed);",
                              "Debug.Log(\\"Create session wallet: \\" + res.RawRpcResponse);",
                              "await Web3.Wallet.ActiveRpcClient.ConfirmTransaction(res.Result, Commitment.Confirmed);",
                              "var sessionValid = await UpdateSessionValid();",
                              "Debug.Log(\\"After create session, the session is valid: \\" + sessionValid);",
                              "}",
                              "}"
                            ]
                          },
                          "AnchorService.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Solana/AnchorService.cs.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "Lumberjack.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Solana/Lumberjack.cs",
                            "isBinary": false,
                            "content": [
                              "using System;",
                              "using System.Collections.Generic;",
                              "using System.Linq;",
                              "using System.Numerics;",
                              "using System.Threading.Tasks;",
                              "using Solana.Unity;",
                              "using Solana.Unity.Programs.Abstract;",
                              "using Solana.Unity.Programs.Utilities;",
                              "using Solana.Unity.Rpc;",
                              "using Solana.Unity.Rpc.Builders;",
                              "using Solana.Unity.Rpc.Core.Http;",
                              "using Solana.Unity.Rpc.Core.Sockets;",
                              "using Solana.Unity.Rpc.Types;",
                              "using Solana.Unity.Wallet;",
                              "using Lumberjack;",
                              "using Lumberjack.Program;",
                              "using Lumberjack.Errors;",
                              "using Lumberjack.Accounts;",
                              "namespace Lumberjack",
                              "{",
                              "namespace Accounts",
                              "{",
                              "public partial class GameData",
                              "{",
                              "public static ulong ACCOUNT_DISCRIMINATOR => 13758009850765924589UL;",
                              "public static ReadOnlySpan<byte> ACCOUNT_DISCRIMINATOR_BYTES => new byte[]{237, 88, 58, 243, 16, 69, 238, 190};",
                              "public static string ACCOUNT_DISCRIMINATOR_B58 => \\"ghYLwVtPH73\\";",
                              "public ulong TotalWoodCollected { get; set; }",
                              "public static GameData Deserialize(ReadOnlySpan<byte> _data)",
                              "{",
                              "int offset = 0;",
                              "ulong accountHashValue = _data.GetU64(offset);",
                              "offset += 8;",
                              "if (accountHashValue != ACCOUNT_DISCRIMINATOR)",
                              "{",
                              "return null;",
                              "}",
                              "GameData result = new GameData();",
                              "result.TotalWoodCollected = _data.GetU64(offset);",
                              "offset += 8;",
                              "return result;",
                              "}",
                              "}",
                              "public partial class PlayerData",
                              "{",
                              "public static ulong ACCOUNT_DISCRIMINATOR => 9264901878634267077UL;",
                              "public static ReadOnlySpan<byte> ACCOUNT_DISCRIMINATOR_BYTES => new byte[]{197, 65, 216, 202, 43, 139, 147, 128};",
                              "public static string ACCOUNT_DISCRIMINATOR_B58 => \\"ZzeEvyxXcpF\\";",
                              "public PublicKey Authority { get; set; }",
                              "public string Name { get; set; }",
                              "public byte Level { get; set; }",
                              "public ulong Xp { get; set; }",
                              "public ulong Wood { get; set; }",
                              "public ulong Energy { get; set; }",
                              "public long LastLogin { get; set; }",
                              "public ushort LastId { get; set; }",
                              "public static PlayerData Deserialize(ReadOnlySpan<byte> _data)",
                              "{",
                              "int offset = 0;",
                              "ulong accountHashValue = _data.GetU64(offset);",
                              "offset += 8;",
                              "if (accountHashValue != ACCOUNT_DISCRIMINATOR)",
                              "{",
                              "return null;",
                              "}",
                              "PlayerData result = new PlayerData();",
                              "result.Authority = _data.GetPubKey(offset);",
                              "offset += 32;",
                              "offset += _data.GetBorshString(offset, out var resultName);",
                              "result.Name = resultName;",
                              "result.Level = _data.GetU8(offset);",
                              "offset += 1;",
                              "result.Xp = _data.GetU64(offset);",
                              "offset += 8;",
                              "result.Wood = _data.GetU64(offset);",
                              "offset += 8;",
                              "result.Energy = _data.GetU64(offset);",
                              "offset += 8;",
                              "result.LastLogin = _data.GetS64(offset);",
                              "offset += 8;",
                              "result.LastId = _data.GetU16(offset);",
                              "offset += 2;",
                              "return result;",
                              "}",
                              "}",
                              "}",
                              "namespace Errors",
                              "{",
                              "public enum LumberjackErrorKind : uint",
                              "{",
                              "NotEnoughEnergy = 6000U,",
                              "WrongAuthority = 6001U",
                              "}",
                              "}",
                              "public partial class LumberjackClient : TransactionalBaseClient<LumberjackErrorKind>",
                              "{",
                              "public LumberjackClient(IRpcClient rpcClient, IStreamingRpcClient streamingRpcClient, PublicKey programId) : base(rpcClient, streamingRpcClient, programId)",
                              "{",
                              "}",
                              "public async Task<Solana.Unity.Programs.Models.ProgramAccountsResultWrapper<List<GameData>>> GetGameDatasAsync(string programAddress, Commitment commitment = Commitment.Finalized)",
                              "{",
                              "var list = new List<Solana.Unity.Rpc.Models.MemCmp>{new Solana.Unity.Rpc.Models.MemCmp{Bytes = GameData.ACCOUNT_DISCRIMINATOR_B58, Offset = 0}};",
                              "var res = await RpcClient.GetProgramAccountsAsync(programAddress, commitment, memCmpList: list);",
                              "if (!res.WasSuccessful || !(res.Result?.Count > 0))",
                              "return new Solana.Unity.Programs.Models.ProgramAccountsResultWrapper<List<GameData>>(res);",
                              "List<GameData> resultingAccounts = new List<GameData>(res.Result.Count);",
                              "resultingAccounts.AddRange(res.Result.Select(result => GameData.Deserialize(Convert.FromBase64String(result.Account.Data[0]))));",
                              "return new Solana.Unity.Programs.Models.ProgramAccountsResultWrapper<List<GameData>>(res, resultingAccounts);",
                              "}",
                              "public async Task<Solana.Unity.Programs.Models.ProgramAccountsResultWrapper<List<PlayerData>>> GetPlayerDatasAsync(string programAddress, Commitment commitment = Commitment.Finalized)",
                              "{",
                              "var list = new List<Solana.Unity.Rpc.Models.MemCmp>{new Solana.Unity.Rpc.Models.MemCmp{Bytes = PlayerData.ACCOUNT_DISCRIMINATOR_B58, Offset = 0}};",
                              "var res = await RpcClient.GetProgramAccountsAsync(programAddress, commitment, memCmpList: list);",
                              "if (!res.WasSuccessful || !(res.Result?.Count > 0))",
                              "return new Solana.Unity.Programs.Models.ProgramAccountsResultWrapper<List<PlayerData>>(res);",
                              "List<PlayerData> resultingAccounts = new List<PlayerData>(res.Result.Count);",
                              "resultingAccounts.AddRange(res.Result.Select(result => PlayerData.Deserialize(Convert.FromBase64String(result.Account.Data[0]))));",
                              "return new Solana.Unity.Programs.Models.ProgramAccountsResultWrapper<List<PlayerData>>(res, resultingAccounts);",
                              "}",
                              "public async Task<Solana.Unity.Programs.Models.AccountResultWrapper<GameData>> GetGameDataAsync(string accountAddress, Commitment commitment = Commitment.Finalized)",
                              "{",
                              "var res = await RpcClient.GetAccountInfoAsync(accountAddress, commitment);",
                              "if (!res.WasSuccessful)",
                              "return new Solana.Unity.Programs.Models.AccountResultWrapper<GameData>(res);",
                              "var resultingAccount = GameData.Deserialize(Convert.FromBase64String(res.Result.Value.Data[0]));",
                              "return new Solana.Unity.Programs.Models.AccountResultWrapper<GameData>(res, resultingAccount);",
                              "}",
                              "public async Task<Solana.Unity.Programs.Models.AccountResultWrapper<PlayerData>> GetPlayerDataAsync(string accountAddress, Commitment commitment = Commitment.Finalized)",
                              "{",
                              "var res = await RpcClient.GetAccountInfoAsync(accountAddress, commitment);",
                              "if (!res.WasSuccessful)",
                              "return new Solana.Unity.Programs.Models.AccountResultWrapper<PlayerData>(res);",
                              "var resultingAccount = PlayerData.Deserialize(Convert.FromBase64String(res.Result.Value.Data[0]));",
                              "return new Solana.Unity.Programs.Models.AccountResultWrapper<PlayerData>(res, resultingAccount);",
                              "}",
                              "public async Task<SubscriptionState> SubscribeGameDataAsync(string accountAddress, Action<SubscriptionState, Solana.Unity.Rpc.Messages.ResponseValue<Solana.Unity.Rpc.Models.AccountInfo>, GameData> callback, Commitment commitment = Commitment.Finalized)",
                              "{",
                              "SubscriptionState res = await StreamingRpcClient.SubscribeAccountInfoAsync(accountAddress, (s, e) =>",
                              "{",
                              "GameData parsingResult = null;",
                              "if (e.Value?.Data?.Count > 0)",
                              "parsingResult = GameData.Deserialize(Convert.FromBase64String(e.Value.Data[0]));",
                              "callback(s, e, parsingResult);",
                              "}, commitment);",
                              "return res;",
                              "}",
                              "public async Task<SubscriptionState> SubscribePlayerDataAsync(string accountAddress, Action<SubscriptionState, Solana.Unity.Rpc.Messages.ResponseValue<Solana.Unity.Rpc.Models.AccountInfo>, PlayerData> callback, Commitment commitment = Commitment.Finalized)",
                              "{",
                              "SubscriptionState res = await StreamingRpcClient.SubscribeAccountInfoAsync(accountAddress, (s, e) =>",
                              "{",
                              "PlayerData parsingResult = null;",
                              "if (e.Value?.Data?.Count > 0)",
                              "parsingResult = PlayerData.Deserialize(Convert.FromBase64String(e.Value.Data[0]));",
                              "callback(s, e, parsingResult);",
                              "}, commitment);",
                              "return res;",
                              "}",
                              "public async Task<RequestResult<string>> SendInitPlayerAsync(InitPlayerAccounts accounts, string levelSeed, PublicKey feePayer, Func<byte[], PublicKey, byte[]> signingCallback, PublicKey programId)",
                              "{",
                              "Solana.Unity.Rpc.Models.TransactionInstruction instr = Program.LumberjackProgram.InitPlayer(accounts, levelSeed, programId);",
                              "return await SignAndSendTransaction(instr, feePayer, signingCallback);",
                              "}",
                              "public async Task<RequestResult<string>> SendChopTreeAsync(ChopTreeAccounts accounts, string levelSeed, ushort counter, PublicKey feePayer, Func<byte[], PublicKey, byte[]> signingCallback, PublicKey programId)",
                              "{",
                              "Solana.Unity.Rpc.Models.TransactionInstruction instr = Program.LumberjackProgram.ChopTree(accounts, levelSeed, counter, programId);",
                              "return await SignAndSendTransaction(instr, feePayer, signingCallback);",
                              "}",
                              "public async Task<RequestResult<string>> SendSuperChopTreeAsync(SuperChopTreeAccounts accounts, string levelSeed, ushort counter, PublicKey feePayer, Func<byte[], PublicKey, byte[]> signingCallback, PublicKey programId)",
                              "{",
                              "Solana.Unity.Rpc.Models.TransactionInstruction instr = Program.LumberjackProgram.SuperChopTree(accounts, levelSeed, counter, programId);",
                              "return await SignAndSendTransaction(instr, feePayer, signingCallback);",
                              "}",
                              "protected override Dictionary<uint, ProgramError<LumberjackErrorKind>> BuildErrorsDictionary()",
                              "{",
                              "return new Dictionary<uint, ProgramError<LumberjackErrorKind>>{{6000U, new ProgramError<LumberjackErrorKind>(LumberjackErrorKind.NotEnoughEnergy, \\"Not enough energy\\")}, {6001U, new ProgramError<LumberjackErrorKind>(LumberjackErrorKind.WrongAuthority, \\"Wrong Authority\\")}, };",
                              "}",
                              "}",
                              "namespace Program",
                              "{",
                              "public class InitPlayerAccounts",
                              "{",
                              "public PublicKey Player { get; set; }",
                              "public PublicKey GameData { get; set; }",
                              "public PublicKey Signer { get; set; }",
                              "public PublicKey SystemProgram { get; set; }",
                              "}",
                              "public class ChopTreeAccounts",
                              "{",
                              "public PublicKey SessionToken { get; set; }",
                              "public PublicKey Player { get; set; }",
                              "public PublicKey GameData { get; set; }",
                              "public PublicKey Signer { get; set; }",
                              "public PublicKey SystemProgram { get; set; }",
                              "}",
                              "public class SuperChopTreeAccounts",
                              "{",
                              "public PublicKey SessionToken { get; set; }",
                              "public PublicKey Player { get; set; }",
                              "public PublicKey GameData { get; set; }",
                              "public PublicKey Signer { get; set; }",
                              "public PublicKey SystemProgram { get; set; }",
                              "}",
                              "public static class LumberjackProgram",
                              "{",
                              "public static Solana.Unity.Rpc.Models.TransactionInstruction InitPlayer(InitPlayerAccounts accounts, string levelSeed, PublicKey programId)",
                              "{",
                              "List<Solana.Unity.Rpc.Models.AccountMeta> keys = new()",
                              "{Solana.Unity.Rpc.Models.AccountMeta.Writable(accounts.Player, false), Solana.Unity.Rpc.Models.AccountMeta.Writable(accounts.GameData, false), Solana.Unity.Rpc.Models.AccountMeta.Writable(accounts.Signer, true), Solana.Unity.Rpc.Models.AccountMeta.ReadOnly(accounts.SystemProgram, false)};",
                              "byte[] _data = new byte[1200];",
                              "int offset = 0;",
                              "_data.WriteU64(4819994211046333298UL, offset);",
                              "offset += 8;",
                              "offset += _data.WriteBorshString(levelSeed, offset);",
                              "byte[] resultData = new byte[offset];",
                              "Array.Copy(_data, resultData, offset);",
                              "return new Solana.Unity.Rpc.Models.TransactionInstruction{Keys = keys, ProgramId = programId.KeyBytes, Data = resultData};",
                              "}",
                              "public static Solana.Unity.Rpc.Models.TransactionInstruction ChopTree(ChopTreeAccounts accounts, string levelSeed, ushort counter, PublicKey programId)",
                              "{",
                              "List<Solana.Unity.Rpc.Models.AccountMeta> keys = new()",
                              "{Solana.Unity.Rpc.Models.AccountMeta.ReadOnly(accounts.SessionToken == null ? programId : accounts.SessionToken, false), Solana.Unity.Rpc.Models.AccountMeta.Writable(accounts.Player, false), Solana.Unity.Rpc.Models.AccountMeta.Writable(accounts.GameData, false), Solana.Unity.Rpc.Models.AccountMeta.Writable(accounts.Signer, true), Solana.Unity.Rpc.Models.AccountMeta.ReadOnly(accounts.SystemProgram, false)};",
                              "byte[] _data = new byte[1200];",
                              "int offset = 0;",
                              "_data.WriteU64(2027946759707441272UL, offset);",
                              "offset += 8;",
                              "offset += _data.WriteBorshString(levelSeed, offset);",
                              "_data.WriteU16(counter, offset);",
                              "offset += 2;",
                              "byte[] resultData = new byte[offset];",
                              "Array.Copy(_data, resultData, offset);",
                              "return new Solana.Unity.Rpc.Models.TransactionInstruction{Keys = keys, ProgramId = programId.KeyBytes, Data = resultData};",
                              "}",
                              "public static Solana.Unity.Rpc.Models.TransactionInstruction SuperChopTree(SuperChopTreeAccounts accounts, string levelSeed, ushort counter, PublicKey programId)",
                              "{",
                              "List<Solana.Unity.Rpc.Models.AccountMeta> keys = new()",
                              "{Solana.Unity.Rpc.Models.AccountMeta.ReadOnly(accounts.SessionToken == null ? programId : accounts.SessionToken, false), Solana.Unity.Rpc.Models.AccountMeta.Writable(accounts.Player, false), Solana.Unity.Rpc.Models.AccountMeta.Writable(accounts.GameData, false), Solana.Unity.Rpc.Models.AccountMeta.Writable(accounts.Signer, true), Solana.Unity.Rpc.Models.AccountMeta.ReadOnly(accounts.SystemProgram, false)};",
                              "byte[] _data = new byte[1200];",
                              "int offset = 0;",
                              "_data.WriteU64(1750819471606152907UL, offset);",
                              "offset += 8;",
                              "offset += _data.WriteBorshString(levelSeed, offset);",
                              "_data.WriteU16(counter, offset);",
                              "offset += 2;",
                              "byte[] resultData = new byte[offset];",
                              "Array.Copy(_data, resultData, offset);",
                              "return new Solana.Unity.Rpc.Models.TransactionInstruction{Keys = keys, ProgramId = programId.KeyBytes, Data = resultData};",
                              "}",
                              "}",
                              "}",
                              "}"
                            ]
                          },
                          "Lumberjack.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Solana/Lumberjack.cs.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "NftMintingService.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Solana/NftMintingService.cs",
                            "isBinary": false,
                            "content": [
                              "using System;",
                              "using System.Collections;",
                              "using System.Collections.Generic;",
                              "using System.Text;",
                              "using System.Threading.Tasks;",
                              "using Frictionless;",
                              "using Game.Scripts;",
                              "using Solana.Unity.Metaplex.NFT.Library;",
                              "using Solana.Unity.Programs;",
                              "using Solana.Unity.Rpc.Builders;",
                              "using Solana.Unity.Rpc.Core.Http;",
                              "using Solana.Unity.Rpc.Messages;",
                              "using Solana.Unity.Rpc.Types;",
                              "using Solana.Unity.SDK;",
                              "using Solana.Unity.Wallet;",
                              "using UnityEngine;",
                              "using Creator = Solana.Unity.Metaplex.NFT.Library.Creator;",
                              "using MetadataProgram = Solana.Unity.Metaplex.NFT.Library.MetadataProgram;",
                              "using PublicKey = Solana.Unity.Wallet.PublicKey;",
                              "using Transaction = Solana.Unity.Rpc.Models.Transaction;",
                              "namespace Services",
                              "{",
                              "public class NftMintingService : MonoBehaviour, IMultiSceneSingleton",
                              "{",
                              "public void Awake()",
                              "{",
                              "if (ServiceFactory.Resolve<NftMintingService>() != null)",
                              "{",
                              "Destroy(gameObject);",
                              "return;",
                              "}",
                              "ServiceFactory.RegisterSingleton(this);",
                              "}",
                              "public IEnumerator HandleNewSceneLoaded()",
                              "{",
                              "yield return null;",
                              "}",
                              "public async Task<string> MintNftWithMetaData(string metaDataUri, string name, string symbol, Action<bool> onMintDone = null)",
                              "{",
                              "var account = Web3.Account;",
                              "var rpcClient = Web3.Rpc;",
                              "Account mint = new Account();",
                              "var associatedTokenAccount = AssociatedTokenAccountProgram",
                              ".DeriveAssociatedTokenAccount(account, mint.PublicKey);",
                              "var fromAccount = account;",
                              "RequestResult<ResponseValue<ulong>> balance =",
                              "await rpcClient.GetBalanceAsync(account.PublicKey, Commitment.Confirmed);",
                              "if (balance.Result != null && balance.Result.Value < SolanaUtils.SolToLamports / 10)",
                              "{",
                              "Debug.Log(\\"Sol balance is low. Minting may fail\\");",
                              "}",
                              "Debug.Log($\\"Balance: {balance.Result.Value} \\");",
                              "Debug.Log($\\"Mint key : {mint.PublicKey} \\");",
                              "var blockHash = await rpcClient.GetLatestBlockHashAsync();",
                              "var rentMint = await rpcClient.GetMinimumBalanceForRentExemptionAsync(",
                              "TokenProgram.MintAccountDataSize,",
                              "Commitment.Confirmed",
                              ");",
                              "var rentToken = await rpcClient.GetMinimumBalanceForRentExemptionAsync(",
                              "TokenProgram.TokenAccountDataSize,",
                              "Commitment.Confirmed",
                              ");",
                              "//2. create a mint and a token",
                              "var createMintAccount = SystemProgram.CreateAccount(",
                              "fromAccount,",
                              "mint,",
                              "rentMint.Result,",
                              "TokenProgram.MintAccountDataSize,",
                              "TokenProgram.ProgramIdKey",
                              ");",
                              "var initializeMint = TokenProgram.InitializeMint(",
                              "mint.PublicKey,",
                              "0,",
                              "fromAccount.PublicKey,",
                              "fromAccount.PublicKey",
                              ");",
                              "var createTokenAccount = AssociatedTokenAccountProgram.CreateAssociatedTokenAccount(",
                              "fromAccount,",
                              "fromAccount,",
                              "mint.PublicKey);",
                              "var mintTo = TokenProgram.MintTo(",
                              "mint.PublicKey,",
                              "associatedTokenAccount,",
                              "1,",
                              "fromAccount.PublicKey",
                              ");",
                              "// If you freeze the account the users will not be able to transfer the NFTs anywhere or burn them",
                              "/*var freezeAccount = TokenProgram.FreezeAccount(",
                              "tokenAccount,",
                              "mintAccount,",
                              "fromAccount,",
                              "TokenProgram.ProgramIdKey",
                              ");*/",
                              "// PDA Metadata",
                              "PublicKey metadataAddressPDA;",
                              "byte nonce;",
                              "PublicKey.TryFindProgramAddress(",
                              "new List<byte[]>()",
                              "{",
                              "Encoding.UTF8.GetBytes(\\"metadata\\"),",
                              "MetadataProgram.ProgramIdKey,",
                              "mint.PublicKey",
                              "},",
                              "MetadataProgram.ProgramIdKey,",
                              "out metadataAddressPDA,",
                              "out nonce",
                              ");",
                              "Console.WriteLine($\\"PDA METADATA: {metadataAddressPDA}\\");",
                              "// PDA master edition (Makes sure there can only be one minted)",
                              "PublicKey masterEditionAddress;",
                              "PublicKey.TryFindProgramAddress(",
                              "new List<byte[]>()",
                              "{",
                              "Encoding.UTF8.GetBytes(\\"metadata\\"),",
                              "MetadataProgram.ProgramIdKey,",
                              "mint.PublicKey,",
                              "Encoding.UTF8.GetBytes(\\"edition\\"),",
                              "},",
                              "MetadataProgram.ProgramIdKey,",
                              "out masterEditionAddress,",
                              "out nonce",
                              ");",
                              "Console.WriteLine($\\"PDA MASTER: {masterEditionAddress}\\");",
                              "// Craetors",
                              "var creator1 = new Creator(fromAccount.PublicKey, 100, false);",
                              "// Meta Data",
                              "var data = new Metadata()",
                              "{",
                              "name = name,",
                              "symbol = symbol,",
                              "uri = metaDataUri,",
                              "creators = new List<Creator>() {creator1},",
                              "sellerFeeBasisPoints = 77",
                              "};",
                              "var signers = new List<Account> {fromAccount, mint};",
                              "var transactionBuilder = new TransactionBuilder()",
                              ".SetRecentBlockHash(blockHash.Result.Value.Blockhash)",
                              ".SetFeePayer(fromAccount)",
                              ".AddInstruction(createMintAccount)",
                              ".AddInstruction(initializeMint)",
                              ".AddInstruction(createTokenAccount)",
                              ".AddInstruction(mintTo)",
                              "//.AddInstruction(freezeAccount)",
                              ".AddInstruction(",
                              "MetadataProgram.CreateMetadataAccount(",
                              "metadataAddressPDA, // PDA",
                              "mint,",
                              "fromAccount.PublicKey,",
                              "fromAccount.PublicKey,",
                              "fromAccount.PublicKey, // update Authority",
                              "data, // DATA",
                              "TokenStandard.NonFungible,",
                              "true,",
                              "true, // ISMUTABLE,",
                              "masterEditionKey: null,",
                              "1,",
                              "0UL,",
                              "MetadataVersion.V3",
                              ")",
                              ")",
                              ".AddInstruction(",
                              "MetadataProgram.SignMetadata(",
                              "metadataAddressPDA,",
                              "creator1.key",
                              ")",
                              ")",
                              ".AddInstruction(",
                              "MetadataProgram.PuffMetada(",
                              "metadataAddressPDA",
                              ")",
                              ")",
                              "/*.AddInstruction(",
                              "MetadataProgram.CreateMasterEdition(",
                              "1,",
                              "masterEditionAddress,",
                              "mintAccount,",
                              "fromAccount.PublicKey,",
                              "fromAccount.PublicKey,",
                              "fromAccount.PublicKey,",
                              "metadataAddressPDA",
                              ")",
                              ")*/;",
                              "var tx = Transaction.Deserialize(transactionBuilder.Build(new List<Account> {fromAccount, mint}));",
                              "var res = await Web3.Wallet.SignAndSendTransaction(tx, true, Commitment.Confirmed);",
                              "await Web3.Rpc.ConfirmTransaction(res.Result, Commitment.Confirmed);",
                              "Debug.Log(res.Result);",
                              "if (!res.WasSuccessful)",
                              "{",
                              "onMintDone?.Invoke(false);",
                              "Debug",
                              ".Log(\\"Mint was not successfull: \\" + res.Reason);",
                              "}",
                              "else",
                              "{",
                              "onMintDone?.Invoke(true);",
                              "Debug.Log(\\"Mint Successfull! Woop woop!\\");",
                              "}",
                              "return res.Result;",
                              "}",
                              "}",
                              "}"
                            ]
                          },
                          "NftMintingService.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Solana/NftMintingService.cs.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "NftService.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Solana/NftService.cs",
                            "isBinary": false,
                            "content": [
                              "using System;",
                              "using System.Collections;",
                              "using System.Collections.Generic;",
                              "using System.Reflection;",
                              "using Frictionless;",
                              "using Solana.Unity.Metaplex.NFT.Library;",
                              "using Solana.Unity.Metaplex.Utilities.Json;",
                              "using Solana.Unity.SDK;",
                              "using Solana.Unity.SDK.Nft;",
                              "using Solana.Unity.Wallet;",
                              "using UnityEngine;",
                              "namespace Services",
                              "{",
                              "/// <summary>",
                              "/// Handles all logic related to NFTs and calculating their power level or whatever you like to do with the NFTs",
                              "/// </summary>",
                              "public class NftService : MonoBehaviour, IMultiSceneSingleton",
                              "{",
                              "public const string NftCreator = \\"8DQSv6bnq2oomwk15sq1tiS6f1FXecxyBaHVeBG9BhPV\\";",
                              "public List<Nft> LoadedNfts = new ();",
                              "public bool IsLoadingTokenAccounts { get; private set; }",
                              "public Nft SelectedNft { get; private set; }",
                              "public Texture2D LocalDummyNft;",
                              "public bool LoadNftsOnStartUp = true;",
                              "public bool AddDummyNft = true;",
                              "public void Awake()",
                              "{",
                              "if (ServiceFactory.Resolve<NftService>() != null)",
                              "{",
                              "Destroy(gameObject);",
                              "return;",
                              "}",
                              "ServiceFactory.RegisterSingleton(this);",
                              "Web3.OnLogin += OnLogin;",
                              "}",
                              "private void OnLogin(Account obj)",
                              "{",
                              "if (!LoadNftsOnStartUp)",
                              "{",
                              "return;",
                              "}",
                              "LoadNfts();",
                              "}",
                              "public void LoadNfts()",
                              "{",
                              "LoadedNfts.Clear();",
                              "Web3.AutoLoadNfts = false;",
                              "Web3.LoadNFTs();",
                              "IsLoadingTokenAccounts = true;",
                              "Web3.OnNFTsUpdate += (nfts, totalAmount) =>",
                              "{",
                              "foreach (var newNft in nfts)",
                              "{",
                              "bool wasAlreadyLoaded = false;",
                              "foreach (var oldNft in LoadedNfts)",
                              "{",
                              "if (newNft.metaplexData.data.mint == oldNft.metaplexData.data.mint)",
                              "{",
                              "wasAlreadyLoaded = true;",
                              "}",
                              "}",
                              "if (!wasAlreadyLoaded)",
                              "{",
                              "MessageRouter.RaiseMessage(new NftLoadedMessage(newNft));",
                              "LoadedNfts.Add(newNft);",
                              "}",
                              "}",
                              "IsLoadingTokenAccounts = nfts.Count != totalAmount;",
                              "};",
                              "if (AddDummyNft)",
                              "{",
                              "var dummyLocalNft = CreateDummyLocalNft(Web3.Account.PublicKey);",
                              "LoadedNfts.Add(dummyLocalNft);",
                              "MessageRouter.RaiseMessage(new NftLoadedMessage(dummyLocalNft));",
                              "}",
                              "}",
                              "public Nft CreateDummyLocalNft(string publicKey)",
                              "{",
                              "Nft dummyLocalNft = new Nft();",
                              "var constructor = typeof(MetadataAccount).GetConstructor(BindingFlags.NonPublic | BindingFlags.Instance,",
                              "null, new Type[0], null);",
                              "MetadataAccount metaPlexData = (MetadataAccount) constructor.Invoke(null);",
                              "metaPlexData.offchainData = new MetaplexTokenStandard();",
                              "metaPlexData.offchainData.symbol = \\"dummy\\";",
                              "metaPlexData.offchainData.name = \\"Dummy Nft\\";",
                              "metaPlexData.offchainData.description = \\"A dummy nft which uses the wallet puy key\\";",
                              "metaPlexData.mint = publicKey;",
                              "dummyLocalNft.metaplexData = new Metaplex(metaPlexData);",
                              "dummyLocalNft.metaplexData.nftImage = new NftImage()",
                              "{",
                              "name = \\"DummyNft\\",",
                              "file = LocalDummyNft",
                              "};",
                              "return dummyLocalNft;",
                              "}",
                              "public bool IsNftSelected(Nft nft)",
                              "{",
                              "return nft.metaplexData.data.mint == GetSelectedNftPubKey();",
                              "}",
                              "private string GetSelectedNftPubKey()",
                              "{",
                              "return PlayerPrefs.GetString(\\"SelectedNft\\");",
                              "}",
                              "public bool OwnsNftOfUpdateAuthority(string authority)",
                              "{",
                              "foreach (var nft in LoadedNfts)",
                              "{",
                              "if (nft.metaplexData.data.updateAuthority != null && nft.metaplexData.data.updateAuthority == authority)",
                              "{",
                              "return true;",
                              "}",
                              "}",
                              "return false;",
                              "}",
                              "public bool OwnsNftByCreator(string creator)",
                              "{",
                              "foreach (var nft in LoadedNfts)",
                              "{",
                              "if (nft.metaplexData.data.metadata != null && nft.metaplexData.data.metadata.creators != null)",
                              "{",
                              "foreach (var nftCreator in nft.metaplexData.data.metadata.creators)",
                              "{",
                              "if (nftCreator.key == creator)",
                              "{",
                              "return true;",
                              "}",
                              "}",
                              "}",
                              "}",
                              "return false;",
                              "}",
                              "public void SelectNft(Nft nft)",
                              "{",
                              "if (nft == null)",
                              "{",
                              "return;",
                              "}",
                              "SelectedNft = nft;",
                              "PlayerPrefs.SetString(\\"SelectedNft\\", SelectedNft.metaplexData.data.mint);",
                              "MessageRouter.RaiseMessage(new NftSelectedMessage(SelectedNft));",
                              "}",
                              "public void ResetSelectedNft()",
                              "{",
                              "SelectedNft = null;",
                              "PlayerPrefs.DeleteKey(\\"SelectedNft\\");",
                              "MessageRouter.RaiseMessage(new NftSelectedMessage(SelectedNft));",
                              "}",
                              "public IEnumerator HandleNewSceneLoaded()",
                              "{",
                              "yield return null;",
                              "}",
                              "}",
                              "public class NftLoadedMessage",
                              "{",
                              "public Nft Nft;",
                              "public NftLoadedMessage(Nft nft)",
                              "{",
                              "Nft = nft;",
                              "}",
                              "}",
                              "public class NftSelectedMessage",
                              "{",
                              "public Nft NewNFt;",
                              "public NftSelectedMessage(Nft newNFt)",
                              "{",
                              "NewNFt = newNFt;",
                              "}",
                              "}",
                              "public class NftLoadingStartedMessage",
                              "{",
                              "}",
                              "public class NftLoadingFinishedMessage",
                              "{",
                              "}",
                              "public class NftMintFinishedMessage",
                              "{",
                              "}",
                              "}"
                            ]
                          },
                          "NftService.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Solana/NftService.cs.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "SolanaUtils.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Solana/SolanaUtils.cs",
                            "isBinary": false,
                            "content": [
                              "using System;",
                              "namespace Game.Scripts",
                              "{",
                              "public class SolanaUtils",
                              "{",
                              "public const long SolToLamports = 1000000000;",
                              "}",
                              "public static class ArrayUtils",
                              "{",
                              "public static T[] Slice<T>(this T[] arr, uint indexFrom, uint indexTo) {",
                              "if (indexFrom > indexTo) {",
                              "throw new ArgumentOutOfRangeException(\\"indexFrom is bigger than indexTo!\\");",
                              "}",
                              "uint length = indexTo - indexFrom;",
                              "T[] result = new T[length];",
                              "Array.Copy(arr, indexFrom, result, 0, length);",
                              "return result;",
                              "}",
                              "}",
                              "}"
                            ]
                          },
                          "SolanaUtils.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Solana/SolanaUtils.cs.meta",
                            "isBinary": true,
                            "content": null
                          }
                        }
                      },
                      "Solana.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Scripts/Solana.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "Ui": {
                        "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui",
                        "children": {
                          "BasePopup.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/BasePopup.cs",
                            "isBinary": false,
                            "content": [
                              "using Services;",
                              "using UnityEngine;",
                              "using UnityEngine.UI;",
                              "namespace Game.Scripts.Ui",
                              "{",
                              "public class BasePopup : MonoBehaviour",
                              "{",
                              "public GameObject Root;",
                              "public Button CloseButton;",
                              "protected void Awake()",
                              "{",
                              "Root.gameObject.SetActive(false);",
                              "}",
                              "public virtual void Open(UiService.UiData uiData)",
                              "{",
                              "if (CloseButton != null)",
                              "{",
                              "CloseButton.onClick.RemoveAllListeners();",
                              "CloseButton.onClick.AddListener(OnCloseButtonClicked);",
                              "}",
                              "Root.gameObject.SetActive(true);",
                              "}",
                              "public virtual void Close()",
                              "{",
                              "Root.gameObject.SetActive(false);",
                              "}",
                              "protected void OnCloseButtonClicked()",
                              "{",
                              "Close();",
                              "}",
                              "}",
                              "}"
                            ]
                          },
                          "BasePopup.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/BasePopup.cs.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "GameScreen.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/GameScreen.cs",
                            "isBinary": false,
                            "content": [
                              "using System;",
                              "using System.Collections;",
                              "using Cysharp.Threading.Tasks;",
                              "using DG.Tweening;",
                              "using Frictionless;",
                              "using Lumberjack.Accounts;",
                              "using Solana.Unity.SDK;",
                              "using Services;",
                              "using TMPro;",
                              "using UnityEngine;",
                              "using UnityEngine.SceneManagement;",
                              "using UnityEngine.UI;",
                              "/// <summary>",
                              "/// This is the screen which handles the interaction with the anchor program.",
                              "/// It checks if there is a game account already and has a button to call a function in the program.",
                              "/// </summary>",
                              "public class GameScreen : MonoBehaviour",
                              "{",
                              "public Button ChuckWoodSessionButton;",
                              "public Button NftsButton;",
                              "public Button InitGameDataButton;",
                              "public TextMeshProUGUI EnergyAmountText;",
                              "public TextMeshProUGUI WoodAmountText;",
                              "public TextMeshProUGUI NextEnergyInText;",
                              "public TextMeshProUGUI TotalLogAvailableText;",
                              "public GameObject NotInitializedRoot;",
                              "public GameObject InitializedRoot;",
                              "public GameObject ActionFx;",
                              "public GameObject ActionFxPosition;",
                              "public GameObject Tree;",
                              "private Vector3 CharacterStartPosition;",
                              "private PlayerData currentPlayerData;",
                              "private GameData currentGameData;",
                              "void Start()",
                              "{",
                              "ChuckWoodSessionButton.onClick.AddListener(OnChuckWoodSessionButtonClicked);",
                              "NftsButton.onClick.AddListener(OnNftsButtonClicked);",
                              "InitGameDataButton.onClick.AddListener(OnInitGameDataButtonClicked);",
                              "CharacterStartPosition = ChuckWoodSessionButton.transform.localPosition;",
                              "// In case we are not logged in yet load the LoginScene",
                              "if (Web3.Account == null)",
                              "{",
                              "SceneManager.LoadScene(\\"LoginScene\\");",
                              "return;",
                              "}",
                              "StartCoroutine(UpdateNextEnergy());",
                              "AnchorService.OnPlayerDataChanged += OnPlayerDataChanged;",
                              "AnchorService.OnGameDataChanged += OnGameDataChanged;",
                              "AnchorService.OnInitialDataLoaded += UpdateContent;",
                              "}",
                              "private void OnDestroy()",
                              "{",
                              "AnchorService.OnPlayerDataChanged -= OnPlayerDataChanged;",
                              "AnchorService.OnGameDataChanged -= OnGameDataChanged;",
                              "AnchorService.OnInitialDataLoaded -= UpdateContent;",
                              "}",
                              "private void OnEnable()",
                              "{",
                              "StartCoroutine(UpdateNextEnergy());",
                              "}",
                              "private async void OnInitGameDataButtonClicked()",
                              "{",
                              "// On local host we probably dont have the session key progeam, but can just sign with the in game wallet instead.",
                              "await AnchorService.Instance.InitAccounts(!Web3.Rpc.NodeAddress.AbsoluteUri.Contains(\\"localhost\\"));",
                              "}",
                              "private void OnNftsButtonClicked()",
                              "{",
                              "ServiceFactory.Resolve<UiService>().OpenPopup(UiService.ScreenType.NftListPopup, new NftListPopupUiData(false, Web3.Wallet));",
                              "}",
                              "private IEnumerator UpdateNextEnergy()",
                              "{",
                              "while (true)",
                              "{",
                              "yield return new WaitForSeconds(1);",
                              "UpdateContent();",
                              "}",
                              "}",
                              "private void OnPlayerDataChanged(PlayerData playerData)",
                              "{",
                              "if (currentPlayerData != null && currentPlayerData.Wood < playerData.Wood)",
                              "{",
                              "ChuckWoodSessionButton.transform.DOLocalMove(CharacterStartPosition, 0.2f);",
                              "}",
                              "currentPlayerData = playerData;",
                              "UpdateContent();",
                              "}",
                              "private void OnGameDataChanged(GameData gameData)",
                              "{",
                              "if (currentGameData != null && currentGameData.TotalWoodCollected != gameData.TotalWoodCollected)",
                              "{",
                              "Tree.transform.DOKill();",
                              "Tree.transform.localScale = Vector3.one;",
                              "Tree.transform.DOPunchScale(Vector3.one * 0.1f, 0.1f);",
                              "Instantiate(ActionFx, ActionFxPosition.transform.position, Quaternion.identity);",
                              "}",
                              "var totalLogAvailable = AnchorService.MAX_WOOD_PER_TREE - gameData.TotalWoodCollected;",
                              "TotalLogAvailableText.text = totalLogAvailable + \\" Wood available.\\";",
                              "currentGameData = gameData;",
                              "}",
                              "private void UpdateContent()",
                              "{",
                              "var isInitialized = AnchorService.Instance.IsInitialized();",
                              "NotInitializedRoot.SetActive(!isInitialized);",
                              "InitGameDataButton.gameObject.SetActive(!isInitialized && AnchorService.Instance.CurrentPlayerData == null);",
                              "InitializedRoot.SetActive(isInitialized);",
                              "if (AnchorService.Instance.CurrentPlayerData == null)",
                              "{",
                              "return;",
                              "}",
                              "var lastLoginTime = AnchorService.Instance.CurrentPlayerData.LastLogin;",
                              "var timePassed = DateTimeOffset.UtcNow.ToUnixTimeSeconds() - lastLoginTime;",
                              "while (",
                              "timePassed >= AnchorService.TIME_TO_REFILL_ENERGY &&",
                              "AnchorService.Instance.CurrentPlayerData.Energy < AnchorService.MAX_ENERGY",
                              ") {",
                              "AnchorService.Instance.CurrentPlayerData.Energy += 1;",
                              "AnchorService.Instance.CurrentPlayerData.LastLogin += AnchorService.TIME_TO_REFILL_ENERGY;",
                              "timePassed -= AnchorService.TIME_TO_REFILL_ENERGY;",
                              "}",
                              "var timeUntilNextRefill = AnchorService.TIME_TO_REFILL_ENERGY - timePassed;",
                              "if (timeUntilNextRefill > 0)",
                              "{",
                              "NextEnergyInText.text = timeUntilNextRefill.ToString();",
                              "}",
                              "else",
                              "{",
                              "NextEnergyInText.text = \\"\\";",
                              "}",
                              "EnergyAmountText.text = AnchorService.Instance.CurrentPlayerData.Energy.ToString();",
                              "WoodAmountText.text = AnchorService.Instance.CurrentPlayerData.Wood.ToString();",
                              "}",
                              "private void OnChuckWoodSessionButtonClicked()",
                              "{",
                              "ChuckWoodSessionButton.transform.localPosition = CharacterStartPosition;",
                              "ChuckWoodSessionButton.transform.DOLocalMove(CharacterStartPosition + Vector3.up * 10, 0.3f);",
                              "AnchorService.Instance.ChopTree(!Web3.Rpc.NodeAddress.AbsoluteUri.Contains(\\"localhost\\"), () =>",
                              "{",
                              "// Do something with the result. The websocket update in onPlayerDataChanged will come a bit earlier",
                              "});",
                              "}",
                              "}"
                            ]
                          },
                          "GameScreen.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/GameScreen.cs.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "InteractionBlocker.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/InteractionBlocker.cs",
                            "isBinary": false,
                            "content": [
                              "using TMPro;",
                              "using UnityEngine;",
                              "public class InteractionBlocker : MonoBehaviour",
                              "{",
                              "public GameObject BlockingSpinner;",
                              "public GameObject NonBlocking;",
                              "public TextMeshProUGUI CurrentTransactionsInProgress;",
                              "public TextMeshProUGUI LastTransactionTimeText;",
                              "public TextMeshProUGUI LastError;",
                              "void Update()",
                              "{",
                              "if (AnchorService.Instance == null)",
                              "{",
                              "return;",
                              "}",
                              "BlockingSpinner.gameObject.SetActive(AnchorService.Instance.IsAnyBlockingTransactionInProgress);",
                              "NonBlocking.gameObject.SetActive(AnchorService.Instance.IsAnyNonBlockingTransactionInProgress);",
                              "CurrentTransactionsInProgress.text = (AnchorService.Instance.BlockingTransactionsInProgress +",
                              "AnchorService.Instance.NonBlockingTransactionsInProgress).ToString();",
                              "LastTransactionTimeText.text = $\\"Last took: {AnchorService.Instance.LastTransactionTimeInMs}ms\\";",
                              "LastError.text = AnchorService.Instance.LastError;",
                              "}",
                              "}"
                            ]
                          },
                          "InteractionBlocker.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/InteractionBlocker.cs.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "LoginScreen.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/LoginScreen.cs",
                            "isBinary": false,
                            "content": [
                              "using System;",
                              "using Lumberjack.Accounts;",
                              "using Solana.Unity.SDK;",
                              "using Solana.Unity.Wallet.Bip39;",
                              "using UnityEngine;",
                              "using UnityEngine.SceneManagement;",
                              "using UnityEngine.UI;",
                              "/// <summary>",
                              "/// Handles the connection to the players wallet.",
                              "/// </summary>",
                              "public class LoginScreen : MonoBehaviour",
                              "{",
                              "public Button LoginButton;",
                              "public Button LoginWalletAdapterButton;",
                              "void Start()",
                              "{",
                              "LoginButton.onClick.AddListener(OnEditorLoginClicked);",
                              "LoginWalletAdapterButton.onClick.AddListener(OnLoginWalletAdapterButtonClicked);",
                              "AnchorService.OnPlayerDataChanged += OnPlayerDataChanged;",
                              "AnchorService.OnInitialDataLoaded += UpdateContent;",
                              "}",
                              "private void OnDestroy()",
                              "{",
                              "AnchorService.OnPlayerDataChanged -= OnPlayerDataChanged;",
                              "AnchorService.OnInitialDataLoaded -= UpdateContent;",
                              "}",
                              "private async void OnLoginWalletAdapterButtonClicked()",
                              "{",
                              "await Web3.Instance.LoginWalletAdapter();",
                              "}",
                              "private void OnPlayerDataChanged(PlayerData playerData)",
                              "{",
                              "UpdateContent();",
                              "}",
                              "private void UpdateContent()",
                              "{",
                              "if (Web3.Account != null)",
                              "{",
                              "SceneManager.LoadScene(\\"GameScene\\");",
                              "}",
                              "}",
                              "private async void OnEditorLoginClicked()",
                              "{",
                              "var newMnemonic = new Mnemonic(WordList.English, WordCount.Twelve);",
                              "// Dont use this one for production. Its only ment for editor login",
                              "var account = await Web3.Instance.LoginInGameWallet(\\"1234\\") ??",
                              "await Web3.Instance.CreateAccount(newMnemonic.ToString(), \\"1234\\");",
                              "}",
                              "}"
                            ]
                          },
                          "LoginScreen.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/LoginScreen.cs.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "NftContextMenu.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/NftContextMenu.cs",
                            "isBinary": false,
                            "content": [
                              "using System;",
                              "using Frictionless;",
                              "using Services;",
                              "using Solana.Unity.SDK.Nft;",
                              "using TMPro;",
                              "using UnityEngine;",
                              "using UnityEngine.UI;",
                              "namespace Game.Scripts.Ui",
                              "{",
                              "/// <summary>",
                              "/// When clicking a Nft this context menu opens and shows some information about the Nft",
                              "/// </summary>",
                              "public class NftContextMenu : MonoBehaviour",
                              "{",
                              "public GameObject Root;",
                              "public Button CloseButton;",
                              "public TextMeshProUGUI NftNameText;",
                              "public Button SelectButton;",
                              "public Button TransferButton;",
                              "public Nft currentNft;",
                              "private Action<Nft> onNftSelected;",
                              "private void Awake()",
                              "{",
                              "ServiceFactory.RegisterSingleton(this);",
                              "Root.gameObject.SetActive(false);",
                              "CloseButton.onClick.AddListener(OnCloseButtonClicked);",
                              "SelectButton.onClick.AddListener(OnSelectClicked);",
                              "TransferButton.onClick.AddListener(OnTransferClicked);",
                              "}",
                              "private void OnTransferClicked()",
                              "{",
                              "//ServiceFactory.Resolve<UiService>().OpenPopup(UiService.ScreenType.TransferNftPopup, new TransferNftPopupUiData(currentNft));",
                              "Close();",
                              "}",
                              "private void OnSelectClicked()",
                              "{",
                              "ServiceFactory.Resolve<NftService>().SelectNft(currentNft);",
                              "Debug.Log($\\"{currentNft.metaplexData.data.offchainData.name} selected\\");",
                              "onNftSelected?.Invoke(currentNft);",
                              "Close();",
                              "}",
                              "private void OnCloseButtonClicked()",
                              "{",
                              "Close();",
                              "}",
                              "private void Close()",
                              "{",
                              "Root.gameObject.SetActive(false);",
                              "}",
                              "public void Open(NftItemView nftItemView, Action<Nft> onNftSelected)",
                              "{",
                              "this.onNftSelected = onNftSelected;",
                              "currentNft = nftItemView.CurrentMetaPlexNFt;",
                              "Root.gameObject.SetActive(true);",
                              "NftNameText.text = nftItemView.CurrentMetaPlexNFt.metaplexData.data.offchainData.name;",
                              "transform.position = nftItemView.transform.position;",
                              "}",
                              "}",
                              "}"
                            ]
                          },
                          "NftContextMenu.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/NftContextMenu.cs.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "NftItemListView.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/NftItemListView.cs",
                            "isBinary": false,
                            "content": [
                              "using System;",
                              "using System.Collections.Generic;",
                              "using Frictionless;",
                              "using Game.Scripts.Ui;",
                              "using Solana.Unity.SDK.Nft;",
                              "using Services;",
                              "using UnityEngine;",
                              "// Shows a list of all nfts in the NftService",
                              "public class NftItemListView : MonoBehaviour",
                              "{",
                              "public GameObject ItemRoot;",
                              "public NftItemView itemPrefab;",
                              "public string FilterSymbol;",
                              "public string BlackList;",
                              "private List<NftItemView> allNftItemViews = new List<NftItemView>();",
                              "private Action<Nft> onNftSelected;",
                              "public void OnEnable()",
                              "{",
                              "UpdateContent();",
                              "}",
                              "public void Start()",
                              "{",
                              "MessageRouter.AddHandler<NftSelectedMessage>(OnNFtSelectedMessage);",
                              "}",
                              "public void SetData(Action<Nft> onNftSelected)",
                              "{",
                              "this.onNftSelected = onNftSelected;",
                              "}",
                              "private void OnNFtSelectedMessage(NftSelectedMessage message)",
                              "{",
                              "UpdateContent();",
                              "}",
                              "public void UpdateContent()",
                              "{",
                              "var nftService = ServiceFactory.Resolve<NftService>();",
                              "if (nftService == null)",
                              "{",
                              "return;",
                              "}",
                              "foreach (Nft nft in nftService.LoadedNfts)",
                              "{",
                              "AddNFt(nft);",
                              "}",
                              "List<NftItemView> notExistingNfts = new List<NftItemView>();",
                              "foreach (NftItemView nftItemView in allNftItemViews)",
                              "{",
                              "bool existsInWallet = false;",
                              "foreach (Nft walletNft in nftService.LoadedNfts)",
                              "{",
                              "if (nftItemView.CurrentMetaPlexNFt.metaplexData.data.mint == walletNft.metaplexData.data.mint)",
                              "{",
                              "existsInWallet = true;",
                              "break;",
                              "}",
                              "}",
                              "if (!existsInWallet)",
                              "{",
                              "notExistingNfts.Add(nftItemView);",
                              "}",
                              "}",
                              "for (var index = notExistingNfts.Count - 1; index >= 0; index--)",
                              "{",
                              "var nftView = notExistingNfts[index];",
                              "allNftItemViews.Remove(nftView);",
                              "Destroy(nftView.gameObject);",
                              "}",
                              "}",
                              "public void AddNFt(Nft metaPlexNFt)",
                              "{",
                              "foreach (var nft in allNftItemViews)",
                              "{",
                              "if (nft.CurrentMetaPlexNFt.metaplexData.data.mint == metaPlexNFt.metaplexData.data.mint)",
                              "{",
                              "nft.SetData(metaPlexNFt, OnItemClicked);",
                              "return;",
                              "}",
                              "}",
                              "InstantiateListNftItem(metaPlexNFt);",
                              "}",
                              "private void InstantiateListNftItem(Nft nft)",
                              "{",
                              "if (string.IsNullOrEmpty(nft.metaplexData.data.mint))",
                              "{",
                              "return;",
                              "}",
                              "if (!string.IsNullOrEmpty(FilterSymbol) && nft.metaplexData.data.offchainData.symbol != FilterSymbol)",
                              "{",
                              "return;",
                              "}",
                              "if (!string.IsNullOrEmpty(BlackList) && nft.metaplexData.data.offchainData.symbol == BlackList)",
                              "{",
                              "return;",
                              "}",
                              "NftItemView nftItemView = Instantiate(itemPrefab, ItemRoot.transform);",
                              "nftItemView.SetData(nft, OnItemClicked);",
                              "allNftItemViews.Add(nftItemView);",
                              "}",
                              "private void OnItemClicked(NftItemView itemView)",
                              "{",
                              "ServiceFactory.Resolve<NftContextMenu>().Open(itemView, onNftSelected);",
                              "}",
                              "}"
                            ]
                          },
                          "NftItemListView.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/NftItemListView.cs.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "NftItemView.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/NftItemView.cs",
                            "isBinary": false,
                            "content": [
                              "using System;",
                              "using Frictionless;",
                              "using Services;",
                              "using Solana.Unity.SDK.Nft;",
                              "using TMPro;",
                              "using UnityEngine;",
                              "using UnityEngine.UI;",
                              "namespace Game.Scripts.Ui",
                              "{",
                              "/// <summary>",
                              "/// Show the image of a given Nft and can have a click handler",
                              "/// </summary>",
                              "public class NftItemView : MonoBehaviour",
                              "{",
                              "public Nft CurrentMetaPlexNFt;",
                              "public RawImage Icon;",
                              "public TextMeshProUGUI Headline;",
                              "public TextMeshProUGUI Description;",
                              "public Button Button;",
                              "public GameObject SelectionGameObject;",
                              "public GameObject IsLoadingDataRoot;",
                              "public GameObject LoadingErrorRoot;",
                              "private Action<NftItemView> onButtonClickedAction;",
                              "public void SetData(Nft nft, Action<NftItemView> onButtonClicked)",
                              "{",
                              "if (nft == null)",
                              "{",
                              "return;",
                              "}",
                              "CurrentMetaPlexNFt = nft;",
                              "Icon.gameObject.SetActive(false);",
                              "LoadingErrorRoot.gameObject.SetActive(false);",
                              "IsLoadingDataRoot.gameObject.SetActive(true);",
                              "IsLoadingDataRoot.gameObject.SetActive(false);",
                              "if (nft.metaplexData.nftImage != null)",
                              "{",
                              "Icon.gameObject.SetActive(true);",
                              "Icon.texture = nft.metaplexData.nftImage.file;",
                              "}",
                              "var nftService = ServiceFactory.Resolve<NftService>();",
                              "SelectionGameObject.gameObject.SetActive(nftService.IsNftSelected(nft));",
                              "if (nft.metaplexData.data.offchainData != null)",
                              "{",
                              "Description.text = nft.metaplexData.data.offchainData.description;",
                              "Headline.text = nft.metaplexData.data.offchainData.name;",
                              "}",
                              "Button.onClick.AddListener(OnButtonClicked);",
                              "onButtonClickedAction = onButtonClicked;",
                              "}",
                              "private void OnButtonClicked()",
                              "{",
                              "onButtonClickedAction?.Invoke(this);",
                              "}",
                              "}",
                              "}"
                            ]
                          },
                          "NftItemView.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/NftItemView.cs.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "NftListPopup.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/NftListPopup.cs",
                            "isBinary": false,
                            "content": [
                              "using Frictionless;",
                              "using Game.Scripts.Ui;",
                              "using Services;",
                              "using UnityEngine;",
                              "using UnityEngine.UI;",
                              "/// <summary>",
                              "/// Screen that loads all NFTs when opened",
                              "/// </summary>",
                              "public class NftListPopup : BasePopup",
                              "{",
                              "public Button GetNFtsDataButton;",
                              "public Button MintInAppButton;",
                              "public NftItemListView NftItemListView;",
                              "public GameObject YouDontOwnANftOfCollectionRoot;",
                              "public GameObject YouOwnANftOfCollectionRoot;",
                              "public GameObject LoadingSpinner;",
                              "public GameObject MinitingBlocker;",
                              "void Start()",
                              "{",
                              "GetNFtsDataButton.onClick.AddListener(OnGetNftButtonClicked);",
                              "MintInAppButton.onClick.AddListener(OnMintInAppButtonClicked);",
                              "MessageRouter",
                              ".AddHandler<NftLoadingStartedMessage>(OnNftLoadingStartedMessage);",
                              "MessageRouter",
                              ".AddHandler<NftLoadingFinishedMessage>(OnNftLoadingFinishedMessage);",
                              "MessageRouter",
                              ".AddHandler<NftLoadedMessage>(OnNftLoadedMessage);",
                              "MessageRouter",
                              ".AddHandler<NftMintFinishedMessage>(OnNftMintFinishedMessage);",
                              "MessageRouter",
                              ".AddHandler<NftSelectedMessage>(OnNftSelectedMessage);",
                              "}",
                              "private void OnNftSelectedMessage(NftSelectedMessage obj)",
                              "{",
                              "Close();",
                              "}",
                              "public override void Open(UiService.UiData uiData)",
                              "{",
                              "var nftListPopupUiData = (uiData as NftListPopupUiData);",
                              "if (nftListPopupUiData == null)",
                              "{",
                              "Debug.LogError(\\"Wrong ui data for nft list popup\\");",
                              "return;",
                              "}",
                              "NftItemListView.UpdateContent();",
                              "NftItemListView.SetData(nft =>",
                              "{",
                              "// when an nft was selected we want to close the popup so we can start the game.",
                              "Close();",
                              "});",
                              "UpdateOwnCollectionStatus();",
                              "base.Open(uiData);",
                              "}",
                              "private async void OnMintInAppButtonClicked()",
                              "{",
                              "if (MinitingBlocker != null)",
                              "{",
                              "MinitingBlocker.gameObject.SetActive(true);",
                              "}",
                              "// Mint a pirate ship",
                              "var signature = await ServiceFactory.Resolve<NftMintingService>()",
                              ".MintNftWithMetaData(",
                              "\\"https://shdw-drive.genesysgo.net/QZNGUVnJgkw6sGQddwZVZkhyUWSUXAjXF9HQAjiVZ55/DummyPirateShipMetaData.json\\",",
                              "\\"Simple Pirate Ship\\", \\"Pirate\\", success=>",
                              "{",
                              "if (MinitingBlocker != null)",
                              "{",
                              "MinitingBlocker.gameObject.SetActive(false);",
                              "}",
                              "if (success)",
                              "{",
                              "RequestNfts();",
                              "}",
                              "});",
                              "Debug.Log(\\"Mint signature: \\" + signature);",
                              "}",
                              "private void OnNftLoadedMessage(NftLoadedMessage message)",
                              "{",
                              "NftItemListView.AddNFt(message.Nft);",
                              "UpdateOwnCollectionStatus();",
                              "}",
                              "private bool UpdateOwnCollectionStatus()",
                              "{",
                              "var nftService = ServiceFactory.Resolve<NftService>();",
                              "bool ownsAndNftOfAuthority = nftService.OwnsNftByCreator(NftService.NftCreator);",
                              "YouDontOwnANftOfCollectionRoot.gameObject.SetActive(!ownsAndNftOfAuthority);",
                              "YouOwnANftOfCollectionRoot.gameObject.SetActive(ownsAndNftOfAuthority);",
                              "return ownsAndNftOfAuthority;",
                              "}",
                              "private void OnGetNftButtonClicked()",
                              "{",
                              "RequestNfts();",
                              "}",
                              "private void OnNftLoadingStartedMessage(NftLoadingStartedMessage message)",
                              "{",
                              "GetNFtsDataButton.interactable = false;",
                              "}",
                              "private void OnNftLoadingFinishedMessage(NftLoadingFinishedMessage message)",
                              "{",
                              "NftItemListView.UpdateContent();",
                              "}",
                              "private void OnNftMintFinishedMessage(NftMintFinishedMessage message)",
                              "{",
                              "RequestNfts();",
                              "}",
                              "private void Update()",
                              "{",
                              "var nftService = ServiceFactory.Resolve<NftService>();",
                              "if (nftService != null)",
                              "{",
                              "GetNFtsDataButton.interactable = !nftService.IsLoadingTokenAccounts;",
                              "LoadingSpinner.gameObject.SetActive(nftService.IsLoadingTokenAccounts);",
                              "}",
                              "}",
                              "private void RequestNfts()",
                              "{",
                              "ServiceFactory.Resolve<NftService>().LoadNfts();",
                              "}",
                              "}"
                            ]
                          },
                          "NftListPopup.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/NftListPopup.cs.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "NftListPopupUiData.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/NftListPopupUiData.cs",
                            "isBinary": false,
                            "content": [
                              "using Solana.Unity.SDK;",
                              "using Services;",
                              "public class NftListPopupUiData : UiService.UiData",
                              "{",
                              "public bool RequestNfts;",
                              "public WalletBase Wallet;",
                              "public NftListPopupUiData(bool requestNfts, WalletBase wallet)",
                              "{",
                              "RequestNfts = requestNfts;",
                              "Wallet = wallet;",
                              "}",
                              "}"
                            ]
                          },
                          "NftListPopupUiData.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/NftListPopupUiData.cs.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "SafeArea.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/SafeArea.cs",
                            "isBinary": false,
                            "content": [
                              "using UnityEngine;",
                              "namespace Game.Scripts.Ui",
                              "{",
                              "/// <summary>",
                              "/// Safe area implementation for notched mobile devices. Usage:",
                              "///  (1) Add this component to the top level of any GUI panel.",
                              "///  (2) If the panel uses a full screen background image, then create an immediate child and put the component on that instead, with all other elements childed below it.",
                              "///      This will allow the background image to stretch to the full extents of the screen behind the notch, which looks nicer.",
                              "///  (3) For other cases that use a mixture of full horizontal and vertical background stripes, use the Conform X & Y controls on separate elements as needed.",
                              "/// </summary>",
                              "public class SafeArea : MonoBehaviour",
                              "{",
                              "#region Simulations",
                              "/// <summary>",
                              "/// Simulation device that uses safe area due to a physical notch or software home bar. For use in Editor only.",
                              "/// </summary>",
                              "public enum SimDevice",
                              "{",
                              "/// <summary>",
                              "/// Don't use a simulated safe area - GUI will be full screen as normal.",
                              "/// </summary>",
                              "None,",
                              "/// <summary>",
                              "/// Simulate the iPhone X and Xs (identical safe areas).",
                              "/// </summary>",
                              "iPhoneX,",
                              "/// <summary>",
                              "/// Simulate the iPhone Xs Max and XR (identical safe areas).",
                              "/// </summary>",
                              "iPhoneXsMax,",
                              "/// <summary>",
                              "/// Simulate the Google Pixel 3 XL using landscape left.",
                              "/// </summary>",
                              "Pixel3XL_LSL,",
                              "/// <summary>",
                              "/// Simulate the Google Pixel 3 XL using landscape right.",
                              "/// </summary>",
                              "Pixel3XL_LSR",
                              "}",
                              "/// <summary>",
                              "/// Simulation mode for use in editor only. This can be edited at runtime to toggle between different safe areas.",
                              "/// </summary>",
                              "public static SimDevice Sim = SimDevice.None;",
                              "/// <summary>",
                              "/// Normalised safe areas for iPhone X with Home indicator (ratios are identical to Xs, 11 Pro). Absolute values:",
                              "///  PortraitU x=0, y=102, w=1125, h=2202 on full extents w=1125, h=2436;",
                              "///  PortraitD x=0, y=102, w=1125, h=2202 on full extents w=1125, h=2436 (not supported, remains in Portrait Up);",
                              "///  LandscapeL x=132, y=63, w=2172, h=1062 on full extents w=2436, h=1125;",
                              "///  LandscapeR x=132, y=63, w=2172, h=1062 on full extents w=2436, h=1125.",
                              "///  Aspect Ratio: ~19.5:9.",
                              "/// </summary>",
                              "Rect[] NSA_iPhoneX = new Rect[]",
                              "{",
                              "new Rect(0f, 102f / 2436f, 1f, 2202f / 2436f), // Portrait",
                              "new Rect(132f / 2436f, 63f / 1125f, 2172f / 2436f, 1062f / 1125f) // Landscape",
                              "};",
                              "/// <summary>",
                              "/// Normalised safe areas for iPhone Xs Max with Home indicator (ratios are identical to XR, 11, 11 Pro Max). Absolute values:",
                              "///  PortraitU x=0, y=102, w=1242, h=2454 on full extents w=1242, h=2688;",
                              "///  PortraitD x=0, y=102, w=1242, h=2454 on full extents w=1242, h=2688 (not supported, remains in Portrait Up);",
                              "///  LandscapeL x=132, y=63, w=2424, h=1179 on full extents w=2688, h=1242;",
                              "///  LandscapeR x=132, y=63, w=2424, h=1179 on full extents w=2688, h=1242.",
                              "///  Aspect Ratio: ~19.5:9.",
                              "/// </summary>",
                              "Rect[] NSA_iPhoneXsMax = new Rect[]",
                              "{",
                              "new Rect(0f, 102f / 2688f, 1f, 2454f / 2688f), // Portrait",
                              "new Rect(132f / 2688f, 63f / 1242f, 2424f / 2688f, 1179f / 1242f) // Landscape",
                              "};",
                              "/// <summary>",
                              "/// Normalised safe areas for Pixel 3 XL using landscape left. Absolute values:",
                              "///  PortraitU x=0, y=0, w=1440, h=2789 on full extents w=1440, h=2960;",
                              "///  PortraitD x=0, y=0, w=1440, h=2789 on full extents w=1440, h=2960;",
                              "///  LandscapeL x=171, y=0, w=2789, h=1440 on full extents w=2960, h=1440;",
                              "///  LandscapeR x=0, y=0, w=2789, h=1440 on full extents w=2960, h=1440.",
                              "///  Aspect Ratio: 18.5:9.",
                              "/// </summary>",
                              "Rect[] NSA_Pixel3XL_LSL = new Rect[]",
                              "{",
                              "new Rect(0f, 0f, 1f, 2789f / 2960f), // Portrait",
                              "new Rect(0f, 0f, 2789f / 2960f, 1f) // Landscape",
                              "};",
                              "/// <summary>",
                              "/// Normalised safe areas for Pixel 3 XL using landscape right. Absolute values and aspect ratio same as above.",
                              "/// </summary>",
                              "Rect[] NSA_Pixel3XL_LSR = new Rect[]",
                              "{",
                              "new Rect(0f, 0f, 1f, 2789f / 2960f), // Portrait",
                              "new Rect(171f / 2960f, 0f, 2789f / 2960f, 1f) // Landscape",
                              "};",
                              "#endregion",
                              "RectTransform Panel;",
                              "Rect LastSafeArea = new Rect(0, 0, 0, 0);",
                              "Vector2Int LastScreenSize = new Vector2Int(0, 0);",
                              "ScreenOrientation LastOrientation = ScreenOrientation.AutoRotation;",
                              "[SerializeField]",
                              "bool ConformX = true; // Conform to screen safe area on X-axis (default true, disable to ignore)",
                              "[SerializeField]",
                              "bool ConformY = true; // Conform to screen safe area on Y-axis (default true, disable to ignore)",
                              "[SerializeField]",
                              "bool Logging = false; // Conform to screen safe area on Y-axis (default true, disable to ignore)",
                              "void Awake()",
                              "{",
                              "Panel = GetComponent<RectTransform>();",
                              "if (Panel == null)",
                              "{",
                              "Debug.LogError(\\"Cannot apply safe area - no RectTransform found on \\" + name);",
                              "Destroy(gameObject);",
                              "}",
                              "Refresh();",
                              "}",
                              "void Update()",
                              "{",
                              "Refresh();",
                              "}",
                              "void Refresh()",
                              "{",
                              "Rect safeArea = GetSafeArea();",
                              "if (safeArea != LastSafeArea",
                              "|| Screen.width != LastScreenSize.x",
                              "|| Screen.height != LastScreenSize.y",
                              "|| Screen.orientation != LastOrientation)",
                              "{",
                              "// Fix for having auto-rotate off and manually forcing a screen orientation.",
                              "// See https://forum.unity.com/threads/569236/#post-4473253 and https://forum.unity.com/threads/569236/page-2#post-5166467",
                              "LastScreenSize.x = Screen.width;",
                              "LastScreenSize.y = Screen.height;",
                              "LastOrientation = Screen.orientation;",
                              "ApplySafeArea(safeArea);",
                              "}",
                              "}",
                              "Rect GetSafeArea()",
                              "{",
                              "Rect safeArea = Screen.safeArea;",
                              "if (Application.isEditor && Sim != SimDevice.None)",
                              "{",
                              "Rect nsa = new Rect(0, 0, Screen.width, Screen.height);",
                              "switch (Sim)",
                              "{",
                              "case SimDevice.iPhoneX:",
                              "if (Screen.height > Screen.width) // Portrait",
                              "nsa = NSA_iPhoneX[0];",
                              "else // Landscape",
                              "nsa = NSA_iPhoneX[1];",
                              "break;",
                              "case SimDevice.iPhoneXsMax:",
                              "if (Screen.height > Screen.width) // Portrait",
                              "nsa = NSA_iPhoneXsMax[0];",
                              "else // Landscape",
                              "nsa = NSA_iPhoneXsMax[1];",
                              "break;",
                              "case SimDevice.Pixel3XL_LSL:",
                              "if (Screen.height > Screen.width) // Portrait",
                              "nsa = NSA_Pixel3XL_LSL[0];",
                              "else // Landscape",
                              "nsa = NSA_Pixel3XL_LSL[1];",
                              "break;",
                              "case SimDevice.Pixel3XL_LSR:",
                              "if (Screen.height > Screen.width) // Portrait",
                              "nsa = NSA_Pixel3XL_LSR[0];",
                              "else // Landscape",
                              "nsa = NSA_Pixel3XL_LSR[1];",
                              "break;",
                              "default:",
                              "break;",
                              "}",
                              "safeArea = new Rect(Screen.width * nsa.x, Screen.height * nsa.y, Screen.width * nsa.width,",
                              "Screen.height * nsa.height);",
                              "}",
                              "return safeArea;",
                              "}",
                              "void ApplySafeArea(Rect r)",
                              "{",
                              "LastSafeArea = r;",
                              "// Ignore x-axis?",
                              "if (!ConformX)",
                              "{",
                              "r.x = 0;",
                              "r.width = Screen.width;",
                              "}",
                              "// Ignore y-axis?",
                              "if (!ConformY)",
                              "{",
                              "r.y = 0;",
                              "r.height = Screen.height;",
                              "}",
                              "// Check for invalid screen startup state on some Samsung devices (see below)",
                              "if (Screen.width > 0 && Screen.height > 0)",
                              "{",
                              "// Convert safe area rectangle from absolute pixels to normalised anchor coordinates",
                              "Vector2 anchorMin = r.position;",
                              "Vector2 anchorMax = r.position + r.size;",
                              "anchorMin.x /= Screen.width;",
                              "anchorMin.y /= Screen.height;",
                              "anchorMax.x /= Screen.width;",
                              "anchorMax.y /= Screen.height;",
                              "// Fix for some Samsung devices (e.g. Note 10+, A71, S20) where Refresh gets called twice and the first time returns NaN anchor coordinates",
                              "// See https://forum.unity.com/threads/569236/page-2#post-6199352",
                              "if (anchorMin.x >= 0 && anchorMin.y >= 0 && anchorMax.x >= 0 && anchorMax.y >= 0)",
                              "{",
                              "Panel.anchorMin = anchorMin;",
                              "Panel.anchorMax = anchorMax;",
                              "}",
                              "}",
                              "if (Logging)",
                              "{",
                              "Debug.LogFormat(\\"New safe area applied to {0}: x={1}, y={2}, w={3}, h={4} on full extents w={5}, h={6}\\",",
                              "name, r.x, r.y, r.width, r.height, Screen.width, Screen.height);",
                              "}",
                              "}",
                              "}",
                              "}"
                            ]
                          },
                          "SafeArea.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/SafeArea.cs.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "SelectedNft.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/SelectedNft.cs",
                            "isBinary": false,
                            "content": [
                              "using System;",
                              "using Frictionless;",
                              "using Game.Scripts.Ui;",
                              "using Services;",
                              "using UnityEngine;",
                              "public class SelectedNft : MonoBehaviour",
                              "{",
                              "public NftItemView NftItemView;",
                              "private void Awake()",
                              "{",
                              "NftItemView.gameObject.SetActive(false);",
                              "}",
                              "void Start()",
                              "{",
                              "MessageRouter.AddHandler<NftSelectedMessage>(OnNftSelectedMessage);",
                              "UpdateContent();",
                              "}",
                              "private void OnDestroy()",
                              "{",
                              "MessageRouter.RemoveHandler<NftSelectedMessage>(OnNftSelectedMessage);",
                              "}",
                              "private void OnNftSelectedMessage(NftSelectedMessage message)",
                              "{",
                              "UpdateContent();",
                              "}",
                              "private void UpdateContent()",
                              "{",
                              "var nftService = ServiceFactory.Resolve<NftService>();",
                              "if (nftService != null && nftService.SelectedNft != null)",
                              "{",
                              "NftItemView.gameObject.SetActive(true);",
                              "NftItemView.SetData(nftService.SelectedNft, view => { Debug.Log(\\"Selected Nft clicked.\\"); });",
                              "}",
                              "else",
                              "{",
                              "NftItemView.gameObject.SetActive(false);",
                              "}",
                              "}",
                              "}"
                            ]
                          },
                          "SelectedNft.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/SelectedNft.cs.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "SessionPopup.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/SessionPopup.cs",
                            "isBinary": false,
                            "content": [
                              "using System;",
                              "using Services;",
                              "using Solana.Unity.SDK;",
                              "using TMPro;",
                              "using UnityEngine;",
                              "using UnityEngine.UI;",
                              "namespace Game.Scripts.Ui",
                              "{",
                              "/// <summary>",
                              "/// Screen that loads all NFTs when opened",
                              "/// </summary>",
                              "public class SessionPopup : BasePopup",
                              "{",
                              "public Button CreateSessionButton;",
                              "public Button RevokeSessionButton;",
                              "public TextMeshProUGUI SessionBalanceText;",
                              "public TextMeshProUGUI SessionExpiryText;",
                              "public GameObject LoadingSpinner;",
                              "private bool loadedNfts;",
                              "void Start()",
                              "{",
                              "CreateSessionButton.onClick.AddListener(OnCreatSessionWalletButtonClicked);",
                              "RevokeSessionButton.onClick.AddListener(OnRevokeSessionButtonClicked);",
                              "}",
                              "public override void Open(UiService.UiData uiData)",
                              "{",
                              "UpdateSessionToken();",
                              "InvokeRepeating(nameof(UpdateSessionToken), 0, 3);",
                              "base.Open(uiData);",
                              "}",
                              "public override void Close()",
                              "{",
                              "CancelInvoke();",
                              "base.Close();",
                              "}",
                              "private async void UpdateSessionToken()",
                              "{",
                              "var sessionToken = await AnchorService.Instance.RequestSessionToken();",
                              "if (sessionToken == null)",
                              "{",
                              "SessionExpiryText.text = \\"Session expired\\";",
                              "SessionBalanceText.text = \\"0 Sol\\";",
                              "RevokeSessionButton.interactable = false;",
                              "CreateSessionButton.interactable = true;",
                              "return;",
                              "}",
                              "Debug.Log(\\"Session token valid until: \\" + (new DateTime(1970, 1, 1)).AddSeconds(sessionToken.ValidUntil) + \\" Now: \\" + DateTimeOffset.UtcNow);",
                              "var isValid = sessionToken.ValidUntil > DateTimeOffset.UtcNow.ToUnixTimeSeconds();",
                              "SessionExpiryText.text = \\"Session valid until: \\" +",
                              "(new DateTime(1970, 1, 1)).AddSeconds(sessionToken.ValidUntil); //+ \\" Now: \\" + DateTimeOffset.UtcNow + \\" is valid: \\" + isValid;",
                              "RevokeSessionButton.interactable = isValid;",
                              "CreateSessionButton.interactable = !isValid;",
                              "var res = await Web3.Wallet.GetBalance(sessionToken.SessionSigner);",
                              "SessionBalanceText.text = res.ToString(\\"F3\\") + \\" Sol\\";",
                              "}",
                              "private async void OnRevokeSessionButtonClicked()",
                              "{",
                              "LoadingSpinner.gameObject.SetActive(true);",
                              "await AnchorService.Instance.RevokeSession();",
                              "LoadingSpinner.gameObject.SetActive(false);",
                              "UpdateSessionToken();",
                              "}",
                              "private async void OnCreatSessionWalletButtonClicked()",
                              "{",
                              "LoadingSpinner.gameObject.SetActive(true);",
                              "await AnchorService.Instance.CreateNewSession();",
                              "LoadingSpinner.gameObject.SetActive(false);",
                              "UpdateSessionToken();",
                              "Close();",
                              "}",
                              "}",
                              "}"
                            ]
                          },
                          "SessionPopup.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/SessionPopup.cs.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "SessionPopupUiData.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/SessionPopupUiData.cs",
                            "isBinary": false,
                            "content": [
                              "using Services;",
                              "namespace Game.Scripts.Ui",
                              "{",
                              "public class SessionPopupUiData : UiService.UiData",
                              "{",
                              "public SessionPopupUiData()",
                              "{",
                              "}",
                              "}",
                              "}"
                            ]
                          },
                          "SessionPopupUiData.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/SessionPopupUiData.cs.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "SolBalanceWidget.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/SolBalanceWidget.cs",
                            "isBinary": false,
                            "content": [
                              "using System;",
                              "using System.Collections;",
                              "using codebase.utility;",
                              "using Solana.Unity.SDK;",
                              "using TMPro;",
                              "using UnityEngine;",
                              "using UnityEngine.UI;",
                              "namespace Game.Scripts.Ui",
                              "{",
                              "/// <summary>",
                              "/// Shows the sol balance of the connected wallet. Should be updated at certain points, after transactions for example.",
                              "/// </summary>",
                              "public class SolBalanceWidget : MonoBehaviour",
                              "{",
                              "public TextMeshProUGUI SolBalance;",
                              "public TextMeshProUGUI SolChangeText;",
                              "public TextMeshProUGUI PublicKey;",
                              "public Button CopyAddressButton;",
                              "private double lamportsChange;",
                              "private Coroutine disableSolChangeCoroutine;",
                              "private double currentLamports;",
                              "private void Awake()",
                              "{",
                              "if (CopyAddressButton)",
                              "{",
                              "CopyAddressButton.onClick.AddListener(OnCopyClicked);",
                              "}",
                              "}",
                              "private void OnCopyClicked()",
                              "{",
                              "Clipboard.Copy(Web3.Account.PublicKey);",
                              "}",
                              "private void OnEnable()",
                              "{",
                              "Web3.OnBalanceChange += OnSolBalanceChangedMessage;",
                              "}",
                              "private void OnDisable()",
                              "{",
                              "Web3.OnBalanceChange -= OnSolBalanceChangedMessage;",
                              "}",
                              "private void UpdateContent()",
                              "{",
                              "SolBalance.text = currentLamports.ToString(\\"F2\\") + \\" sol\\";",
                              "if (PublicKey != null)",
                              "{",
                              "PublicKey.text = Web3.Account.PublicKey;",
                              "}",
                              "}",
                              "private void OnSolBalanceChangedMessage(double newLamports)",
                              "{",
                              "double balanceChange = newLamports - currentLamports;",
                              "if (balanceChange != 0 && Math.Abs(currentLamports - newLamports) > 0.00000001)",
                              "{",
                              "lamportsChange += balanceChange;",
                              "if (balanceChange > 0)",
                              "{",
                              "if (disableSolChangeCoroutine != null)",
                              "{",
                              "StopCoroutine(disableSolChangeCoroutine);",
                              "}",
                              "SolChangeText.text = \\"<color=green>+\\" + lamportsChange.ToString(\\"F2\\") + \\"</color> \\";",
                              "disableSolChangeCoroutine = StartCoroutine(DisableSolChangeDelayed());",
                              "}",
                              "else",
                              "{",
                              "if (balanceChange < -0.0001)",
                              "{",
                              "if (disableSolChangeCoroutine != null)",
                              "{",
                              "StopCoroutine(disableSolChangeCoroutine);",
                              "}",
                              "SolChangeText.text = \\"<color=red>\\" + lamportsChange.ToString(\\"F2\\") + \\"</color> \\";",
                              "disableSolChangeCoroutine = StartCoroutine(DisableSolChangeDelayed());",
                              "}",
                              "}",
                              "currentLamports = newLamports;",
                              "UpdateContent();",
                              "}",
                              "else",
                              "{",
                              "currentLamports = newLamports;",
                              "UpdateContent();",
                              "}",
                              "}",
                              "private IEnumerator DisableSolChangeDelayed()",
                              "{",
                              "SolChangeText.gameObject.SetActive(true);",
                              "yield return new WaitForSeconds(3);",
                              "lamportsChange = 0;",
                              "SolChangeText.gameObject.SetActive(false);",
                              "disableSolChangeCoroutine = null;",
                              "}",
                              "}",
                              "}"
                            ]
                          },
                          "SolBalanceWidget.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/SolBalanceWidget.cs.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "TokenPanel.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/TokenPanel.cs",
                            "isBinary": false,
                            "content": [
                              "using Frictionless;",
                              "using Solana.Unity.Programs;",
                              "using Solana.Unity.Rpc.Types;",
                              "using Solana.Unity.SDK;",
                              "using Solana.Unity.Wallet;",
                              "using TMPro;",
                              "using UnityEngine;",
                              "namespace Game.Scripts.Ui",
                              "{",
                              "/// <summary>",
                              "/// Shows the amount of the token \\"TokenMintAddress\\" from the connected Wallet.",
                              "/// </summary>",
                              "public class TokenPanel : MonoBehaviour",
                              "{",
                              "public TextMeshProUGUI TokenAmount;",
                              "public string",
                              "TokenMintAdress =",
                              "\\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\\"; // Replace with whatever token you like. (Default USDC)",
                              "private PublicKey _associatedTokenAddress;",
                              "void Awake()",
                              "{",
                              "Web3.OnLogin += onLogin;",
                              "UpdateAndSubscribeToTokenAccount();",
                              "}",
                              "void OnDestroy()",
                              "{",
                              "Web3.OnLogin -= onLogin;",
                              "}",
                              "private void onLogin(Account account)",
                              "{",
                              "UpdateAndSubscribeToTokenAccount();",
                              "}",
                              "private async void UpdateAndSubscribeToTokenAccount()",
                              "{",
                              "if (Web3.Instance == null || Web3.Instance.WalletBase.Account == null)",
                              "{",
                              "return;",
                              "}",
                              "var wallet = Web3.Instance.WalletBase;",
                              "if (wallet != null && wallet.Account.PublicKey != null)",
                              "{",
                              "_associatedTokenAddress =",
                              "AssociatedTokenAccountProgram.DeriveAssociatedTokenAccount(wallet.Account.PublicKey, new PublicKey(TokenMintAdress));",
                              "}",
                              "if (_associatedTokenAddress == null)",
                              "{",
                              "return;",
                              "}",
                              "await Web3.WsRpc.SubscribeTokenAccountAsync(_associatedTokenAddress, (state, value) =>",
                              "{",
                              "TokenAmount.text = value.Value.Data.Parsed.Info.TokenAmount.UiAmountString;",
                              "Debug.Log(\\"Token balance (Socket Token): \\" + value.Value.Data.Parsed.Info.TokenAmount.UiAmountString);",
                              "}, Commitment.Confirmed);",
                              "var tokenBalance = await wallet.ActiveRpcClient.GetTokenAccountBalanceAsync(_associatedTokenAddress, Commitment.Confirmed);",
                              "if (tokenBalance.Result == null || tokenBalance.Result.Value == null)",
                              "{",
                              "TokenAmount.text = \\"0\\";",
                              "return;",
                              "}",
                              "TokenAmount.text = tokenBalance.Result.Value.UiAmountString;",
                              "}",
                              "}",
                              "}"
                            ]
                          },
                          "TokenPanel.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/TokenPanel.cs.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "UiService.cs": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/UiService.cs",
                            "isBinary": false,
                            "content": [
                              "using System;",
                              "using System.Collections;",
                              "using System.Collections.Generic;",
                              "using Frictionless;",
                              "using Game.Scripts.Ui;",
                              "using UnityEngine;",
                              "namespace Services",
                              "{",
                              "public class UiService : MonoBehaviour, IMultiSceneSingleton",
                              "{",
                              "[Serializable]",
                              "public class UiRegistration",
                              "{",
                              "public BasePopup PopupPrefab;",
                              "public ScreenType ScreenType;",
                              "}",
                              "public enum ScreenType",
                              "{",
                              "TransferNftPopup = 0,",
                              "NftListPopup = 1,",
                              "SessionPopup = 2",
                              "}",
                              "public class UiData",
                              "{",
                              "}",
                              "public List<UiRegistration> UiRegistrations = new List<UiRegistration>();",
                              "private readonly Dictionary<ScreenType, BasePopup> openPopups = new Dictionary<ScreenType, BasePopup>();",
                              "public void Awake()",
                              "{",
                              "ServiceFactory.RegisterSingleton(this);",
                              "}",
                              "public void OpenPopup(ScreenType screenType, UiData uiData)",
                              "{",
                              "if (openPopups.TryGetValue(screenType, out BasePopup basePopup))",
                              "{",
                              "basePopup.Open(uiData);",
                              "return;",
                              "}",
                              "foreach (var uiRegistration in UiRegistrations)",
                              "{",
                              "if (uiRegistration.ScreenType == screenType)",
                              "{",
                              "BasePopup newPopup = Instantiate(uiRegistration.PopupPrefab);",
                              "openPopups.Add(screenType, newPopup);",
                              "newPopup.Open(uiData);",
                              "return;",
                              "}",
                              "}",
                              "Debug.LogWarning(\\"There was no screen registration for \\" + screenType);",
                              "}",
                              "public IEnumerator HandleNewSceneLoaded()",
                              "{",
                              "openPopups.Clear();",
                              "yield return null;",
                              "}",
                              "}",
                              "}"
                            ]
                          },
                          "UiService.cs.meta": {
                            "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui/UiService.cs.meta",
                            "isBinary": true,
                            "content": null
                          }
                        }
                      },
                      "Ui.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Scripts/Ui.meta",
                        "isBinary": true,
                        "content": null
                      }
                    }
                  },
                  "Scripts.meta": {
                    "path": "./unity/Lumberjack/Assets/Game/Scripts.meta",
                    "isBinary": true,
                    "content": null
                  },
                  "Sprites": {
                    "path": "./unity/Lumberjack/Assets/Game/Sprites",
                    "children": {
                      "background.png": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/background.png",
                        "isBinary": true,
                        "content": null
                      },
                      "background.png.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/background.png.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "beaver.png": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/beaver.png",
                        "isBinary": true,
                        "content": null
                      },
                      "beaver.png.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/beaver.png.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "icon_energy.png": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/icon_energy.png",
                        "isBinary": true,
                        "content": null
                      },
                      "icon_energy.png.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/icon_energy.png.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "icon_solana.png": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/icon_solana.png",
                        "isBinary": true,
                        "content": null
                      },
                      "icon_solana.png.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/icon_solana.png.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "icon_usdc.png": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/icon_usdc.png",
                        "isBinary": true,
                        "content": null
                      },
                      "icon_usdc.png.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/icon_usdc.png.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "icon_wood.png": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/icon_wood.png",
                        "isBinary": true,
                        "content": null
                      },
                      "icon_wood.png.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/icon_wood.png.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "tree.png": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/tree.png",
                        "isBinary": true,
                        "content": null
                      },
                      "tree.png.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/tree.png.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "ui_close_button.png": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/ui_close_button.png",
                        "isBinary": true,
                        "content": null
                      },
                      "ui_close_button.png.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/ui_close_button.png.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "ui_default_button.png": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/ui_default_button.png",
                        "isBinary": true,
                        "content": null
                      },
                      "ui_default_button.png.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/ui_default_button.png.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "ui_element_panel_rect.png": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/ui_element_panel_rect.png",
                        "isBinary": true,
                        "content": null
                      },
                      "ui_element_panel_rect.png.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/ui_element_panel_rect.png.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "ui_panel.png": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/ui_panel.png",
                        "isBinary": true,
                        "content": null
                      },
                      "ui_panel.png.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/ui_panel.png.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "ui_spinner.png": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/ui_spinner.png",
                        "isBinary": true,
                        "content": null
                      },
                      "ui_spinner.png.meta": {
                        "path": "./unity/Lumberjack/Assets/Game/Sprites/ui_spinner.png.meta",
                        "isBinary": true,
                        "content": null
                      }
                    }
                  },
                  "Sprites.meta": {
                    "path": "./unity/Lumberjack/Assets/Game/Sprites.meta",
                    "isBinary": true,
                    "content": null
                  }
                }
              },
              "Game.meta": {
                "path": "./unity/Lumberjack/Assets/Game.meta",
                "isBinary": true,
                "content": null
              },
              "Resources": {
                "path": "./unity/Lumberjack/Assets/Resources",
                "children": {
                  "DOTweenSettings.asset": {
                    "path": "./unity/Lumberjack/Assets/Resources/DOTweenSettings.asset",
                    "isBinary": true,
                    "content": null
                  },
                  "DOTweenSettings.asset.meta": {
                    "path": "./unity/Lumberjack/Assets/Resources/DOTweenSettings.asset.meta",
                    "isBinary": true,
                    "content": null
                  },
                  "SolanaUnitySDK": {
                    "path": "./unity/Lumberjack/Assets/Resources/SolanaUnitySDK",
                    "children": {
                      "WalletAdapterButton.prefab": {
                        "path": "./unity/Lumberjack/Assets/Resources/SolanaUnitySDK/WalletAdapterButton.prefab",
                        "isBinary": true,
                        "content": null
                      },
                      "WalletAdapterButton.prefab.meta": {
                        "path": "./unity/Lumberjack/Assets/Resources/SolanaUnitySDK/WalletAdapterButton.prefab.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "WalletAdapterUI.prefab": {
                        "path": "./unity/Lumberjack/Assets/Resources/SolanaUnitySDK/WalletAdapterUI.prefab",
                        "isBinary": true,
                        "content": null
                      },
                      "WalletAdapterUI.prefab.meta": {
                        "path": "./unity/Lumberjack/Assets/Resources/SolanaUnitySDK/WalletAdapterUI.prefab.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "[WalletController].prefab": {
                        "path": "./unity/Lumberjack/Assets/Resources/SolanaUnitySDK/[WalletController].prefab",
                        "isBinary": true,
                        "content": null
                      },
                      "[WalletController].prefab.meta": {
                        "path": "./unity/Lumberjack/Assets/Resources/SolanaUnitySDK/[WalletController].prefab.meta",
                        "isBinary": true,
                        "content": null
                      }
                    }
                  },
                  "SolanaUnitySDK.meta": {
                    "path": "./unity/Lumberjack/Assets/Resources/SolanaUnitySDK.meta",
                    "isBinary": true,
                    "content": null
                  }
                }
              },
              "Resources.meta": {
                "path": "./unity/Lumberjack/Assets/Resources.meta",
                "isBinary": true,
                "content": null
              },
              "Socket": {
                "path": "./unity/Lumberjack/Assets/Socket",
                "children": {
                  "SocketStatusWidget.cs": {
                    "path": "./unity/Lumberjack/Assets/Socket/SocketStatusWidget.cs",
                    "isBinary": false,
                    "content": [
                      "#pragma warning disable CS0436",
                      "using Solana.Unity.SDK;",
                      "using TMPro;",
                      "using UnityEngine;",
                      "using UnityEngine.UI;",
                      "using WebSocketState = System.Net.WebSockets.WebSocketState;",
                      "public class SocketStatusWidget : MonoBehaviour",
                      "{",
                      "public TextMeshProUGUI StatusText;",
                      "public Button ReconnectButton;",
                      "private void Awake()",
                      "{",
                      "ReconnectButton.onClick.AddListener(OnReconnectClicked);",
                      "}",
                      "private void OnReconnectClicked()",
                      "{",
                      "// Should automatically reconnect",
                      "}",
                      "void Update()",
                      "{",
                      "if (Web3.WsRpc != null)",
                      "{",
                      "StatusText.text = \\"Socket: \\" + Web3.WsRpc.State;",
                      "ReconnectButton.gameObject.SetActive(Web3.WsRpc.State == WebSocketState.Closed);",
                      "}",
                      "}",
                      "}"
                    ]
                  },
                  "SocketStatusWidget.cs.meta": {
                    "path": "./unity/Lumberjack/Assets/Socket/SocketStatusWidget.cs.meta",
                    "isBinary": true,
                    "content": null
                  }
                }
              },
              "Socket.meta": {
                "path": "./unity/Lumberjack/Assets/Socket.meta",
                "isBinary": true,
                "content": null
              },
              "TextMesh Pro": {
                "path": "./unity/Lumberjack/Assets/TextMesh Pro",
                "children": {
                  "Documentation": {
                    "path": "./unity/Lumberjack/Assets/TextMesh Pro/Documentation",
                    "children": {
                      "TextMesh Pro User Guide 2016.pdf": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Documentation/TextMesh Pro User Guide 2016.pdf",
                        "isBinary": true,
                        "content": null
                      },
                      "TextMesh Pro User Guide 2016.pdf.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Documentation/TextMesh Pro User Guide 2016.pdf.meta",
                        "isBinary": true,
                        "content": null
                      }
                    }
                  },
                  "Documentation.meta": {
                    "path": "./unity/Lumberjack/Assets/TextMesh Pro/Documentation.meta",
                    "isBinary": true,
                    "content": null
                  },
                  "Fonts": {
                    "path": "./unity/Lumberjack/Assets/TextMesh Pro/Fonts",
                    "children": {
                      "LiberationSans - OFL.txt": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Fonts/LiberationSans - OFL.txt",
                        "isBinary": false,
                        "content": [
                          "Digitized data copyright (c) 2010 Google Corporation",
                          "with Reserved Font Arimo, Tinos and Cousine.",
                          "Copyright (c) 2012 Red Hat, Inc.",
                          "with Reserved Font Name Liberation.",
                          "This Font Software is licensed under the SIL Open Font License, Version 1.1.",
                          "This license is copied below, and is also available with a FAQ at: http://scripts.sil.org/OFL",
                          "-----------------------------------------------------------",
                          "SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007",
                          "-----------------------------------------------------------",
                          "PREAMBLE",
                          "The goals of the Open Font License (OFL) are to stimulate worldwide development of collaborative font projects, to support the font creation efforts of academic and linguistic communities, and to provide a free and open framework in which fonts may be shared and improved in partnership with others.",
                          "The OFL allows the licensed fonts to be used, studied, modified and redistributed freely as long as they are not sold by themselves. The fonts, including any derivative works, can be bundled, embedded, redistributed and/or sold with any software provided that any reserved names are not used by derivative works. The fonts and derivatives, however, cannot be released under any other type of license. The requirement for fonts to remain under this license does not apply to any document created using the fonts or their derivatives.",
                          "DEFINITIONS",
                          "\\"Font Software\\" refers to the set of files released by the Copyright Holder(s) under this license and clearly marked as such. This may include source files, build scripts and documentation.",
                          "\\"Reserved Font Name\\" refers to any names specified as such after the copyright statement(s).",
                          "\\"Original Version\\" refers to the collection of Font Software components as distributed by the Copyright Holder(s).",
                          "\\"Modified Version\\" refers to any derivative made by adding to, deleting, or substituting -- in part or in whole -- any of the components of the Original Version, by changing formats or by porting the Font Software to a new environment.",
                          "\\"Author\\" refers to any designer, engineer, programmer, technical writer or other person who contributed to the Font Software.",
                          "PERMISSION & CONDITIONS",
                          "Permission is hereby granted, free of charge, to any person obtaining a copy of the Font Software, to use, study, copy, merge, embed, modify, redistribute, and sell modified and unmodified copies of the Font Software, subject to the following conditions:",
                          "1) Neither the Font Software nor any of its individual components, in Original or Modified Versions, may be sold by itself.",
                          "2) Original or Modified Versions of the Font Software may be bundled, redistributed and/or sold with any software, provided that each copy contains the above copyright notice and this license. These can be included either as stand-alone text files, human-readable headers or in the appropriate machine-readable metadata fields within text or binary files as long as those fields can be easily viewed by the user.",
                          "3) No Modified Version of the Font Software may use the Reserved Font Name(s) unless explicit written permission is granted by the corresponding Copyright Holder. This restriction only applies to the primary font name as presented to the users.",
                          "4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font Software shall not be used to promote, endorse or advertise any Modified Version, except to acknowledge the contribution(s) of the Copyright Holder(s) and the Author(s) or with their explicit written permission.",
                          "5) The Font Software, modified or unmodified, in part or in whole, must be distributed entirely under this license, and must not be distributed under any other license. The requirement for fonts to remain under this license does not apply to any document created using the Font Software.",
                          "TERMINATION",
                          "This license becomes null and void if any of the above conditions are not met.",
                          "DISCLAIMER",
                          "THE FONT SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE."
                        ]
                      },
                      "LiberationSans - OFL.txt.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Fonts/LiberationSans - OFL.txt.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "LiberationSans.ttf": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Fonts/LiberationSans.ttf",
                        "isBinary": true,
                        "content": null
                      },
                      "LiberationSans.ttf.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Fonts/LiberationSans.ttf.meta",
                        "isBinary": true,
                        "content": null
                      }
                    }
                  },
                  "Fonts.meta": {
                    "path": "./unity/Lumberjack/Assets/TextMesh Pro/Fonts.meta",
                    "isBinary": true,
                    "content": null
                  },
                  "Resources": {
                    "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources",
                    "children": {
                      "Fonts & Materials": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/Fonts & Materials",
                        "children": {
                          "LiberationSans SDF - Drop Shadow.mat": {
                            "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/Fonts & Materials/LiberationSans SDF - Drop Shadow.mat",
                            "isBinary": true,
                            "content": null
                          },
                          "LiberationSans SDF - Drop Shadow.mat.meta": {
                            "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/Fonts & Materials/LiberationSans SDF - Drop Shadow.mat.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "LiberationSans SDF - Fallback.asset": {
                            "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/Fonts & Materials/LiberationSans SDF - Fallback.asset",
                            "isBinary": true,
                            "content": null
                          },
                          "LiberationSans SDF - Fallback.asset.meta": {
                            "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/Fonts & Materials/LiberationSans SDF - Fallback.asset.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "LiberationSans SDF - Outline.mat": {
                            "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/Fonts & Materials/LiberationSans SDF - Outline.mat",
                            "isBinary": true,
                            "content": null
                          },
                          "LiberationSans SDF - Outline.mat.meta": {
                            "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/Fonts & Materials/LiberationSans SDF - Outline.mat.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "LiberationSans SDF.asset": {
                            "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/Fonts & Materials/LiberationSans SDF.asset",
                            "isBinary": true,
                            "content": null
                          },
                          "LiberationSans SDF.asset.meta": {
                            "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/Fonts & Materials/LiberationSans SDF.asset.meta",
                            "isBinary": true,
                            "content": null
                          }
                        }
                      },
                      "Fonts & Materials.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/Fonts & Materials.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "LineBreaking Following Characters.txt": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/LineBreaking Following Characters.txt",
                        "isBinary": false,
                        "content": [
                          ")]｝〕〉》」』】〙〗〟’”｠»ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻‐゠–〜?!‼⁇⁈⁉・、%,.:;。！？］）：；＝}¢°\\"†‡℃〆％，．"
                        ]
                      },
                      "LineBreaking Following Characters.txt.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/LineBreaking Following Characters.txt.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "LineBreaking Leading Characters.txt": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/LineBreaking Leading Characters.txt",
                        "isBinary": false,
                        "content": [
                          "([｛〔〈《「『【〘〖〝‘“｟«$—…‥〳〴〵\\\\［（{£¥\\"々〇＄￥￦ #"
                        ]
                      },
                      "LineBreaking Leading Characters.txt.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/LineBreaking Leading Characters.txt.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "Sprite Assets": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/Sprite Assets",
                        "children": {
                          "EmojiOne.asset": {
                            "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/Sprite Assets/EmojiOne.asset",
                            "isBinary": true,
                            "content": null
                          },
                          "EmojiOne.asset.meta": {
                            "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/Sprite Assets/EmojiOne.asset.meta",
                            "isBinary": true,
                            "content": null
                          }
                        }
                      },
                      "Sprite Assets.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/Sprite Assets.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "Style Sheets": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/Style Sheets",
                        "children": {
                          "Default Style Sheet.asset": {
                            "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/Style Sheets/Default Style Sheet.asset",
                            "isBinary": true,
                            "content": null
                          },
                          "Default Style Sheet.asset.meta": {
                            "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/Style Sheets/Default Style Sheet.asset.meta",
                            "isBinary": true,
                            "content": null
                          }
                        }
                      },
                      "Style Sheets.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/Style Sheets.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP Settings.asset": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/TMP Settings.asset",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP Settings.asset.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources/TMP Settings.asset.meta",
                        "isBinary": true,
                        "content": null
                      }
                    }
                  },
                  "Resources.meta": {
                    "path": "./unity/Lumberjack/Assets/TextMesh Pro/Resources.meta",
                    "isBinary": true,
                    "content": null
                  },
                  "Shaders": {
                    "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders",
                    "children": {
                      "TMP_Bitmap-Custom-Atlas.shader": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_Bitmap-Custom-Atlas.shader",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_Bitmap-Custom-Atlas.shader.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_Bitmap-Custom-Atlas.shader.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_Bitmap-Mobile.shader": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_Bitmap-Mobile.shader",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_Bitmap-Mobile.shader.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_Bitmap-Mobile.shader.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_Bitmap.shader": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_Bitmap.shader",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_Bitmap.shader.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_Bitmap.shader.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_SDF Overlay.shader": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_SDF Overlay.shader",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_SDF Overlay.shader.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_SDF Overlay.shader.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_SDF SSD.shader": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_SDF SSD.shader",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_SDF SSD.shader.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_SDF SSD.shader.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_SDF-Mobile Masking.shader": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile Masking.shader",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_SDF-Mobile Masking.shader.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile Masking.shader.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_SDF-Mobile Overlay.shader": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile Overlay.shader",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_SDF-Mobile Overlay.shader.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile Overlay.shader.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_SDF-Mobile SSD.shader": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile SSD.shader",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_SDF-Mobile SSD.shader.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile SSD.shader.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_SDF-Mobile.shader": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile.shader",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_SDF-Mobile.shader.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile.shader.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_SDF-Surface-Mobile.shader": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_SDF-Surface-Mobile.shader",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_SDF-Surface-Mobile.shader.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_SDF-Surface-Mobile.shader.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_SDF-Surface.shader": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_SDF-Surface.shader",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_SDF-Surface.shader.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_SDF-Surface.shader.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_SDF.shader": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_SDF.shader",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_SDF.shader.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_SDF.shader.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_Sprite.shader": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_Sprite.shader",
                        "isBinary": true,
                        "content": null
                      },
                      "TMP_Sprite.shader.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMP_Sprite.shader.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "TMPro.cginc": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMPro.cginc",
                        "isBinary": true,
                        "content": null
                      },
                      "TMPro.cginc.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMPro.cginc.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "TMPro_Mobile.cginc": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMPro_Mobile.cginc",
                        "isBinary": true,
                        "content": null
                      },
                      "TMPro_Mobile.cginc.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMPro_Mobile.cginc.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "TMPro_Properties.cginc": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMPro_Properties.cginc",
                        "isBinary": true,
                        "content": null
                      },
                      "TMPro_Properties.cginc.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMPro_Properties.cginc.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "TMPro_Surface.cginc": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMPro_Surface.cginc",
                        "isBinary": true,
                        "content": null
                      },
                      "TMPro_Surface.cginc.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders/TMPro_Surface.cginc.meta",
                        "isBinary": true,
                        "content": null
                      }
                    }
                  },
                  "Shaders.meta": {
                    "path": "./unity/Lumberjack/Assets/TextMesh Pro/Shaders.meta",
                    "isBinary": true,
                    "content": null
                  },
                  "Sprites": {
                    "path": "./unity/Lumberjack/Assets/TextMesh Pro/Sprites",
                    "children": {
                      "EmojiOne Attribution.txt": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Sprites/EmojiOne Attribution.txt",
                        "isBinary": false,
                        "content": [
                          "This sample of beautiful emojis are provided by EmojiOne https://www.emojione.com/",
                          "Please visit their website to view the complete set of their emojis and review their licensing terms."
                        ]
                      },
                      "EmojiOne Attribution.txt.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Sprites/EmojiOne Attribution.txt.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "EmojiOne.json": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Sprites/EmojiOne.json",
                        "isBinary": false,
                        "content": [
                          "{",
                          "\\"frames\\": [",
                          "{",
                          "\\"filename\\": \\"1f60a.png\\",",
                          "\\"frame\\": { \\"x\\": 0, \\"y\\": 0, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"rotated\\": false,",
                          "\\"trimmed\\": false,",
                          "\\"spriteSourceSize\\": { \\"x\\": 0, \\"y\\": 0, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"sourceSize\\": { \\"w\\": 128, \\"h\\": 128 },",
                          "\\"pivot\\": { \\"x\\": 0.5, \\"y\\": 0.5 }",
                          "},",
                          "{",
                          "\\"filename\\": \\"1f60b.png\\",",
                          "\\"frame\\": { \\"x\\": 128, \\"y\\": 0, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"rotated\\": false,",
                          "\\"trimmed\\": false,",
                          "\\"spriteSourceSize\\": { \\"x\\": 0, \\"y\\": 0, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"sourceSize\\": { \\"w\\": 128, \\"h\\": 128 },",
                          "\\"pivot\\": { \\"x\\": 0.5, \\"y\\": 0.5 }",
                          "},",
                          "{",
                          "\\"filename\\": \\"1f60d.png\\",",
                          "\\"frame\\": { \\"x\\": 256, \\"y\\": 0, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"rotated\\": false,",
                          "\\"trimmed\\": false,",
                          "\\"spriteSourceSize\\": { \\"x\\": 0, \\"y\\": 0, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"sourceSize\\": { \\"w\\": 128, \\"h\\": 128 },",
                          "\\"pivot\\": { \\"x\\": 0.5, \\"y\\": 0.5 }",
                          "},",
                          "{",
                          "\\"filename\\": \\"1f60e.png\\",",
                          "\\"frame\\": { \\"x\\": 384, \\"y\\": 0, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"rotated\\": false,",
                          "\\"trimmed\\": false,",
                          "\\"spriteSourceSize\\": { \\"x\\": 0, \\"y\\": 0, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"sourceSize\\": { \\"w\\": 128, \\"h\\": 128 },",
                          "\\"pivot\\": { \\"x\\": 0.5, \\"y\\": 0.5 }",
                          "},",
                          "{",
                          "\\"filename\\": \\"1f600.png\\",",
                          "\\"frame\\": { \\"x\\": 0, \\"y\\": 128, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"rotated\\": false,",
                          "\\"trimmed\\": false,",
                          "\\"spriteSourceSize\\": { \\"x\\": 0, \\"y\\": 0, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"sourceSize\\": { \\"w\\": 128, \\"h\\": 128 },",
                          "\\"pivot\\": { \\"x\\": 0.5, \\"y\\": 0.5 }",
                          "},",
                          "{",
                          "\\"filename\\": \\"1f601.png\\",",
                          "\\"frame\\": { \\"x\\": 128, \\"y\\": 128, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"rotated\\": false,",
                          "\\"trimmed\\": false,",
                          "\\"spriteSourceSize\\": { \\"x\\": 0, \\"y\\": 0, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"sourceSize\\": { \\"w\\": 128, \\"h\\": 128 },",
                          "\\"pivot\\": { \\"x\\": 0.5, \\"y\\": 0.5 }",
                          "},",
                          "{",
                          "\\"filename\\": \\"1f602.png\\",",
                          "\\"frame\\": { \\"x\\": 256, \\"y\\": 128, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"rotated\\": false,",
                          "\\"trimmed\\": false,",
                          "\\"spriteSourceSize\\": { \\"x\\": 0, \\"y\\": 0, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"sourceSize\\": { \\"w\\": 128, \\"h\\": 128 },",
                          "\\"pivot\\": { \\"x\\": 0.5, \\"y\\": 0.5 }",
                          "},",
                          "{",
                          "\\"filename\\": \\"1f603.png\\",",
                          "\\"frame\\": { \\"x\\": 384, \\"y\\": 128, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"rotated\\": false,",
                          "\\"trimmed\\": false,",
                          "\\"spriteSourceSize\\": { \\"x\\": 0, \\"y\\": 0, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"sourceSize\\": { \\"w\\": 128, \\"h\\": 128 },",
                          "\\"pivot\\": { \\"x\\": 0.5, \\"y\\": 0.5 }",
                          "},",
                          "{",
                          "\\"filename\\": \\"1f604.png\\",",
                          "\\"frame\\": { \\"x\\": 0, \\"y\\": 256, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"rotated\\": false,",
                          "\\"trimmed\\": false,",
                          "\\"spriteSourceSize\\": { \\"x\\": 0, \\"y\\": 0, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"sourceSize\\": { \\"w\\": 128, \\"h\\": 128 },",
                          "\\"pivot\\": { \\"x\\": 0.5, \\"y\\": 0.5 }",
                          "},",
                          "{",
                          "\\"filename\\": \\"1f605.png\\",",
                          "\\"frame\\": { \\"x\\": 128, \\"y\\": 256, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"rotated\\": false,",
                          "\\"trimmed\\": false,",
                          "\\"spriteSourceSize\\": { \\"x\\": 0, \\"y\\": 0, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"sourceSize\\": { \\"w\\": 128, \\"h\\": 128 },",
                          "\\"pivot\\": { \\"x\\": 0.5, \\"y\\": 0.5 }",
                          "},",
                          "{",
                          "\\"filename\\": \\"1f606.png\\",",
                          "\\"frame\\": { \\"x\\": 256, \\"y\\": 256, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"rotated\\": false,",
                          "\\"trimmed\\": false,",
                          "\\"spriteSourceSize\\": { \\"x\\": 0, \\"y\\": 0, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"sourceSize\\": { \\"w\\": 128, \\"h\\": 128 },",
                          "\\"pivot\\": { \\"x\\": 0.5, \\"y\\": 0.5 }",
                          "},",
                          "{",
                          "\\"filename\\": \\"1f609.png\\",",
                          "\\"frame\\": { \\"x\\": 384, \\"y\\": 256, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"rotated\\": false,",
                          "\\"trimmed\\": false,",
                          "\\"spriteSourceSize\\": { \\"x\\": 0, \\"y\\": 0, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"sourceSize\\": { \\"w\\": 128, \\"h\\": 128 },",
                          "\\"pivot\\": { \\"x\\": 0.5, \\"y\\": 0.5 }",
                          "},",
                          "{",
                          "\\"filename\\": \\"1f618.png\\",",
                          "\\"frame\\": { \\"x\\": 0, \\"y\\": 384, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"rotated\\": false,",
                          "\\"trimmed\\": false,",
                          "\\"spriteSourceSize\\": { \\"x\\": 0, \\"y\\": 0, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"sourceSize\\": { \\"w\\": 128, \\"h\\": 128 },",
                          "\\"pivot\\": { \\"x\\": 0.5, \\"y\\": 0.5 }",
                          "},",
                          "{",
                          "\\"filename\\": \\"1f923.png\\",",
                          "\\"frame\\": { \\"x\\": 128, \\"y\\": 384, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"rotated\\": false,",
                          "\\"trimmed\\": false,",
                          "\\"spriteSourceSize\\": { \\"x\\": 0, \\"y\\": 0, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"sourceSize\\": { \\"w\\": 128, \\"h\\": 128 },",
                          "\\"pivot\\": { \\"x\\": 0.5, \\"y\\": 0.5 }",
                          "},",
                          "{",
                          "\\"filename\\": \\"263a.png\\",",
                          "\\"frame\\": { \\"x\\": 256, \\"y\\": 384, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"rotated\\": false,",
                          "\\"trimmed\\": false,",
                          "\\"spriteSourceSize\\": { \\"x\\": 0, \\"y\\": 0, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"sourceSize\\": { \\"w\\": 128, \\"h\\": 128 },",
                          "\\"pivot\\": { \\"x\\": 0.5, \\"y\\": 0.5 }",
                          "},",
                          "{",
                          "\\"filename\\": \\"2639.png\\",",
                          "\\"frame\\": { \\"x\\": 384, \\"y\\": 384, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"rotated\\": false,",
                          "\\"trimmed\\": false,",
                          "\\"spriteSourceSize\\": { \\"x\\": 0, \\"y\\": 0, \\"w\\": 128, \\"h\\": 128 },",
                          "\\"sourceSize\\": { \\"w\\": 128, \\"h\\": 128 },",
                          "\\"pivot\\": { \\"x\\": 0.5, \\"y\\": 0.5 }",
                          "}",
                          "],",
                          "\\"meta\\": {",
                          "\\"app\\": \\"http://www.codeandweb.com/texturepacker\\",",
                          "\\"version\\": \\"1.0\\",",
                          "\\"image\\": \\"EmojiOne.png\\",",
                          "\\"format\\": \\"RGBA8888\\",",
                          "\\"size\\": { \\"w\\": 512, \\"h\\": 512 },",
                          "\\"scale\\": \\"1\\",",
                          "\\"smartupdate\\": \\"$TexturePacker:SmartUpdate:196a26a2e149d875b91ffc8fa3581e76:fc928c7e275404b7e0649307410475cb:424723c3774975ddb2053fd5c4b85f6e$\\"",
                          "}",
                          "}"
                        ]
                      },
                      "EmojiOne.json.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Sprites/EmojiOne.json.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "EmojiOne.png": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Sprites/EmojiOne.png",
                        "isBinary": true,
                        "content": null
                      },
                      "EmojiOne.png.meta": {
                        "path": "./unity/Lumberjack/Assets/TextMesh Pro/Sprites/EmojiOne.png.meta",
                        "isBinary": true,
                        "content": null
                      }
                    }
                  },
                  "Sprites.meta": {
                    "path": "./unity/Lumberjack/Assets/TextMesh Pro/Sprites.meta",
                    "isBinary": true,
                    "content": null
                  }
                }
              },
              "TextMesh Pro.meta": {
                "path": "./unity/Lumberjack/Assets/TextMesh Pro.meta",
                "isBinary": true,
                "content": null
              },
              "WebGLTemplates": {
                "path": "./unity/Lumberjack/Assets/WebGLTemplates",
                "children": {
                  "SolanaWebGlTemplate": {
                    "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate",
                    "children": {
                      "TemplateData": {
                        "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData",
                        "children": {
                          "favicon.ico": {
                            "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/favicon.ico",
                            "isBinary": true,
                            "content": null
                          },
                          "favicon.ico.meta": {
                            "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/favicon.ico.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "fullscreen-button.png": {
                            "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/fullscreen-button.png",
                            "isBinary": true,
                            "content": null
                          },
                          "fullscreen-button.png.meta": {
                            "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/fullscreen-button.png.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "progress-bar-empty-dark.png": {
                            "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/progress-bar-empty-dark.png",
                            "isBinary": true,
                            "content": null
                          },
                          "progress-bar-empty-dark.png.meta": {
                            "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/progress-bar-empty-dark.png.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "progress-bar-empty-light.png": {
                            "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/progress-bar-empty-light.png",
                            "isBinary": true,
                            "content": null
                          },
                          "progress-bar-empty-light.png.meta": {
                            "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/progress-bar-empty-light.png.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "progress-bar-full-dark.png": {
                            "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/progress-bar-full-dark.png",
                            "isBinary": true,
                            "content": null
                          },
                          "progress-bar-full-dark.png.meta": {
                            "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/progress-bar-full-dark.png.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "progress-bar-full-light.png": {
                            "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/progress-bar-full-light.png",
                            "isBinary": true,
                            "content": null
                          },
                          "progress-bar-full-light.png.meta": {
                            "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/progress-bar-full-light.png.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "style.css": {
                            "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/style.css",
                            "isBinary": false,
                            "content": [
                              "body { padding: 0; margin: 0 }",
                              "#unity-container { position: absolute }",
                              "#unity-container.unity-desktop { left: 50%; top: 50%; transform: translate(-50%, -50%) }",
                              "#unity-container.unity-mobile { width: 100%; height: 100% }",
                              "#unity-canvas { background: {{{ BACKGROUND_COLOR }}} }",
                              ".unity-mobile #unity-canvas { width: 100%; height: 100% }",
                              "#unity-loading-bar { position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); display: none }",
                              "#unity-logo { width: 154px; height: 130px; background: url('unity-logo-{{{ SPLASH_SCREEN_STYLE.toLowerCase() }}}.png') no-repeat center }",
                              "#unity-progress-bar-empty { width: 141px; height: 18px; margin-top: 10px; margin-left: 6.5px; background: url('progress-bar-empty-{{{ SPLASH_SCREEN_STYLE.toLowerCase() }}}.png') no-repeat center }",
                              "#unity-progress-bar-full { width: 0%; height: 18px; margin-top: 10px; background: url('progress-bar-full-{{{ SPLASH_SCREEN_STYLE.toLowerCase() }}}.png') no-repeat center }",
                              "#unity-footer { position: relative }",
                              ".unity-mobile #unity-footer { display: none }",
                              "#unity-webgl-logo { float:left; width: 204px; height: 38px; background: url('webgl-logo.png') no-repeat center }",
                              "#unity-build-title { float: right; margin-right: 10px; line-height: 38px; font-family: arial; font-size: 18px }",
                              "#unity-fullscreen-button { float: right; width: 38px; height: 38px; background: url('fullscreen-button.png') no-repeat center }",
                              "#unity-warning { position: absolute; left: 50%; top: 5%; transform: translate(-50%); background: white; padding: 10px; display: none }"
                            ]
                          },
                          "style.css.meta": {
                            "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/style.css.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "unity-logo-dark.png": {
                            "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/unity-logo-dark.png",
                            "isBinary": true,
                            "content": null
                          },
                          "unity-logo-dark.png.meta": {
                            "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/unity-logo-dark.png.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "unity-logo-light.png": {
                            "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/unity-logo-light.png",
                            "isBinary": true,
                            "content": null
                          },
                          "unity-logo-light.png.meta": {
                            "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/unity-logo-light.png.meta",
                            "isBinary": true,
                            "content": null
                          },
                          "webgl-logo.png": {
                            "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/webgl-logo.png",
                            "isBinary": true,
                            "content": null
                          },
                          "webgl-logo.png.meta": {
                            "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData/webgl-logo.png.meta",
                            "isBinary": true,
                            "content": null
                          }
                        }
                      },
                      "TemplateData.meta": {
                        "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/TemplateData.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "index.html": {
                        "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/index.html",
                        "isBinary": false,
                        "content": [
                          "<!DOCTYPE html>",
                          "<html lang=\\"en-us\\">",
                          "<head>",
                          "<meta charset=\\"utf-8\\" />",
                          "<meta http-equiv=\\"Content-Type\\" content=\\"text/html; charset=utf-8\\" />",
                          "<title>Solana | {{{ PRODUCT_NAME }}}</title>",
                          "<link rel=\\"shortcut icon\\" href=\\"TemplateData/favicon.ico\\" />",
                          "<link rel=\\"stylesheet\\" href=\\"TemplateData/style.css\\" />",
                          "</head>",
                          "<body>",
                          "<div",
                          "id=\\"unity-container\\"",
                          "class=\\"unity-desktop\\"",
                          "style=\\"width: 100%; height: 100%\\"",
                          ">",
                          "<canvas id=\\"unity-canvas\\"></canvas>",
                          "<div id=\\"unity-loading-bar\\">",
                          "<div id=\\"unity-logo\\"></div>",
                          "<div id=\\"unity-progress-bar-empty\\">",
                          "<div id=\\"unity-progress-bar-full\\"></div>",
                          "</div>",
                          "</div>",
                          "<div id=\\"unity-warning\\"></div>",
                          "<div id=\\"unity-footer\\">",
                          "Source code:",
                          "<a href=\\"https://github.com/solana-developers/solana-2048\\"> here </a>",
                          "<div id=\\"unity-webgl-logo\\"></div>",
                          "<div id=\\"unity-fullscreen-button\\"></div>",
                          "<div id=\\"unity-build-title\\">{{{ PRODUCT_NAME }}} Example</div>",
                          "</div>",
                          "</div>",
                          "<script>",
                          "var container = document.querySelector(\\"#unity-container\\");",
                          "var canvas = document.querySelector(\\"#unity-canvas\\");",
                          "var loadingBar = document.querySelector(\\"#unity-loading-bar\\");",
                          "var progressBarFull = document.querySelector(\\"#unity-progress-bar-full\\");",
                          "var fullscreenButton = document.querySelector(\\"#unity-fullscreen-button\\");",
                          "var warningBanner = document.querySelector(\\"#unity-warning\\");",
                          "// Shows a temporary message banner/ribbon for a few seconds, or",
                          "// a permanent error message on top of the canvas if type=='error'.",
                          "// If type=='warning', a yellow highlight color is used.",
                          "// Modify or remove this function to customize the visually presented",
                          "// way that non-critical warnings and error messages are presented to the",
                          "// user.",
                          "function unityShowBanner(msg, type) {",
                          "function updateBannerVisibility() {",
                          "warningBanner.style.display = warningBanner.children.length ? 'block' : 'none';",
                          "}",
                          "var div = document.createElement('div');",
                          "div.innerHTML = msg;",
                          "warningBanner.appendChild(div);",
                          "if (type == 'error') div.style = 'background: red; padding: 10px;';",
                          "else {",
                          "if (type == 'warning') div.style = 'background: yellow; padding: 10px;';",
                          "setTimeout(function() {",
                          "warningBanner.removeChild(div);",
                          "updateBannerVisibility();",
                          "}, 5000);",
                          "}",
                          "updateBannerVisibility();",
                          "}",
                          "var buildUrl = \\"Build\\";",
                          "var loaderUrl = buildUrl + \\"/{{{ LOADER_FILENAME }}}\\";",
                          "var config = {",
                          "dataUrl: buildUrl + \\"/{{{ DATA_FILENAME }}}\\",",
                          "frameworkUrl: buildUrl + \\"/{{{ FRAMEWORK_FILENAME }}}\\",",
                          "#if USE_WASM",
                          "codeUrl: buildUrl + \\"/{{{ CODE_FILENAME }}}\\",",
                          "#endif",
                          "#if MEMORY_FILENAME",
                          "memoryUrl: buildUrl + \\"/{{{ MEMORY_FILENAME }}}\\",",
                          "#endif",
                          "#if SYMBOLS_FILENAME",
                          "symbolsUrl: buildUrl + \\"/{{{ SYMBOLS_FILENAME }}}\\",",
                          "#endif",
                          "streamingAssetsUrl: \\"StreamingAssets\\",",
                          "companyName: {{{ JSON.stringify(COMPANY_NAME) }}},",
                          "productName: {{{ JSON.stringify(PRODUCT_NAME) }}},",
                          "productVersion: {{{ JSON.stringify(PRODUCT_VERSION) }}},",
                          "showBanner: unityShowBanner,",
                          "};",
                          "// By default Unity keeps WebGL canvas render target size matched with",
                          "// the DOM size of the canvas element (scaled by window.devicePixelRatio)",
                          "// Set this to false if you want to decouple this synchronization from",
                          "// happening inside the engine, and you would instead like to size up",
                          "// the canvas DOM size and WebGL render target sizes yourself.",
                          "// config.matchWebGLToCanvasSize = false;",
                          "if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {",
                          "// Mobile device style: fill the whole browser client area with the game canvas:",
                          "var meta = document.createElement('meta');",
                          "meta.name = 'viewport';",
                          "meta.content = 'width=device-width, height=device-height, initial-scale=1.0, user-scalable=no, shrink-to-fit=yes';",
                          "document.getElementsByTagName('head')[0].appendChild(meta);",
                          "container.className = \\"unity-mobile\\";",
                          "// To lower canvas resolution on mobile devices to gain some",
                          "// performance, uncomment the following line:",
                          "// config.devicePixelRatio = 1;",
                          "canvas.style.width = '100%';",
                          "canvas.style.height = '100%';",
                          "//unityShowBanner('WebGL builds are not supported on mobile devices.');",
                          "} else {",
                          "// Desktop style: Render the game canvas in a window that can be maximized to fullscreen:",
                          "canvas.style.width = '100%';",
                          "canvas.style.height = '100%';",
                          "}",
                          "#if BACKGROUND_FILENAME",
                          "canvas.style.background = \\"url('\\" + buildUrl + \\"/{{{ BACKGROUND_FILENAME.replace(/'/g, '%27') }}}') center / cover\\";",
                          "#endif",
                          "loadingBar.style.display = \\"block\\";",
                          "var script = document.createElement(\\"script\\");",
                          "script.src = loaderUrl;",
                          "script.onload = () => {",
                          "createUnityInstance(canvas, config, (progress) => {",
                          "progressBarFull.style.width = 100 * progress + \\"%\\";",
                          "}).then((unityInstance) => {",
                          "window.unityInstance = unityInstance;",
                          "loadingBar.style.display = \\"none\\";",
                          "fullscreenButton.onclick = () => {",
                          "unityInstance.SetFullscreen(1);",
                          "};",
                          "}).catch((message) => {",
                          "alert(message);",
                          "});",
                          "};",
                          "document.body.appendChild(script);",
                          "</script>",
                          "</body>",
                          "</html>"
                        ]
                      },
                      "index.html.meta": {
                        "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/index.html.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "thumbnail.png": {
                        "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/thumbnail.png",
                        "isBinary": true,
                        "content": null
                      },
                      "thumbnail.png.meta": {
                        "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate/thumbnail.png.meta",
                        "isBinary": true,
                        "content": null
                      }
                    }
                  },
                  "SolanaWebGlTemplate.meta": {
                    "path": "./unity/Lumberjack/Assets/WebGLTemplates/SolanaWebGlTemplate.meta",
                    "isBinary": true,
                    "content": null
                  },
                  "xNFT": {
                    "path": "./unity/Lumberjack/Assets/WebGLTemplates/xNFT",
                    "children": {
                      "index.html": {
                        "path": "./unity/Lumberjack/Assets/WebGLTemplates/xNFT/index.html",
                        "isBinary": false,
                        "content": [
                          "<!DOCTYPE html>",
                          "<html lang=\\"en-us\\">",
                          "<head>",
                          "<meta charset=\\"utf-8\\" />",
                          "<meta http-equiv=\\"Content-Type\\" content=\\"text/html; charset=utf-8\\" />",
                          "<title>Unity XNFT | {{{ PRODUCT_NAME }}}<</title>",
                          "<link rel=\\"icon\\" type=\\"image/x-icon\\" href=\\"favicon.ico\\" />",
                          "</head>",
                          "<body style=\\"text-align: center; padding: 0; border: 0; margin: 0\\">",
                          "<script src=\\"Build/{{{ LOADER_FILENAME }}}\\"></script>",
                          "<div id=\\"unity-container\\" class=\\"unity-desktop\\">",
                          "<canvas id=\\"unity-canvas\\" width=\\"960\\" height=\\"600\\"></canvas>",
                          "<div id=\\"unity-loading-bar\\">",
                          "<div id=\\"unity-logo\\"></div>",
                          "<div id=\\"unity-progress-bar-empty\\">",
                          "<div id=\\"unity-progress-bar-full\\"></div>",
                          "</div>",
                          "</div>",
                          "</div>",
                          "<script>",
                          "var container = document.querySelector(\\"#unity-container\\");",
                          "var canvas = document.querySelector(\\"#unity-canvas\\");",
                          "var loadingBar = document.querySelector(\\"#unity-loading-bar\\");",
                          "var progressBarFull = document.querySelector(\\"#unity-progress-bar-full\\");",
                          "var fullscreenButton = document.querySelector(\\"#unity-fullscreen-button\\");",
                          "var warningBanner = document.querySelector(\\"#unity-warning\\");",
                          "// Shows a temporary message banner/ribbon for a few seconds, or",
                          "// a permanent error message on top of the canvas if type=='error'.",
                          "// If type=='warning', a yellow highlight color is used.",
                          "// Modify or remove this function to customize the visually presented",
                          "// way that non-critical warnings and error messages are presented to the",
                          "// user.",
                          "function unityShowBanner(msg, type) {",
                          "function updateBannerVisibility() {",
                          "warningBanner.style.display = warningBanner.children.length ? 'block' : 'none';",
                          "}",
                          "var div = document.createElement('div');",
                          "div.innerHTML = msg;",
                          "warningBanner.appendChild(div);",
                          "if (type == 'error') div.style = 'background: red; padding: 10px;';",
                          "else {",
                          "if (type == 'warning') div.style = 'background: yellow; padding: 10px;';",
                          "setTimeout(function() {",
                          "warningBanner.removeChild(div);",
                          "updateBannerVisibility();",
                          "}, 5000);",
                          "}",
                          "updateBannerVisibility();",
                          "}",
                          "var buildUrl = \\"Build\\";",
                          "var loaderUrl = buildUrl + \\"/{{{ LOADER_FILENAME }}}\\";",
                          "var config = {",
                          "dataUrl: \\"Build/{{{ DATA_FILENAME }}}\\",",
                          "frameworkUrl: \\"Build/{{{ FRAMEWORK_FILENAME }}}\\",",
                          "#if USE_WASM",
                          "codeUrl: \\"Build/{{{ CODE_FILENAME }}}\\",",
                          "#endif",
                          "#if MEMORY_FILENAME",
                          "memoryUrl: \\"Build/{{{ MEMORY_FILENAME }}}\\",",
                          "#endif",
                          "#if SYMBOLS_FILENAME",
                          "symbolsUrl: \\"Build/{{{ SYMBOLS_FILENAME }}}\\",",
                          "#endif",
                          "streamingAssetsUrl: \\"StreamingAssets\\",",
                          "companyName: {{{ JSON.stringify(COMPANY_NAME) }}},",
                          "productName: {{{ JSON.stringify(PRODUCT_NAME) }}},",
                          "productVersion: {{{ JSON.stringify(PRODUCT_VERSION) }}},",
                          "showBanner: unityShowBanner,",
                          "};",
                          "// Mobile device style: fill the whole browser client area with the game canvas:",
                          "var meta = document.createElement('meta');",
                          "meta.name = 'viewport';",
                          "meta.content = 'width=device-width, height=device-height, initial-scale=1.0, user-scalable=no, shrink-to-fit=yes';",
                          "document.getElementsByTagName('head')[0].appendChild(meta);",
                          "var canvas = document.querySelector(\\"#unity-canvas\\");",
                          "canvas.style.width = \\"100%\\";",
                          "canvas.style.height = \\"100%\\";",
                          "canvas.style.position = \\"fixed\\";",
                          "document.body.style.textAlign = \\"left\\";",
                          "loadingBar.style.display = \\"block\\";",
                          "var script = document.createElement(\\"script\\");",
                          "script.src = loaderUrl;",
                          "script.onload = () => {",
                          "createUnityInstance(canvas, config, (progress) => {",
                          "progressBarFull.style.width = 100 * progress + \\"%\\";",
                          "}).then((unityInstance) => {",
                          "loadingBar.style.display = \\"none\\";",
                          "}).catch((message) => {",
                          "alert(message);",
                          "});",
                          "};",
                          "document.body.appendChild(script);",
                          "</script>",
                          "</body>",
                          "</html>"
                        ]
                      },
                      "index.html.meta": {
                        "path": "./unity/Lumberjack/Assets/WebGLTemplates/xNFT/index.html.meta",
                        "isBinary": true,
                        "content": null
                      },
                      "thumbnail.png": {
                        "path": "./unity/Lumberjack/Assets/WebGLTemplates/xNFT/thumbnail.png",
                        "isBinary": true,
                        "content": null
                      },
                      "thumbnail.png.meta": {
                        "path": "./unity/Lumberjack/Assets/WebGLTemplates/xNFT/thumbnail.png.meta",
                        "isBinary": true,
                        "content": null
                      }
                    }
                  },
                  "xNFT.meta": {
                    "path": "./unity/Lumberjack/Assets/WebGLTemplates/xNFT.meta",
                    "isBinary": true,
                    "content": null
                  }
                }
              },
              "WebGLTemplates.meta": {
                "path": "./unity/Lumberjack/Assets/WebGLTemplates.meta",
                "isBinary": true,
                "content": null
              }
            }
          },
          "Packages": {
            "path": "./unity/Lumberjack/Packages",
            "children": {
              "manifest.json": {
                "path": "./unity/Lumberjack/Packages/manifest.json",
                "isBinary": false,
                "content": [
                  "{",
                  "\\"dependencies\\": {",
                  "\\"com.solana.unity_sdk\\": \\"https://github.com/magicblock-labs/Solana.Unity-SDK.git\\",",
                  "\\"com.unity.2d.sprite\\": \\"1.0.0\\",",
                  "\\"com.unity.collab-proxy\\": \\"2.2.0\\",",
                  "\\"com.unity.feature.development\\": \\"1.0.1\\",",
                  "\\"com.unity.ide.rider\\": \\"3.0.25\\",",
                  "\\"com.unity.ide.visualstudio\\": \\"2.0.21\\",",
                  "\\"com.unity.ide.vscode\\": \\"1.2.5\\",",
                  "\\"com.unity.test-framework\\": \\"1.1.33\\",",
                  "\\"com.unity.textmeshpro\\": \\"3.0.6\\",",
                  "\\"com.unity.timeline\\": \\"1.6.5\\",",
                  "\\"com.unity.ugui\\": \\"1.0.0\\",",
                  "\\"com.unity.visualscripting\\": \\"1.9.1\\",",
                  "\\"com.unity.modules.ai\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.androidjni\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.animation\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.assetbundle\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.audio\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.cloth\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.director\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.imageconversion\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.imgui\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.jsonserialize\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.particlesystem\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.physics\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.physics2d\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.screencapture\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.terrain\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.terrainphysics\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.tilemap\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.ui\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.uielements\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.umbra\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.unityanalytics\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.unitywebrequest\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.unitywebrequestassetbundle\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.unitywebrequestaudio\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.unitywebrequesttexture\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.unitywebrequestwww\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.vehicles\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.video\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.vr\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.wind\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.xr\\": \\"1.0.0\\"",
                  "}",
                  "}"
                ]
              },
              "packages-lock.json": {
                "path": "./unity/Lumberjack/Packages/packages-lock.json",
                "isBinary": false,
                "content": [
                  "{",
                  "\\"dependencies\\": {",
                  "\\"com.solana.unity_sdk\\": {",
                  "\\"version\\": \\"https://github.com/magicblock-labs/Solana.Unity-SDK.git\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"git\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.nuget.newtonsoft-json\\": \\"3.0.2\\",",
                  "\\"com.unity.textmeshpro\\": \\"3.0.6\\"",
                  "},",
                  "\\"hash\\": \\"9ce399fbc9cb91346bfd6b6728983158a050d762\\"",
                  "},",
                  "\\"com.unity.2d.sprite\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {}",
                  "},",
                  "\\"com.unity.collab-proxy\\": {",
                  "\\"version\\": \\"2.2.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"registry\\",",
                  "\\"dependencies\\": {},",
                  "\\"url\\": \\"https://packages.unity.com\\"",
                  "},",
                  "\\"com.unity.editorcoroutines\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 1,",
                  "\\"source\\": \\"registry\\",",
                  "\\"dependencies\\": {},",
                  "\\"url\\": \\"https://packages.unity.com\\"",
                  "},",
                  "\\"com.unity.ext.nunit\\": {",
                  "\\"version\\": \\"1.0.6\\",",
                  "\\"depth\\": 1,",
                  "\\"source\\": \\"registry\\",",
                  "\\"dependencies\\": {},",
                  "\\"url\\": \\"https://packages.unity.com\\"",
                  "},",
                  "\\"com.unity.feature.development\\": {",
                  "\\"version\\": \\"1.0.1\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.ide.visualstudio\\": \\"2.0.21\\",",
                  "\\"com.unity.ide.rider\\": \\"3.0.25\\",",
                  "\\"com.unity.ide.vscode\\": \\"1.2.5\\",",
                  "\\"com.unity.editorcoroutines\\": \\"1.0.0\\",",
                  "\\"com.unity.performance.profile-analyzer\\": \\"1.2.2\\",",
                  "\\"com.unity.test-framework\\": \\"1.1.33\\",",
                  "\\"com.unity.testtools.codecoverage\\": \\"1.2.4\\"",
                  "}",
                  "},",
                  "\\"com.unity.ide.rider\\": {",
                  "\\"version\\": \\"3.0.25\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"registry\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.ext.nunit\\": \\"1.0.6\\"",
                  "},",
                  "\\"url\\": \\"https://packages.unity.com\\"",
                  "},",
                  "\\"com.unity.ide.visualstudio\\": {",
                  "\\"version\\": \\"2.0.21\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"registry\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.test-framework\\": \\"1.1.9\\"",
                  "},",
                  "\\"url\\": \\"https://packages.unity.com\\"",
                  "},",
                  "\\"com.unity.ide.vscode\\": {",
                  "\\"version\\": \\"1.2.5\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"registry\\",",
                  "\\"dependencies\\": {},",
                  "\\"url\\": \\"https://packages.unity.com\\"",
                  "},",
                  "\\"com.unity.nuget.newtonsoft-json\\": {",
                  "\\"version\\": \\"3.2.1\\",",
                  "\\"depth\\": 1,",
                  "\\"source\\": \\"registry\\",",
                  "\\"dependencies\\": {},",
                  "\\"url\\": \\"https://packages.unity.com\\"",
                  "},",
                  "\\"com.unity.performance.profile-analyzer\\": {",
                  "\\"version\\": \\"1.2.2\\",",
                  "\\"depth\\": 1,",
                  "\\"source\\": \\"registry\\",",
                  "\\"dependencies\\": {},",
                  "\\"url\\": \\"https://packages.unity.com\\"",
                  "},",
                  "\\"com.unity.settings-manager\\": {",
                  "\\"version\\": \\"1.0.3\\",",
                  "\\"depth\\": 2,",
                  "\\"source\\": \\"registry\\",",
                  "\\"dependencies\\": {},",
                  "\\"url\\": \\"https://packages.unity.com\\"",
                  "},",
                  "\\"com.unity.test-framework\\": {",
                  "\\"version\\": \\"1.1.33\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"registry\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.ext.nunit\\": \\"1.0.6\\",",
                  "\\"com.unity.modules.imgui\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.jsonserialize\\": \\"1.0.0\\"",
                  "},",
                  "\\"url\\": \\"https://packages.unity.com\\"",
                  "},",
                  "\\"com.unity.testtools.codecoverage\\": {",
                  "\\"version\\": \\"1.2.4\\",",
                  "\\"depth\\": 1,",
                  "\\"source\\": \\"registry\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.test-framework\\": \\"1.0.16\\",",
                  "\\"com.unity.settings-manager\\": \\"1.0.1\\"",
                  "},",
                  "\\"url\\": \\"https://packages.unity.com\\"",
                  "},",
                  "\\"com.unity.textmeshpro\\": {",
                  "\\"version\\": \\"3.0.6\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"registry\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.ugui\\": \\"1.0.0\\"",
                  "},",
                  "\\"url\\": \\"https://packages.unity.com\\"",
                  "},",
                  "\\"com.unity.timeline\\": {",
                  "\\"version\\": \\"1.6.5\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"registry\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.modules.director\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.animation\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.audio\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.particlesystem\\": \\"1.0.0\\"",
                  "},",
                  "\\"url\\": \\"https://packages.unity.com\\"",
                  "},",
                  "\\"com.unity.ugui\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.modules.ui\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.imgui\\": \\"1.0.0\\"",
                  "}",
                  "},",
                  "\\"com.unity.visualscripting\\": {",
                  "\\"version\\": \\"1.9.1\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"registry\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.ugui\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.jsonserialize\\": \\"1.0.0\\"",
                  "},",
                  "\\"url\\": \\"https://packages.unity.com\\"",
                  "},",
                  "\\"com.unity.modules.ai\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {}",
                  "},",
                  "\\"com.unity.modules.androidjni\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {}",
                  "},",
                  "\\"com.unity.modules.animation\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {}",
                  "},",
                  "\\"com.unity.modules.assetbundle\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {}",
                  "},",
                  "\\"com.unity.modules.audio\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {}",
                  "},",
                  "\\"com.unity.modules.cloth\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.modules.physics\\": \\"1.0.0\\"",
                  "}",
                  "},",
                  "\\"com.unity.modules.director\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.modules.audio\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.animation\\": \\"1.0.0\\"",
                  "}",
                  "},",
                  "\\"com.unity.modules.imageconversion\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {}",
                  "},",
                  "\\"com.unity.modules.imgui\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {}",
                  "},",
                  "\\"com.unity.modules.jsonserialize\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {}",
                  "},",
                  "\\"com.unity.modules.particlesystem\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {}",
                  "},",
                  "\\"com.unity.modules.physics\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {}",
                  "},",
                  "\\"com.unity.modules.physics2d\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {}",
                  "},",
                  "\\"com.unity.modules.screencapture\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.modules.imageconversion\\": \\"1.0.0\\"",
                  "}",
                  "},",
                  "\\"com.unity.modules.subsystems\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 1,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.modules.jsonserialize\\": \\"1.0.0\\"",
                  "}",
                  "},",
                  "\\"com.unity.modules.terrain\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {}",
                  "},",
                  "\\"com.unity.modules.terrainphysics\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.modules.physics\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.terrain\\": \\"1.0.0\\"",
                  "}",
                  "},",
                  "\\"com.unity.modules.tilemap\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.modules.physics2d\\": \\"1.0.0\\"",
                  "}",
                  "},",
                  "\\"com.unity.modules.ui\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {}",
                  "},",
                  "\\"com.unity.modules.uielements\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.modules.ui\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.imgui\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.jsonserialize\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.uielementsnative\\": \\"1.0.0\\"",
                  "}",
                  "},",
                  "\\"com.unity.modules.uielementsnative\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 1,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.modules.ui\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.imgui\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.jsonserialize\\": \\"1.0.0\\"",
                  "}",
                  "},",
                  "\\"com.unity.modules.umbra\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {}",
                  "},",
                  "\\"com.unity.modules.unityanalytics\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.modules.unitywebrequest\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.jsonserialize\\": \\"1.0.0\\"",
                  "}",
                  "},",
                  "\\"com.unity.modules.unitywebrequest\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {}",
                  "},",
                  "\\"com.unity.modules.unitywebrequestassetbundle\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.modules.assetbundle\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.unitywebrequest\\": \\"1.0.0\\"",
                  "}",
                  "},",
                  "\\"com.unity.modules.unitywebrequestaudio\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.modules.unitywebrequest\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.audio\\": \\"1.0.0\\"",
                  "}",
                  "},",
                  "\\"com.unity.modules.unitywebrequesttexture\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.modules.unitywebrequest\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.imageconversion\\": \\"1.0.0\\"",
                  "}",
                  "},",
                  "\\"com.unity.modules.unitywebrequestwww\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.modules.unitywebrequest\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.unitywebrequestassetbundle\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.unitywebrequestaudio\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.audio\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.assetbundle\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.imageconversion\\": \\"1.0.0\\"",
                  "}",
                  "},",
                  "\\"com.unity.modules.vehicles\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.modules.physics\\": \\"1.0.0\\"",
                  "}",
                  "},",
                  "\\"com.unity.modules.video\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.modules.audio\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.ui\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.unitywebrequest\\": \\"1.0.0\\"",
                  "}",
                  "},",
                  "\\"com.unity.modules.vr\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.modules.jsonserialize\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.physics\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.xr\\": \\"1.0.0\\"",
                  "}",
                  "},",
                  "\\"com.unity.modules.wind\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {}",
                  "},",
                  "\\"com.unity.modules.xr\\": {",
                  "\\"version\\": \\"1.0.0\\",",
                  "\\"depth\\": 0,",
                  "\\"source\\": \\"builtin\\",",
                  "\\"dependencies\\": {",
                  "\\"com.unity.modules.physics\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.jsonserialize\\": \\"1.0.0\\",",
                  "\\"com.unity.modules.subsystems\\": \\"1.0.0\\"",
                  "}",
                  "}",
                  "}",
                  "}"
                ]
              }
            }
          },
          "ProjectSettings": {
            "path": "./unity/Lumberjack/ProjectSettings",
            "children": {
              "AudioManager.asset": {
                "path": "./unity/Lumberjack/ProjectSettings/AudioManager.asset",
                "isBinary": true,
                "content": null
              },
              "ClusterInputManager.asset": {
                "path": "./unity/Lumberjack/ProjectSettings/ClusterInputManager.asset",
                "isBinary": true,
                "content": null
              },
              "DynamicsManager.asset": {
                "path": "./unity/Lumberjack/ProjectSettings/DynamicsManager.asset",
                "isBinary": true,
                "content": null
              },
              "EditorBuildSettings.asset": {
                "path": "./unity/Lumberjack/ProjectSettings/EditorBuildSettings.asset",
                "isBinary": true,
                "content": null
              },
              "EditorSettings.asset": {
                "path": "./unity/Lumberjack/ProjectSettings/EditorSettings.asset",
                "isBinary": true,
                "content": null
              },
              "GraphicsSettings.asset": {
                "path": "./unity/Lumberjack/ProjectSettings/GraphicsSettings.asset",
                "isBinary": true,
                "content": null
              },
              "InputManager.asset": {
                "path": "./unity/Lumberjack/ProjectSettings/InputManager.asset",
                "isBinary": true,
                "content": null
              },
              "MemorySettings.asset": {
                "path": "./unity/Lumberjack/ProjectSettings/MemorySettings.asset",
                "isBinary": true,
                "content": null
              },
              "NavMeshAreas.asset": {
                "path": "./unity/Lumberjack/ProjectSettings/NavMeshAreas.asset",
                "isBinary": true,
                "content": null
              },
              "PackageManagerSettings.asset": {
                "path": "./unity/Lumberjack/ProjectSettings/PackageManagerSettings.asset",
                "isBinary": true,
                "content": null
              },
              "Packages": {
                "path": "./unity/Lumberjack/ProjectSettings/Packages",
                "children": {
                  "com.unity.testtools.codecoverage": {
                    "path": "./unity/Lumberjack/ProjectSettings/Packages/com.unity.testtools.codecoverage",
                    "children": {
                      "Settings.json": {
                        "path": "./unity/Lumberjack/ProjectSettings/Packages/com.unity.testtools.codecoverage/Settings.json",
                        "isBinary": false,
                        "content": [
                          "{",
                          "\\"m_Name\\": \\"Settings\\",",
                          "\\"m_Path\\": \\"ProjectSettings/Packages/com.unity.testtools.codecoverage/Settings.json\\",",
                          "\\"m_Dictionary\\": {",
                          "\\"m_DictionaryValues\\": []",
                          "}",
                          "}"
                        ]
                      }
                    }
                  }
                }
              },
              "Physics2DSettings.asset": {
                "path": "./unity/Lumberjack/ProjectSettings/Physics2DSettings.asset",
                "isBinary": true,
                "content": null
              },
              "PresetManager.asset": {
                "path": "./unity/Lumberjack/ProjectSettings/PresetManager.asset",
                "isBinary": true,
                "content": null
              },
              "ProjectSettings.asset": {
                "path": "./unity/Lumberjack/ProjectSettings/ProjectSettings.asset",
                "isBinary": true,
                "content": null
              },
              "ProjectVersion.txt": {
                "path": "./unity/Lumberjack/ProjectSettings/ProjectVersion.txt",
                "isBinary": false,
                "content": [
                  "m_EditorVersion: 2021.3.32f1",
                  "m_EditorVersionWithRevision: 2021.3.32f1 (3b9dae9532f5)"
                ]
              },
              "QualitySettings.asset": {
                "path": "./unity/Lumberjack/ProjectSettings/QualitySettings.asset",
                "isBinary": true,
                "content": null
              },
              "SceneTemplateSettings.json": {
                "path": "./unity/Lumberjack/ProjectSettings/SceneTemplateSettings.json",
                "isBinary": false,
                "content": [
                  "{",
                  "\\"templatePinStates\\": [],",
                  "\\"dependencyTypeInfos\\": [",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEngine.AnimationClip\\",",
                  "\\"ignore\\": false,",
                  "\\"defaultInstantiationMode\\": 0,",
                  "\\"supportsModification\\": true",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEditor.Animations.AnimatorController\\",",
                  "\\"ignore\\": false,",
                  "\\"defaultInstantiationMode\\": 0,",
                  "\\"supportsModification\\": true",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEngine.AnimatorOverrideController\\",",
                  "\\"ignore\\": false,",
                  "\\"defaultInstantiationMode\\": 0,",
                  "\\"supportsModification\\": true",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEditor.Audio.AudioMixerController\\",",
                  "\\"ignore\\": false,",
                  "\\"defaultInstantiationMode\\": 0,",
                  "\\"supportsModification\\": true",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEngine.ComputeShader\\",",
                  "\\"ignore\\": true,",
                  "\\"defaultInstantiationMode\\": 1,",
                  "\\"supportsModification\\": true",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEngine.Cubemap\\",",
                  "\\"ignore\\": false,",
                  "\\"defaultInstantiationMode\\": 0,",
                  "\\"supportsModification\\": true",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEngine.GameObject\\",",
                  "\\"ignore\\": false,",
                  "\\"defaultInstantiationMode\\": 0,",
                  "\\"supportsModification\\": true",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEditor.LightingDataAsset\\",",
                  "\\"ignore\\": false,",
                  "\\"defaultInstantiationMode\\": 0,",
                  "\\"supportsModification\\": false",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEngine.LightingSettings\\",",
                  "\\"ignore\\": false,",
                  "\\"defaultInstantiationMode\\": 0,",
                  "\\"supportsModification\\": true",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEngine.Material\\",",
                  "\\"ignore\\": false,",
                  "\\"defaultInstantiationMode\\": 0,",
                  "\\"supportsModification\\": true",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEditor.MonoScript\\",",
                  "\\"ignore\\": true,",
                  "\\"defaultInstantiationMode\\": 1,",
                  "\\"supportsModification\\": true",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEngine.PhysicMaterial\\",",
                  "\\"ignore\\": false,",
                  "\\"defaultInstantiationMode\\": 0,",
                  "\\"supportsModification\\": true",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEngine.PhysicsMaterial2D\\",",
                  "\\"ignore\\": false,",
                  "\\"defaultInstantiationMode\\": 0,",
                  "\\"supportsModification\\": true",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEngine.Rendering.PostProcessing.PostProcessProfile\\",",
                  "\\"ignore\\": false,",
                  "\\"defaultInstantiationMode\\": 0,",
                  "\\"supportsModification\\": true",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEngine.Rendering.PostProcessing.PostProcessResources\\",",
                  "\\"ignore\\": false,",
                  "\\"defaultInstantiationMode\\": 0,",
                  "\\"supportsModification\\": true",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEngine.Rendering.VolumeProfile\\",",
                  "\\"ignore\\": false,",
                  "\\"defaultInstantiationMode\\": 0,",
                  "\\"supportsModification\\": true",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEditor.SceneAsset\\",",
                  "\\"ignore\\": false,",
                  "\\"defaultInstantiationMode\\": 0,",
                  "\\"supportsModification\\": false",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEngine.Shader\\",",
                  "\\"ignore\\": true,",
                  "\\"defaultInstantiationMode\\": 1,",
                  "\\"supportsModification\\": true",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEngine.ShaderVariantCollection\\",",
                  "\\"ignore\\": true,",
                  "\\"defaultInstantiationMode\\": 1,",
                  "\\"supportsModification\\": true",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEngine.Texture\\",",
                  "\\"ignore\\": false,",
                  "\\"defaultInstantiationMode\\": 0,",
                  "\\"supportsModification\\": true",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEngine.Texture2D\\",",
                  "\\"ignore\\": false,",
                  "\\"defaultInstantiationMode\\": 0,",
                  "\\"supportsModification\\": true",
                  "},",
                  "{",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"UnityEngine.Timeline.TimelineAsset\\",",
                  "\\"ignore\\": false,",
                  "\\"defaultInstantiationMode\\": 0,",
                  "\\"supportsModification\\": true",
                  "}",
                  "],",
                  "\\"defaultDependencyTypeInfo\\": {",
                  "\\"userAdded\\": false,",
                  "\\"type\\": \\"<default_scene_template_dependencies>\\",",
                  "\\"ignore\\": false,",
                  "\\"defaultInstantiationMode\\": 1,",
                  "\\"supportsModification\\": true",
                  "},",
                  "\\"newSceneOverride\\": 0",
                  "}"
                ]
              },
              "TagManager.asset": {
                "path": "./unity/Lumberjack/ProjectSettings/TagManager.asset",
                "isBinary": true,
                "content": null
              },
              "TimeManager.asset": {
                "path": "./unity/Lumberjack/ProjectSettings/TimeManager.asset",
                "isBinary": true,
                "content": null
              },
              "UnityConnectSettings.asset": {
                "path": "./unity/Lumberjack/ProjectSettings/UnityConnectSettings.asset",
                "isBinary": true,
                "content": null
              },
              "VFXManager.asset": {
                "path": "./unity/Lumberjack/ProjectSettings/VFXManager.asset",
                "isBinary": true,
                "content": null
              },
              "VersionControlSettings.asset": {
                "path": "./unity/Lumberjack/ProjectSettings/VersionControlSettings.asset",
                "isBinary": true,
                "content": null
              },
              "XRSettings.asset": {
                "path": "./unity/Lumberjack/ProjectSettings/XRSettings.asset",
                "isBinary": true,
                "content": null
              },
              "boot.config": {
                "path": "./unity/Lumberjack/ProjectSettings/boot.config",
                "isBinary": false,
                "content": []
              }
            }
          },
          "UserSettings": {
            "path": "./unity/Lumberjack/UserSettings",
            "children": {
              "EditorUserSettings.asset": {
                "path": "./unity/Lumberjack/UserSettings/EditorUserSettings.asset",
                "isBinary": true,
                "content": null
              },
              "Layouts": {
                "path": "./unity/Lumberjack/UserSettings/Layouts",
                "children": {
                  "default-2021.dwlt": {
                    "path": "./unity/Lumberjack/UserSettings/Layouts/default-2021.dwlt",
                    "isBinary": true,
                    "content": null
                  }
                }
              },
              "Search.settings": {
                "path": "./unity/Lumberjack/UserSettings/Search.settings",
                "isBinary": false,
                "content": [
                  "{}"
                ]
              }
            }
          }
        }
      }
    }
  }
}"
`;
